<?php

/**
 * @file
 * Common functionality for DKAN Datastore API tests.
 */

/**
 * Test basic Data API functionality.
 */
class DkanDatastoreApiWebTestCase extends DrupalWebTestCase {

  protected $profile = 'testing';
  protected $adminUser = NULL;
  protected $filePathCreate = '';
  protected $filePathUpdate = '';
  protected $endpoint = '';

  protected $datastoreId = '';
  protected $datastoreNodeId = '';

  /**
   * Information about the test.
   */
  public static function getInfo() {
    return array(
      'name'  => 'DKAN Datastore API Test',
      'description' => 'Test DKAN Datastore API functions and endpoints',
      'group' => 'DKAN Datastore',
    );
  }

  /**
   * Setup testcase.
   */
  public function setUp() {

    $args = func_get_args();

    if (isset($args[0])) {
      if (is_array($args[0])) {
        $modules = $args[0];
      }
      else {
        $modules = $args;
      }
    }
    else {
      $modules = array();
    }

    $modules[] = 'ctools';
    $modules[] = 'field';
    $modules[] = 'field_sql_storage';
    $modules[] = 'file';
    $modules[] = 'filter';
    $modules[] = 'node';
    $modules[] = 'options';
    $modules[] = 'system';
    $modules[] = 'taxonomy';
    $modules[] = 'simpletest';
    $modules[] = 'text';
    $modules[] = 'update';
    $modules[] = 'user';
    $modules[] = 'data';
    $modules[] = 'date';
    $modules[] = 'date_api';
    $modules[] = 'date_popup';
    $modules[] = 'dkan_dataset';
    $modules[] = 'dkan_dataset_content_types';
    $modules[] = 'dkan_datastore';
    $modules[] = 'dkan_datastore_api';
    $modules[] = 'features';
    $modules[] = 'feeds';
    $modules[] = 'feeds_field_fetcher';
    $modules[] = 'feeds_flatstore_processor';
    $modules[] = 'double_field';
    $modules[] = 'entityreference';
    $modules[] = 'field_group';
    $modules[] = 'field_group_table';
    $modules[] = 'filefield_sources';
    $modules[] = 'link';
    $modules[] = 'link_iframe_formatter';
    $modules[] = 'multistep';
    $modules[] = 'ref_field_sync';
    $modules[] = 'remote_file_source';
    $modules[] = 'select_or_other';
    $modules[] = 'chosen';
    $modules[] = 'entity';
    $modules[] = 'job_scheduler';
    $modules[] = 'libraries';
    $modules[] = 'remote_stream_wrapper';
    $modules[] = 'strongarm';
    $modules[] = 'token';
    $modules[] = 'search_api';
    $modules[] = 'services';
    $modules[] = 'rest_server';
    $modules[] = 'autocomplete_deluxe';
    $modules[] = 'beautytips';
    $modules[] = 'jquery_update';
    $modules[] = 'uuid';
    $modules[] = 'eva';
    $modules[] = 'views';
    $modules[] = 'recline';

    $modules = array_unique($modules);

    parent::setUp($modules);

    features_rebuild();

    // Create Admin user with specific permissions.
    $admin_perms = array(
      'access content',
      'administer site configuration',
      'administer content types',
      'administer features',
      'administer nodes',
      'bypass node access',
      'create dataset content',
      'create resource content',
      'edit any dataset content',
      'edit any resource content',
      'administer feeds',
      'manage datastore',
    );
    $this->adminUser = $this->drupalCreateUser($admin_perms);
    $this->drupalLogin($this->adminUser);

    // Set up endpoint.
    $this->endpoint = $this->saveNewEndpoint();

    // Save test file path for datastore creation.
    $this->filePathCreate = drupal_get_path('module', 'dkan_datastore_api');
    $this->filePathCreate = realpath($this->filePathCreate . '/tests/files/example_file_for_create.csv');

    // Save test file path for datastore update.
    $this->filePathUpdate = drupal_get_path('module', 'dkan_datastore_api');
    $this->filePathUpdate = realpath($this->filePathUpdate . '/tests/files/example_file_for_update.csv');

    // Use a cookie file, so login sessions will survive.
    $this->cookieFile = drupal_tempnam(variable_get('file_temporary_path'), 'services_cookiejar');
    // Load the cookie file when initializing Curl.
    $this->additionalCurlOptions[CURLOPT_COOKIEFILE] = $this->cookieFile;

  }

  /**
   * Saves new endpoint for tests.
   */
  public function saveNewEndpoint() {

    $endpoint = new stdClass();
    $endpoint->disabled = FALSE;
    $endpoint->api_version = 3;
    $endpoint->name = 'dkan_datastore_api';
    $endpoint->server = 'rest_server';
    $endpoint->path = 'api/action/datastore';
    $endpoint->authentication = array(
      'services' => 'services',
    );
    $endpoint->server_settings = array(
      'formatters' => array(
        'bencode' => TRUE,
        'json' => TRUE,
        'jsonp' => TRUE,
        'php' => TRUE,
        'xml' => TRUE,
        'yaml' => TRUE,
      ),
      'parsers' => array(
        'application/json' => TRUE,
        'application/vnd.php.serialized' => TRUE,
        'application/x-www-form-urlencoded' => TRUE,
        'application/x-yaml' => TRUE,
        'application/xml' => TRUE,
        'multipart/form-data' => TRUE,
        'text/xml' => TRUE,
        'text/csv' => TRUE,
        'text/plain' => TRUE,
      ),
    );
    $endpoint->resources = array(
      'dkan_datastore' => array(
        'alias' => 'store',
        'operations' => array(
          'create' => array(
            'enabled' => '1',
          ),
          'update' => array(
            'enabled' => '1',
          ),
        ),
        'actions' => array(
          'create' => array(
            'enabled' => '1',
          ),
          'update' => array(
            'enabled' => '1',
          ),
        ),
      ),
      'dkan_datastore_file' => array(
        'alias' => 'data',
        'operations' => array(
          'delete' => array(
            'enabled' => '1',
          ),
        ),
      ),
    );

    $endpoint->debug = 1;
    $endpoint->export_type = FALSE;
    services_endpoint_save($endpoint);
    $endpoint = services_endpoint_load($endpoint->name);
    $this->assertTrue($endpoint->name == 'dkan_datastore_api', 'Endpoint successfully created');
    return $endpoint;
  }

  /**
   * Test the API resource to create a datastore by file.
   */
  public function testDatastoreCreateByFile() {

    $post_data = array(
      'filesize' => filesize($this->filePathCreate),
      'filename' => basename($this->filePathCreate),
      'file' => base64_encode(file_get_contents($this->filePathCreate)),
      'uid'  => $this->adminUser->uid,
    );

    // Create file with call.
    $result = $this->post($this->endpoint->path . '/store', $post_data);

    $data = json_decode($result['body']);

    // Check: The response has all the expected parameters.
    $this->assertTrue(isset($data->result));
    $this->assertTrue(isset($data->datastore_id));
    $this->assertTrue(isset($data->node_id));

    $this->datastoreId = $data->datastore_id;
    $this->datastoreNodeId = $data->node_id;

    // Check: Sucessful response.
    $this->assertEqual($data->result, 'success');

    $items = $this->datastoreItems($data->node_id);

    // Check: The datastore has items.
    $this->assertTrue($items);
    // Check: The number of items is 3
    $this->assertEqual($items, 3);

  }

  /**
   * Test the API resource to create a datastore by file.
   */
  public function testDatastoreCreateByFileMultiPart() {

    $file = file_get_contents($this->filePathCreate);
    $file = file_save_data($file, 'public://' . basename($this->filePathCreate));

    $result = $this->postFile($this->endpoint->path . '/store/create', $file->uri);

    $data = json_decode($result['body']);

    // Check: The response has all the expected parameters.
    $this->assertTrue(isset($data->result));
    $this->assertTrue(isset($data->datastore_id));
    $this->assertTrue(isset($data->node_id));

    $this->datastoreId = $data->datastore_id;
    $this->datastoreNodeId = $data->node_id;

    // Check: Sucessful response.
    $this->assertEqual($data->result, 'success');

    $items = $this->datastoreItems($data->node_id);

    // Check: The datastore has items.
    $this->assertTrue($items);
    // Check: The number of items is 3
    $this->assertEqual($items, 3);
  }

  /**
   * Test the API resource to update a datastore by file.
   */
  public function testDatastoreUpdateByFile() {

    // Create a datastore.
    $this->testDatastoreCreateByFile();

    $items = $this->datastoreItems($this->datastoreNodeId);

    // Check: The number of items before update is 3
    $this->assertEqual($items, 3);

    $post_data = array(
      'filesize' => filesize($this->filePathUpdate),
      'filename' => basename($this->filePathUpdate),
      'file' => base64_encode(file_get_contents($this->filePathUpdate)),
      'uid'  => $this->adminUser->uid,
    );

    // Update datastore.
    $result = $this->put($this->endpoint->path . '/store/' . $this->datastoreId, $post_data);

    $data = json_decode($result['body']);

    // Check: The response has all the expected parameters.
    $this->assertTrue(isset($data->result));
    $this->assertTrue(isset($data->datastore_id));
    $this->assertTrue(isset($data->node_id));

    // Check: Sucessful response.
    $this->assertEqual($data->result, 'success');

    $items = $this->datastoreItems($data->node_id);

    // Check: The datastore has items.
    $this->assertTrue($items);
    // Check: The number of items is 9
    $this->assertEqual($items, 9);
  }

  /**
   * Test the API resource to update a datastore by file.
   */
  public function testDatastoreUpdateByFileMultiPart() {

    // Create a datastore.
    $this->testDatastoreCreateByFileMultiPart();

    $items = $this->datastoreItems($this->datastoreNodeId);

    // Check: The number of items before update is 3
    $this->assertEqual($items, 3);

    $file = file_get_contents($this->filePathUpdate);
    $file = file_save_data($file, 'public://' . basename($this->filePathUpdate));

    // Update datastore.
    $result = $this->postFile($this->endpoint->path . '/store/update/' . $this->datastoreId, $file->uri);

    $data = json_decode($result['body']);

    // Check: The response has all the expected parameters.
    $this->assertTrue(isset($data->result));
    $this->assertTrue(isset($data->datastore_id));
    $this->assertTrue(isset($data->node_id));

    // Check: Sucessful response.
    $this->assertEqual($data->result, 'success');

    $items = $this->datastoreItems($data->node_id);

    // Check: The datastore has items.
    $this->assertTrue($items);
    // Check: The number of items is 9
    $this->assertEqual($items, 9);
  }

  /**
   * Test the API resource to delete a datastore file.
   */
  public function testDatastoreFileDelete() {

    // Create a datastore.
    $this->testDatastoreCreateByFile();

    $items = $this->datastoreItems($this->datastoreNodeId);

    // Check: There are items before delete.
    $this->assertTrue($items);

    // Delete file.
    $result = $this->delete($this->endpoint->path . '/data/' . $this->datastoreId);

    $data = json_decode($result['body']);

    // Check: The response has all the expected parameters.
    $this->assertTrue(isset($data->result));
    $this->assertTrue(isset($data->datastore_id));
    $this->assertTrue(isset($data->node_id));

    // Check: Sucessful response.
    $this->assertEqual($data->result, 'success');

    $items = $this->datastoreItems($data->node_id);

    // Check: The datastore has no items.
    $this->assertFalse($items);
  }

  /**
   * Helper function used to count datastore Items.
   *
   * @param int $nid
   *   ID of the Node with items.
   */
  protected function datastoreItems($nid) {

    if ($nid) {
      $source_id = db_query("SELECT id FROM {feeds_source} WHERE feed_nid = :nid
           AND source != ''", array(':nid' => $nid))->fetchField();

      if ($source_id) {
        $table_name = 'feeds_datastore_' . $source_id . '_' . $nid;
        $result = db_query("SELECT COUNT(*) FROM {" . $table_name . "}")->fetchField();

        if ($result) {
          return $result;
        }
      }
    }

    return FALSE;
  }

  /**
   * Performs POST request.
   *
   * @param string $url
   *   Endpoint URL.
   * @param array $data
   *   Data to be sent on POST.
   * @param array $headers
   *   Headers to be included on request.
   *
   * @return array
   *   Response data.
   */
  protected function post($url, $data = array(), $headers = array()) {

    $this->addCsrfHeader($headers);

    $url = $this->getAbsoluteUrl($url) . '.json';

    $headers[] = "Content-type: application/json";

    $post = json_encode($data);

    $content = $this->curlExec(array(
      CURLOPT_URL => $url,
      CURLOPT_POST => TRUE,
      CURLOPT_POSTFIELDS => $post,
      CURLOPT_HTTPHEADER => $headers,
      CURLOPT_HEADER => TRUE,
      CURLOPT_RETURNTRANSFER => TRUE,
    ));

    list($info, $header, $status, $code, $body) = $this->parseHeader($content);

    return array(
      'header' => $header,
      'status' => $status,
      'code' => $code,
      'body' => $body,
    );
  }

  /**
   * Post file as multipart/form-data.
   *
   * @param string $url
   *   Endpoint URL.
   * @param string $filepath
   *   Path of the file.
   * @param array $additional_arguments
   *   Additional arguments to be sent on the POST request.
   *
   * @return array
   *   Response data.
   */
  protected function postFile($url, $filepath, $additional_arguments = array()) {

    $this->addCsrfHeader($headers);

    $url = $this->getAbsoluteUrl($url) . '.json';

    $headers[] = "Content-type: multipart/form-data";

    $post = $additional_arguments;
    $post['files[file_contents]'] = '@' . variable_get('file_public_path', '') . '/' . file_uri_target($filepath);

    $content = $this->curlExec(array(
      CURLOPT_URL => $url,
      CURLOPT_POST => TRUE,
      CURLOPT_POSTFIELDS => $post,
      CURLOPT_HTTPHEADER => $headers,
      CURLOPT_HEADER => TRUE,
      CURLOPT_RETURNTRANSFER => TRUE,
      CURLOPT_FOLLOWLOCATION => TRUE,
      CURLOPT_VERBOSE => TRUE,
    ));

    list($info, $header, $status, $code, $body) = $this->parseHeader($content);

    return array(
      'header' => $header,
      'status' => $status,
      'code' => $code,
      'body' => $body,
    );
  }

  /**
   * Performs PUT request.
   *
   * @param string $url
   *   Endpoint URL.
   * @param array $data
   *   Data to be sent on PUT.
   * @param array $headers
   *   Headers to be included on request.
   *
   * @return array
   *   Response data.
   */
  protected function put($url, $data = array(), $headers = array()) {

    $this->addCsrfHeader($headers);

    $url = $this->getAbsoluteUrl($url) . '.json';

    $headers[] = "Content-type: application/json";

    $post = json_encode($data);

    $content = $this->curlExec(array(
      CURLOPT_URL => $url,
      CURLOPT_CUSTOMREQUEST => "PUT",
      CURLOPT_POSTFIELDS => $post,
      CURLOPT_RETURNTRANSFER => TRUE,
      CURLOPT_HEADER => TRUE,
      CURLOPT_HTTPHEADER => $headers,
    ));

    list($info, $header, $status, $code, $body) = $this->parseHeader($content);

    return array(
      'header' => $header,
      'status' => $status,
      'code' => $code,
      'body' => $body,
    );
  }

  /**
   * Perform GET request.
   *
   * @param string $url
   *   Endpoint URL.
   *
   * @return array
   *   Response data.
   */
  protected function get($url) {

    $url = $this->getAbsoluteUrl($url);

    $content = $this->curlExec(array(
      CURLOPT_HTTPGET => TRUE,
      CURLOPT_URL => $url,
      CURLOPT_RETURNTRANSFER => TRUE,
      CURLOPT_HEADER => TRUE,
    ));

    list($info, $header, $status, $code, $body) = $this->parseHeader($content);

    return array(
      'header' => $header,
      'status' => $status,
      'code' => $code,
      'body' => $body,
    );
  }

  /**
   * Performs DELETE request.
   *
   * @param string $url
   *   Endpoint URL.
   * @param array $headers
   *   Headers to be included on request.
   *
   * @return array
   *   Response data.
   */
  protected function delete($url, $headers = array()) {

    $this->addCsrfHeader($headers);

    $url = $this->getAbsoluteUrl($url) . '.json';

    $headers[] = "Content-type: application/json";

    $content = $this->curlExec(array(
      CURLOPT_URL => $url,
      CURLOPT_CUSTOMREQUEST => "DELETE",
      CURLOPT_RETURNTRANSFER => TRUE,
      CURLOPT_HEADER => TRUE,
      CURLOPT_HTTPHEADER => $headers,
      CURLOPT_HTTPGET => FALSE,
    ));

    list($info, $header, $status, $code, $body) = $this->parseHeader($content);

    return array(
      'header' => $header,
      'status' => $status,
      'code' => $code,
      'body' => $body,
    );
  }

  /**
   * Retrieve and set CSFR token header.
   *
   * @param array $headers
   *   Headers array where the CSRF token should be added.
   */
  protected function addCsrfHeader(&$headers) {
    $result = $this->get('services/session/token');

    $headers[] = 'X-CSRF-Token: ' . $result['body'];
  }

  /**
   * Parse header.
   *
   * @param string $content
   *   Raw response content.
   *
   * @return array
   *   Processed header data.
   */
  protected function parseHeader($content) {

    $info = curl_getinfo($this->curlHandle);
    $header = drupal_substr($content, 0, $info['header_size']);
    $header = str_replace("HTTP/1.1 100 Continue\r\n\r\n", '', $header);
    $status = strtok($header, "\r\n");
    $code = $info['http_code'];

    $raw_body = drupal_substr($content, $info['header_size'], drupal_strlen($content) - $info['header_size']);

    return array($info, $header, $status, $code, $raw_body);
  }

}
