<?php

/**
 * @file
 * Test file for dkan datastore module.
 *
 * DKAN Datastore API
 * 1) Check queries against API once file is loaded.
 * 2) Queries
 *    1. Limit
 *    2. Query
 *    3. Filters
 *   4. Offset
 *   5. Fields
 *   6. Sort
 *   7. Join (requires second dataset)
 */

/**
 * Test basic Datastore API functionality.
 */
class DkanDatastoreWebTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';

  protected $resource;

  /**
   * Information about the test.
   */
  public static function getInfo() {
    return array(
      'name'        => 'DKAN Datastore Test',
      'description' => 'Test the functions and API for DKAN Datastore.',
      'group'       => 'DKAN Datastore',
    );
  }

  /**
   * Prepares site for tests.
   */
  public function setUp() {
    $modules = array();
    $modules[] = 'ctools';
    $modules[] = 'field';
    $modules[] = 'field_sql_storage';
    $modules[] = 'file';
    $modules[] = 'filter';
    $modules[] = 'node';
    $modules[] = 'options';
    $modules[] = 'system';
    $modules[] = 'taxonomy';
    $modules[] = 'simpletest';
    $modules[] = 'text';
    $modules[] = 'update';
    $modules[] = 'user';
    $modules[] = 'data';
    $modules[] = 'date';
    $modules[] = 'date_api';
    $modules[] = 'date_popup';
    $modules[] = 'dkan_dataset';
    $modules[] = 'dkan_dataset_content_types';
    $modules[] = 'dkan_datastore';
    $modules[] = 'dkan_datastore_api';
    $modules[] = 'features';
    $modules[] = 'feeds';
    $modules[] = 'feeds_field_fetcher';
    $modules[] = 'feeds_flatstore_processor';
    $modules[] = 'double_field';
    $modules[] = 'entityreference';
    $modules[] = 'field_group';
    $modules[] = 'field_group_table';
    $modules[] = 'filefield_sources';
    $modules[] = 'link';
    $modules[] = 'link_iframe_formatter';
    $modules[] = 'multistep';
    $modules[] = 'ref_field_sync';
    $modules[] = 'select_or_other';
    $modules[] = 'chosen';
    $modules[] = 'entity';
    $modules[] = 'job_scheduler';
    $modules[] = 'libraries';
    $modules[] = 'remote_stream_wrapper';
    $modules[] = 'strongarm';
    $modules[] = 'token';
    $modules[] = 'search_api';
    $modules[] = 'services';
    $modules[] = 'rest_server';
    $modules[] = 'autocomplete_deluxe';
    $modules[] = 'beautytips';
    $modules[] = 'jquery_update';
    $modules[] = 'uuid';
    $modules[] = 'views';

    $modules = array_unique($modules);
    parent::setUp($modules);

    features_rebuild();

    // Create test data.
    $file_path = drupal_get_path('module', 'dkan_datastore');
    $file_path = realpath($file_path . '/test/files/countries.csv');
    $file = file_get_contents($file_path);
    $file = file_save_data($file, 'public://countries.csv');
    $file = (array) $file;

    // Setup resource.
    $this->resource = $this->drupalCreateNode(
      array(
        'title' => $this->randomName(32),
        'type' => 'resource',
        'body' => array(
          LANGUAGE_NONE => array(
            array(
              $this->randomName(256),
            ),
          ),
        ),
        'field_upload' => array(
          LANGUAGE_NONE => array(
            $file,
          ),
        ),
      )
    );

    // Create Admin user with specific permissions.
    $admin_perms = array(
      'access content',
      'administer site configuration',
      'administer content types',
      'administer features',
      'administer nodes',
      'bypass node access',
      'create dataset content',
      'create resource content',
      'edit any dataset content',
      'edit any resource content',
      'administer feeds',
      'manage datastore',
    );
    $this->verbose('Creating admin user with permissions: ' . var_export($admin_perms, TRUE));
    // Create an admin user and log in.
    $this->admin_user = $this->drupalCreateUser($admin_perms);
    $this->drupalLogin($this->admin_user);
  }

  /**
   * DKAN Datastore Tests.
   */
  public function testDkanDatastore() {
    // Save resource node.
    $this->drupalGet('node/' . $this->resource->nid . '/edit');
    $this->drupalPost('node/' . $this->resource->nid . '/edit', array(), 'Save');
    // Get Resource Datastore Page and test that the node isn't imported yet.
    $this->drupalGet('node/' . $this->resource->nid . '/datastore');
    $this->assertText('No imported items.');
    $this->verbose('Datastore status: ' . dkan_datastore_status($this->resource));
    $this->assertEqual(
      DKAN_DATASTORE_FILE_EXISTS,
      dkan_datastore_status($this->resource),
      'File is attached to a resource, but not added to the datastore.'
    );

    // Import the resource to the datastore and test for operation success.
    $this->drupalPost('node/' . $this->resource->nid . '/datastore', array(), 'Import');
    $this->drupalGet('node/' . $this->resource->nid);
    $this->assertText('Your file for this resource has been added to the datastore.');
    $this->assertEqual(
      dkan_datastore_status($this->resource),
      DKAN_DATASTORE_EXISTS,
      'Datastore is created for a given resource.'
    );

    // Check table exists and has data.
    $table_exists = $this->assertDatastoreTable($this->resource);
    // Check a couple of records hitting the db directly.
    if ($table_exists) {
      $this->assertDatastoreTableData($this->resource, 1, 'US');
      $this->assertDatastoreTableData($this->resource, 3, 'AR');
    }

    // Query the api.
    $result = $this->queryDatastoreApi($this->resource);

    // Test API Results.
    $this->assertTrue(strpos($result->help, 'Search a datastore table.') !== FALSE);
    $this->assertTrue($result->success);
    foreach ($result->result as $key => $value) {
      switch ($key) {
        case 'fields':
          $this->assertEqual(count($value), 4);
          $expected = array(
            'country' => 'text',
            'population' => 'int',
            'id' => 'int',
            'timestamp' => 'datetime',
          );
          foreach ($value as $field) {
            $is_set = $this->assertTrue(isset($expected[$field->id]));
            if ($is_set) {
              $this->assertEqual($field->type, $expected[$field->id]);
            }
          }
          break;

        case 'resource_id':
          $is_set = $this->assertEqual(count($value), 1);
          if ($is_set) {
            $this->assertEqual($value[0], $this->resource->uuid);
          }
          break;

        case 'limit':
          $this->assertEqual($value, 4);
          break;

        case 'total':
          $this->assertEqual($value, 4);
          break;

        case 'records':
          $is_set = $this->assertEqual(count($value), 4);
          if ($is_set) {
            foreach ($value as $record) {
              if ($record->country === 'US') {
                $this->assertEqual($record->population, '315209000');
                $this->assertEqual($record->id, '1');
              }
            }
          }
          break;

        case 'default':
          break;
      }
    }
  }

  /**
   * Assert that a datastore table for a node exists.
   *
   * @param object $resource
   *   A resource node.
   *
   * @return bool
   *   Returns true if the table exists.
   */
  protected function assertDatastoreTable($resource) {
    // See if table exists.
    $r = $this->assertTrue(
      db_table_exists('feeds_datastore_dkan_file_' . $resource->nid),
      "Datastore table exists."
    );
    return $r;
  }

  /**
   * Assert that certain data exists in a table.
   *
   * @param object $resource
   *   A resource node.
   * @param int $id
   *   A match for the db column id.
   * @param string $expected_result
   *   The expected result for the query.
   *
   * @return bool
   *   Returns true if data meeting the criteria exists in the db.
   */
  protected function assertDatastoreTableData($resource, $id, $expected_result) {
    // We're actually going to see if we get a hit for a particular country id.
    $result = db_select('feeds_datastore_dkan_file_' . $resource->nid, 'f')
      ->fields('f', array('country'))
      ->condition('id', $id)
      ->execute();
    $result = $result->fetchField();
    $r = $this->assertEqual(
      $result,
      $expected_result,
      'Found Expected Record'
    );
    return $r;
  }

  /**
   * Builds query to the datastore api.
   *
   * @param object $resource
   *   The resource node.
   * @param array $options
   *   An associate array containing the query data.
   *
   * @return object
   *   An object containing the json response.
   */
  protected function queryDatastoreApi($resource, array $options = array()) {
    $query = array('resource_id' => $resource->uuid);
    foreach ($options as $key => $value) {
      switch ($key) {
        case 'q':
          $query['q'] = $value;
          break;

        case 'filters':
          if (is_array($value)) {
            $filters = $value;
            foreach ($filters as $filter => $value) {
              $query["$filters[$filter]"] = $value;
            }
          }
          break;

        case 'offset':
          if (is_numeric($value)) {
            $query['offset'] = (int) $value;
          }
          break;

        case 'limit':
          if (is_numeric($value)) {
            $query['limit'] = (int) $value;
          }
          break;

        case 'fields':
          $query['fields'] = $fields;
          break;

        case 'sort':
          $query['sort'] = $sort;
          break;

        case 'join':
          $query['join'] = $join;
          break;

        default:
          break;
      }
    }
    $r = $this->drupalGet(
      'api/action/datastore/search.json',
      array(
        'query' => $query,
        'absolute' => TRUE,
      )
    );
    return json_decode($r);
  }

}
