version: 2
jobs:
  build:
    parallelism: 5
    docker:
      - image: ubuntu:16.04
    working_directory: /go/src/github.com/dkan
    environment:
      TEST_RESULTS: /tmp/test-results
      AHOY_CMD_PROXY: DOCKER
      MYSQL_ROOT_PASSWORD: ""
      MYSQL_USER: drupal
      MYSQL_PASSWORD: 123
      MYSQL_DATABASE: drupal
      DATABASE_URL: "mysql://drupal:123@127.0.0.1:3306/drupal"
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Updates etc
          command: |
            apt-get update
            apt-get upgrade -y
            apt-get install curl wget ruby php php-mbstring php-curl php-dom -y
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
      - run:
          name: Install Ahoy
          command: |
            wget -q https://github.com/devinci-code/ahoy/releases/download/1.1.0/ahoy-`uname -s`-amd64 -O /usr/local/bin/ahoy &&
            chmod +x /usr/local/bin/ahoy
      - run:
          name: Install CircleCI CLI
          command: |
            curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci && chmod +x /usr/local/bin/circleci
      - run:
          name: Install Composer
          command: |
            curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
            composer global require hirak/prestissimo
            echo 'export PATH=~/.composer/vendor/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install Drush
          command: |
            composer global require consolidation/cgr
            cgr drush/drush
            drush --version
      - run:
          name: Setup DKAN
          command: |
            bash dkan-init.sh dkan --deps
      - run:
          name: Start containers
          command: |
            cp dkan/.ahoy/docker-compose.common.yml docker-compose.yml
            cp dkan/.ahoy/mysql.env mysql.env
            ahoy docker up
            rm -rf dkan/.ahoy/.docker
            docker cp .ahoy.yml $(docker-compose ps -q cli):/var/www
            mkdir -p dkan/test/assets/junit
            docker cp dkan $(docker-compose ps -q cli):/var/www
      - run:
          name: Install Drupal
          command: |
            ahoy dkan drupal-rebuild mysql://drupal:123@127.0.0.1:3306/drupal
            docker cp $(docker-compose ps -q cli):/var/www/docroot docroot
            mkdir backups
            docker cp backups $(docker-compose ps -q cli):/var/www/backups
      - run:
          name: Make DKAN
          command: |
            ahoy dkan remake
      - run:
          name: Install DKAN
          command: |
            ahoy dkan reinstall
      - run:
          name: Enable modules
          command: |
            ahoy drush --yes en dkan_harvest dkan_harvest_datajson dkan_harvest_dashboard
            ahoy drush cc all
      - run:
          name: Install Test Libs
          command: |
            ahoy cd-proxy bash dkan/.ahoy/.scripts/composer-install.sh docroot/profiles/dkan/test
      - save_cache:
          key: v1-dkan-{{ .Branch }}
          paths:
            - ~/.drush
            - ~/.composer
      - save_cache:
          key: v1-dkan-test-vendor
          paths:
            - dkan/test/vendor
      - run:
          name: Run Parallel Behat Tests
          command: ruby dkan/.ahoy/.scripts/circle-behat.rb docroot/profiles/dkan/test/features
      - run:
          name: Copy Assets to Base Image
          command: |
            docker cp $(docker-compose ps -q cli):/var/www/dkan/test/assets assets
      - run:
          name: Run Lint
          command: |
            if [ "$CIRCLE_NODE_INDEX" -eq "0" ]; then
              ahoy dkan lint
            fi
      # Unit Tests only on 1st parallel instance. Deploy: blocks until parallelism is done, so doing it this way.
      - run:
          name: Run PHPUnit Tests
          command: |
            if [ "$CIRCLE_NODE_INDEX" -eq "0" ]; then
              ahoy dkan unittests
            fi
      - store_artifacts:
          path: /go/src/github.com/dkan/assets

