<?php

/**
 * @file
 * Installation file of the Recline module.
 */

/**
 * Implements hook_requirement().
 */
function recline_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    $library_path = _recline_library_path();
    if (_recline_requirements_installed($library_path)) {
      $requirements['recline'] = array(
        'title' => t('Recline library'),
        'value' => t('Installed'),
        'severity' => REQUIREMENT_OK,
      );
    }
    else{
      $requirements['recline'] = array(
        'title' => t('Recline library'),
        'value' => t('Not Found'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('You need to download this zip file: !recline and extract the entire contents of the archive into the %path folder of your server.', array('!recline' => l(t('Recline.js'), 'https://github.com/acouch/recline/zipball/master'), '%path' => 'sites/all/libraries/recline')),
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_field_schema().
 */
function recline_field_schema() {
  $columns = array(
    'fid' => array(
      'description' => 'The {file_managed}.fid being referenced in this field.',
      'type' => 'int',
      'not null' => FALSE,
      'unsigned' => TRUE,
    ),
    'service_id' => array(
      'description' => "Service ID for parsed file.",
      'type' => 'varchar',
      'length' => 1024,
      'not null' => FALSE,
    ),
    'delimiter' => array(
      'description' => "Delimiter to use for the file preview.",
      'type' => 'text',
      'not null' => FALSE,
    ),
  );
  module_load_include('inc', 'recline', 'recline.field');
  recline_add_field_columns($columns);
  foreach (recline_view_options() as $view => $label) {
    $columns[$view] = array(
      'type' => 'int',
      'not null' => FALSE,
    );
  }
  $columns['embed'] = array(
    'type' => 'int',
    'not null' => FALSE,
  );
  $indexes = array(
    'fid' => array('fid'),
  );
  $foreign_keys = array(
    'fid' => array(
      'table' => 'file_managed',
      'columns' => array('fid' => 'fid'),
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => $indexes,
    'foreign_keys' => $foreign_keys,
  );
}

/**
 * Checks wether Recline.js library exists or not.
 */
function _recline_requirements_installed($path) {
  if (file_exists($path . '/dist/recline.js')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Add 'delimiter' to recline field storage.
 */
function recline_update_7001(&$sandbox) {
  $ret = array();
  $fields = field_info_fields();
  foreach ($fields as $field_name => $field) {
    if ($field['type'] == 'recline_field' && $field['storage']['type'] == 'field_sql_storage') {
      if (!array_key_exists('delimiter', $field['columns'])) {
        $schema = recline_field_schema($field);
        foreach ($field['storage']['details']['sql'] as $type => $table_info) {
          foreach ($table_info as $table_name => $columns) {
            $column_name = _field_sql_storage_columnname($field_name, 'delimiter');
            db_add_field($table_name, $column_name, $schema['columns']['delimiter']);
          }
        }
        field_cache_clear();
      }
    }
  }
  return $ret;
}

/**
 * Add 'embed' to recline field storage.
 */
function recline_update_7002(&$sandbox) {
  $ret = array();
  $fields = field_info_fields();
  foreach ($fields as $field_name => $field) {
    if ($field['type'] == 'recline_field' && $field['storage']['type'] == 'field_sql_storage') {
      $schema = recline_field_schema($field);
      foreach ($field['storage']['details']['sql'] as $type => $table_info) {
        foreach ($table_info as $table_name => $columns) {
          $column_name = _field_sql_storage_columnname($field_name, 'embed');
          db_add_field($table_name, $column_name, $schema['columns']['embed']);
        }
      }
      field_cache_clear();
    }
  }
  return $ret;
}
