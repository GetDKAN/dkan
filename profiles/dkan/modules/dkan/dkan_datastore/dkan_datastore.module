<?php
/**
 * @file
 * Creates DKAN Datastore
 */

// Datastore is created for a given resource.
define('DKAN_DATASTORE_EXISTS', 1);
// File is attached to a resource, but not added to the datastore.
define('DKAN_DATASTORE_FILE_EXISTS', 2);
// File is attached to a resource, but cannot be added to the datastore.
define('DKAN_DATASTORE_WRONG_TYPE', 3);

include_once "dkan_datastore.features.inc";

/**
 * Implements hook_menu().
 */
function dkan_datastore_menu() {
  $items['node/%node/download'] = array(
    'title' => 'Download',
    'page callback' => 'dkan_datastore_download',
    'page arguments' => array(1),
    'access callback' => 'dkan_datastore_download_access',
    'access arguments' => array(1),
    'file' => 'dkan_datastore.pages.inc',
    'weight' => '20',
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/api'] = array(
    'title' => 'Data API',
    'page callback' => 'dkan_datastore_datastore_api',
    'page arguments' => array(1),
    'access callback' => 'dkan_datastore_datastore_api_access',
    'access arguments' => array(1),
    'file' => 'dkan_datastore.pages.inc',
    'weight' => '25',
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/datastore'] = array(
    'title' => 'Manage Datastore',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkan_datastore_import_tab_form', 1),
    'access callback' => 'dkan_datastore_feeds_access',
    'access arguments' => array('import', 1),
    'file' => 'dkan_datastore.pages.inc',
    'weight' => '15',
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/datastore/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkan_datastore_import_tab_form', 1),
    'access callback' => 'dkan_datastore_feeds_access',
    'access arguments' => array('import', 1),
    'file' => 'dkan_datastore.pages.inc',
    'weight' => 10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%node/datastore/delete-items'] = array(
    'title' => 'Delete items',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkan_datastore_delete_tab_form', NULL, 1),
    'access callback' => 'dkan_datastore_feeds_access',
    'access arguments' => array('clear', 1),
    'file' => 'dkan_datastore.pages.inc',
    'weight' => 11,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/datastore/unlock'] = array(
    'title' => 'Unlock',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkan_datastore_unlock_tab_form', NULL, 1),
    'access callback' => 'dkan_datastore_feeds_access',
    'access arguments' => array('unlock', 1),
    'file' => 'dkan_datastore.pages.inc',
    'weight' => 11,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/datastore/drop'] = array(
    'title' => 'Drop Datastore',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkan_datastore_drop_tab_form', 1),
    'access callback' => 'dkan_datastore_feeds_access',
    'access arguments' => array('drop', 1),
    'file' => 'dkan_datastore.pages.inc',
    'weight' => 12,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function dkan_datastore_menu_alter(&$items) {
  // Removing these here, readding in hook_menu().
  unset($items['node/%node/delete-items']);
  unset($items['node/%node/import']);
  unset($items['node/%node/unlock']);
}

/**
 * Copy of feeds_access.
 */
function dkan_datastore_feeds_access($action, $node) {
  if (!in_array($action, array('import', 'clear', 'unlock', 'drop'))) {
    // If $action is not one of the supported actions, we return access denied.
    return FALSE;
  }
  if ($action == 'drop' && user_access('manage datastore')){
    return TRUE;
  }
  if ($action != 'import') {
    if ($importer_ids = feeds_get_importer_ids($node->type, $node->nid)) {
      foreach ($importer_ids as $importer_id) {
        $source_config = feeds_source($importer_id, $node->nid);
        $fetcher = get_class($source_config->importer->fetcher);
        $source = isset($source_config->config[$fetcher]['source']) ? $source_config->config[$fetcher]['source'] : '';
        if ($source) {
          return TRUE;
        }
      }
      return FALSE;
    }
    else {
      return FALSE;
    }
  }

  if (is_string($node)) {
    $importer_id = $node;
  }
  elseif ($node->type) {
    $importer_id = feeds_get_importer_id($node->type);
  }

  // Check for permissions if feed id is present, otherwise return FALSE.
  if ($importer_id) {
    if (user_access('administer feeds') || user_access("{$action} {$importer_id} feeds")) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Access callback for Data API instructions.
 */
function dkan_datastore_datastore_api_access($node) {
  $upload = '';
  $link = '';
  if (isset($node->field_upload) && $node->field_upload) {
    $upload = isset($node->field_upload[$node->language]) ? $node->field_upload[$node->language] : $node->field_upload['und'];
  }
  if (isset($node->field_link_remote_file) && $node->field_link_remote_file) {
    $link = isset($node->field_link_remote_file[$node->language]) ? $node->field_link_remote_file[$node->language] :  $node->field_link_remote_file['und'];
  }
  if ($node->type == 'resource' && ($upload || $link)) {
    return node_access('view', $node);
  }
  else {
    return FALSE;
  }
}

/**
 * Access callback for download tab.
 */
function dkan_datastore_download_access($node) {
  $upload = '';
  $link = '';
  if (isset($node->field_upload) && $node->field_upload) {
    $upload = isset($node->field_upload[$node->language]) ? $node->field_upload[$node->language] : $node->field_upload['und'];
  }
  if (isset($node->field_link_remote_file) && $node->field_link_remote_file) {
    $link = isset($node->field_link_remote_file[$node->language]) ? $node->field_link_remote_file[$node->language] : $node->field_link_remote_file['und'];
  }
  if ($node->type == 'resource' && ($upload || $link)) {
    return node_access('view', $node);
  }
  else {
    return FALSE;
  }
}

/**
 * Access callback for back link.
 */
function dkan_datastore_back_access($node) {
  if ($node->type != 'resource') {
    return FALSE;
  }
  else {
    return node_access('view', $node);
  }
}

/**
 * Access callback for 'Add Resource' tab.
 */
function dkan_add_resource($node) {
  if ($node->type != 'dataset') {
    return FALSE;
  }
  else {
    return _node_add_access();
  }
}

/**
 * Implements hook_node_update().
 */
function dkan_datastore_node_update($node) {
  // Remove node from feeds list if not csv.
  if (isset($node->feeds) && $node->type == 'resource' && $importer_ids = feeds_get_importer_ids($node->type, $node->nid)) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $file = $wrapper->field_upload->value();
    if (!$file) {
      $link = $wrapper->field_link_remote_file->value();
      if (isset($link) && isset($link['fid'])) {
        $file = file_load($link['fid']);
      }
      elseif (isset($link) && isset($link->fid)) {
        $file = $link;
      }
      else {
        $file = '';
      }
    }
    if ($file) {
      if ($file->filemime != 'text/csv') {
        feeds_node_delete($node);
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function dkan_datastore_permission() {
  return array(
    'manage datastore' => array(
      'title' => t('Manage Datastore'),
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function dkan_datastore_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'resource') {
    $status = dkan_datastore_status($node);
    if (user_access('manage datastore') && $status = dkan_datastore_status($node)) {
      if ($status === DKAN_DATASTORE_FILE_EXISTS) {
        drupal_set_message(t('Your file for this resource is not added to the datastore. Click "Manage Datastore" to import file into the datastore.'));
      }
      elseif ($status === DKAN_DATASTORE_EXISTS) {
        drupal_set_message(t('Your file for this resource has been added to the datastore.'));
      }
    }
  }
}

/**
 * Determines status of datastore attached to resource node.
 */
function dkan_datastore_status($node) {
  if ($file = dkan_datastore_file_field($node)) {
    if ((is_object($file) && $file->filemime == 'text/csv') || (is_array($file) && $file['filemime'] == 'text/csv')) {
      if (dkan_datastore_records($node->nid)) {
        return DKAN_DATASTORE_EXISTS;
      }
      else {
        return DKAN_DATASTORE_FILE_EXISTS;
      }
    }
    else {
      return DKAN_DATASTORE_WRONG_TYPE;
    }
  }
  return FALSE;
}

/**
 * Determines if records exist in a datastore.
 *
 * @param string $nid
 *   Node id for resource node.
 */
function dkan_datastore_records($nid) {
  if (function_exists('dkan_datastore_api_get_feeds_source')) {
    $source_id = dkan_datastore_api_get_feeds_source($nid);
    if ($table = feeds_flatstore_processor_table_name($source_id, $nid)) {
      if (db_table_exists($table)) {
        if ($result = db_query_range("SELECT timestamp FROM {$table}", 0, 1)) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Retrieves loaded file from resource node.
 */
function dkan_datastore_file_field($node) {
  if ($node->type == 'resource') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $file = $wrapper->field_upload->value();
    $link = $wrapper->field_link_remote_file->value();
    if (isset($file)) {
      return $file;
    }
    elseif ($link) {
      return $link;
    }
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function dkan_datastore_field_formatter_info() {
  $formatters = array(
    'dkan_datastore_status_formatter' => array(
      'label' => t('Datastore Status'),
      'field types' => array('recline_field'),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function dkan_datastore_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  foreach ($items as $delta => $item) {
    $item['entity'] = $entity;
    $element[$delta] = array(
      '#theme' => 'dkan_datastore_status_formatter',
      '#item' => $item,
    );
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function dkan_datastore_theme() {
  return array(
    'dkan_datastore_status_formatter' => array(
      'variables' => array('item' => NULL),
    ),
  );
}

/**
 * Returns HTML for an recline field formatter.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: Associative array of recline field
 *
 * @ingroup themeable
 */
function theme_dkan_datastore_status_formatter($variables) {
  $status = dkan_datastore_status($variables['item']['entity']);
  if ($status === DKAN_DATASTORE_FILE_EXISTS) {
    return '<span class="circle false" title="' . t('A file has been uploaded but not added to the datastore')  . '">' . t('Data ready to be added') . '</span>';
  }
  elseif ($status === DKAN_DATASTORE_EXISTS) {
    return '<span class="circle true">' . t('Datastore enabled') . '</span>';
  }
  return '<span class="circle na">' . t('Correct file type not attached to resource') . '</span>';
}

 /**
 * Gets a datastore instance.
 *
 * @param $id
 *   The unique id of the importer object.
 *
 * @return
 *   A Datastore object or an object of a class defined by the Drupal
 *   variable 'dkan_datastore_class'. There is only one importer object
 *   per $id system-wide.
 */
function dkan_datastore_go($id, $class = NULL) {
  if (!$class) {
    $class = variable_get('dkan_datastore_class', 'DkanDatastore');
  }
  return Datastore::instance($class, $id);
}

