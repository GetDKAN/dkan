<?php

/**
 * @file
 * Data API via services.
 * TODO: Add search element, investigate caching, add uuids.
 */

/**
 * Implements hook_menu().
 */
function dkan_datastore_api_menu() {
  $items = array();

  $items['api/3/action/%'] = array(
    'title' => 'API Redirect',
    'page callback' => 'dkan_datastore_api_redirect',
    'page arguments' => array(3),
    // TODO: use services permissions?
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['api/3/action/datastore_search/%'] = array(
    'title' => 'API Redirect',
    'page callback' => 'dkan_datastore_api_redirect',
    'page arguments' => array(5),
    // TODO: use services permissions?
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function dkan_datastore_api_init() {
  if (isset($_GET['resource_id']) && $_GET['q'] != 'api/action/datastore/search.json') {
    $_GET['query'] = $_GET['q'];
    unset($_GET['q']);
    drupal_goto('api/action/datastore/search.json', array('query' => $_GET));
  }
}

/**
 * Redirects from CKAN API url to DKAN.
 *
 * Necessary since Services wouldn't accept datastore_search as an endpoint.
 */
function dkan_datastore_api_redirect($path) {
  $args = '';
  if ($path == 'datastore_search') {
    foreach ($_GET as $key => $value) {
      if ($key != 'q') {
        $args[$key] = $value;
      }
    }
    drupal_goto('api/action/datastore/search.json', array('query' => $args));
  }
}

/**
 * Implements hook_init().
 */
function dkan_datastore_api_boot() {
  // This is required for compatability with the CKAN API which uses 'q' which
  // drupal also uses.
  if (!$_GET['q'] && isset($_GET['limit'])) {
    $_GET['q'] = 'api/action/datastore/search.json';
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function dkan_datastore_api_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
    );
  }
}

/**
 * Implements hook_services_resources().
 */
function dkan_datastore_api_services_resources() {
  return array(
    'dkan_datastore_search' => array(
      'index' => array(
        'file' => array(
          'type' => 'inc',
          'module' => 'services',
          'name' => 'resources/user_resource',
        ),
        'description' => 'Data API for DKAN datastores',
        'callback' => '_dkan_datastore_api_datastore_index',
        'args' => array(
          array(
            'name' => 'resource_id',
            'optional' => TRUE,
            'type' => 'array',
            'description' => 'id or alias of the resource to be searched against.',
            'default value' => 0,
            'source' => array('param' => 'resource_id'),
          ),
          array(
            'name' => 'filters',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'matching conditions to select.',
            'default value' => 0,
            'source' => array('param' => 'filters'),
          ),
          array(
            'name' => 'query',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'matching conditions to select.',
            'default value' => 0,
            'source' => array('param' => 'query'),
          ),
          array(
            'name' => 'offset',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'offset this number of rows',
            'default value' => 0,
            'source' => array('param' => 'offset'),
          ),
          array(
            'name' => 'limit',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'maximum number of rows to return (default: 100).',
            'default value' => variable_get('dkan_datastore_api_index_limit', 100),
            'source' => array('param' => 'limit'),
          ),
          array(
            'name' => 'fields',
            'optional' => TRUE,
            'type' => array(),
            'description' => 'fields to return as a list or comma separated string (default: all fields in original order).',
            'default value' => '*',
            'source' => array('param' => 'fields'),
          ),
          array(
            'name' => 'sort',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'comma separated field names with ordering e.g.: â€œfieldname1, fieldname2 desc.',
            'default value' => '',
            'source' => array('param' => 'sort'),
          ),
          array(
            'name' => 'join',
            'optional' => TRUE,
            'type' => 'array',
            'description' => 'array of values to join on if including multiple datasets.',
            'default value' => '',
            'source' => array('param' => 'join'),
          ),
        ),
        'access callback' => '_dkan_datastore_api_datastore_access',
        'access arguments' => array('view'),
        'access arguments append' => FALSE,
      ),
    ),
  );
}

/**
 * Creates index based off of query.
 *
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function _dkan_datastore_api_datastore_index($resource_ids, $filters, $query, $offset, $limit, $fields, $sort, $join) {
  try {
    // Query for a single resource.
    if (count($resource_ids) < 2) {
      $ids = array_values($resource_ids);
      $resource_id = array_shift($ids);
      $table = dkan_datastore_api_tablename($resource_id);
      $sort = dkan_datastore_api_sort_clean($sort);
      $data_select = dkan_datastore_api_build_index_query($table, $offset, $limit, $fields, $sort);
      dkan_datastore_api_add_index_conditions($data_select, $filters);
    }
    // Query for a multiple resources.
    else {
      $i = 0;
      foreach ($resource_ids as $alias => $resource_id) {
        // We can't have multiple resources if we can't join them.
        if (!$join) {
          throw new Exception('Mulitple resources require joins.');
        }
        $table = dkan_datastore_api_tablename($resource_id);
        // For the first resource we are creating the base query.
        if ($i == 0) {
          $fields = isset($fields[$alias]) ? $fields[$alias] : $fields;
          $sort = isset($sort[$alias]) ? $sort[$alias] : $sort;
          $filters = isset($filters[$alias]) ? $filters[$alias] : $filters;
          $data_select = dkan_datastore_api_build_index_query($table, $offset, $limit, $fields, $sort, $alias);
          dkan_datastore_api_add_index_conditions($data_select, $filters, $alias);
        }
        // For the additional resources we are adding joins, fields, filters.
        else {
          $newfields = isset($fields[$alias]) ? $fields[$alias] : '*';
          $sort = isset($sort[$alias]) ? $sort[$alias] : '';
          $filters = isset($filters[$alias]) ? $filters[$alias] : '';

          dkan_datastore_api_build_additional_index_query($data_select, $table, $fields, $sort, $alias, $join);
          if ($filters) {
            dkan_datastore_api_add_index_conditions($data_select, $filters, $alias);
          }
        }
        $i++;
      }
    }
    if ($query && $query != 'api/3/action/datastore_search') {
      dkan_datastore_api_add_index_query($data_select, $table, $query);
    }
  }
  catch(Exception $ex) {
    return array('Caught exception: ' . $ex->getMessage());
  }
  $results = services_resource_execute_index_query($data_select);
  return dkan_datastore_api_resource_build_index_list($results, $table, $fields, $resource_ids);
}

/**
 * Adds conditions, ie WHERE clause, to query.
 */
function dkan_datastore_api_add_index_conditions(&$data_select, $filters, $alias = 't') {
  if (is_array($filters)) {
    foreach ($filters as $num => $filter) {
      if (is_array($filter)) {
        foreach ($filter as $key => $value) {
          $data_select->condition($num . '.' . $key, $filter, 'IN');
        }
      }
      else {
        $data_select->condition($alias . '.' . $num, services_str_getcsv($filter), 'IN');
      }
    }
  }
}

/**
 * Add search terms ("query") to query.
 *
 * @todo Add SQL server support
 */
function dkan_datastore_api_add_index_query(&$data_select, $table, $query) {
  if (db_driver() == 'mysql') {
    // Get fulltext fields
    $ft_result = db_query("SHOW INDEX IN $table WHERE Index_type = 'FULLTEXT'");
    $ft_fields = array();
    foreach($ft_result as $ft_row) {
      $ft_fields[] = $ft_row->Column_name;
    }
    if (count($ft_fields)) {
      $field_list = implode(', ', $ft_fields);
      $data_select->where("MATCH($field_list) AGAINST (:query)", array(':query' => $query));
      return;
    }
  }
  // If no FULLTEXT indexes, try concat method if on mysql or postgres
  if ($field_list = feeds_flatstore_fulltext_fields(drupal_get_schema($table))) {
    if (db_driver() == 'mysql' || db_driver() == 'pgsql') {
      $data_select->where("CONCAT_WS(' ', $field_list) LIKE :query", array(':query' => "%$query%"));
    }
    // For MS SQL Server, use alternate concat syntax
    elseif (db_driver() == 'sqlsrv') {
      $ft_fields = explode(',', $field_list);
      $field_list = implode("+' '+", $ft_fields);
      $data_select->where("$field_list LIKE :query", array(':query' => "%$query%"));
    }
    else {
      throw new Exception('Text search currently only works with MySQL, PostgresSQL or SQL Server datastore.');
    }
  }
  else {
    throw new Exception('No text search compatable fields on this datastore.');
  }
}

/**
 * Adds additional fields and join.
 */
function dkan_datastore_api_build_additional_index_query(&$data_select, $table, $fields, $sort, $alias, $join) {
  $aliases = array_keys($join);
  $joint = $aliases[0] . '.' . $join[$aliases[0]] . ' = ' . $aliases[1] . '.' . $join[$aliases[1]];
  $data_select->addJoin('INNER', $table, $alias, $joint);

  // AddField doesn't work with asterisk after join.
  if ($fields == '*') {
    $schema = drupal_get_schema($table);
    foreach ($schema['fields'] as $name => $element) {
      $data_select->addField($alias, $name);
    }
  }
  else {
    $data_select->addField($alias, explode(',', $fields));
  }
}

/**
 * Makes sure we are using column names for sorts.
 */
function dkan_datastore_api_sort_clean($sort) {
  if (strpos($sort,' asc') !== false) {
    $type = 'asc';
  }
  elseif (strpos($sort,' desc') !== false) {
    $type = 'desc';
  }
  else {
    return $sort;
  }
  $sort = explode(" $type", $sort);
  foreach ($sort as $key => $value) {
    $sort[$key] = feeds_flatstore_processor_safe_name($value);
  }
  $sort = implode(" $type", $sort);
  return $sort;
}

/**
 * Returns table name or exeption.
 */
function dkan_datastore_api_tablename($resource_id) {
  $nid = db_query('SELECT nid FROM {node} WHERE uuid = :uuid', array(':uuid' => $resource_id))->fetchField();
  $source_id = dkan_datastore_api_get_feeds_source($nid);
  $table = feeds_flatstore_processor_table_name($source_id, $nid);
  if (db_table_exists($table)) {
    return $table;
  }
  else {
    throw new Exception('Resource ' . $resource_id . ' does not exist.');
  }
}
/**
 * Retrieves source_id from feeds_source.
 */
function dkan_datastore_api_get_feeds_source($nid) {
  $source_id = db_query("SELECT id FROM {feeds_source} WHERE feed_nid = :nid AND source != ''", array(':nid' => $nid))->fetchField();
  return $source_id ? $source_id : NULL;
}
/**
 * Builds index query.
 */
function dkan_datastore_api_build_index_query($table, $offset, $limit, $fields, $sort, $alias = 't') {
  $sort = explode(" ", $sort);
  $data_select = db_select($table, $alias);
  if (isset($sort) && !empty($sort[0])) {
    foreach (explode(",", $sort[0]) as $field) {
      $data_select->orderBy($alias . '.' . $field, $sort[1]);
    }
  }
  else {
    $data_select->orderBy($alias . '.feeds_flatstore_entry_id', 'ASC');
  }
  dkan_datastore_api_resource_build_index_query($data_select, $offset, $fields, $limit, $alias, $table);
  return $data_select;
}

/**
 * Same as services version but not adding conditions.
 */
function dkan_datastore_api_resource_build_index_query(&$query, $page, $fields, $page_size, $alias, $table) {
  $default_limit = variable_get("dkan_datastore_default_page_size", 100);
  if ((!user_access('perform unlimited index queries') && $page_size > $default_limit) || !$page_size) {
    $page_size = $default_limit;
  }
  $query->range($page, $page_size);
  if ($fields == '*') {
    $query->fields($alias);
  }
  else {
    $query->fields($alias, explode(',', $fields));
  }
}

/**
 * Access callback.
 */
function _dkan_datastore_api_datastore_access($op) {
  return TRUE;
}

/**
 * Builds index link with results of the query.
 */
function dkan_datastore_api_resource_build_index_list($results, $table, $fields, $resource_ids) {
  // Put together array of matching items to return.
  $items = array();
  $endpoint_name = services_get_server_info('endpoint');
  $endpoint = services_endpoint_load($endpoint_name);
  foreach ($results as $result) {
    $items[] = $result;
  }

  $help = array('help' => dkan_datastore_api_resource_help());
  $count = array('limit' => count($items));
  $success = count($items) ? array('success' => TRUE) : array('success' => FALSE);
  // Use labels from data module if available.
  if ($data_table = data_get_table($table)) {
    $schema = $data_table->table_schema;
    $meta = $data_table->meta;
    $new_items = array();
    foreach ($items as $item) {
      $new_item = new stdClass();
      foreach ($item as $name => $data) {
        if (isset($meta['fields'][$name]['label']) && $new_name = $meta['fields'][$name]['label']) {
          $new_item->$new_name = $data;
        }
        else {
          $new_item->$name = $data;
        }
      }
      $new_items[] = $new_item;
    }
    $items = $new_items;
  }
  else {
    $schema = drupal_get_schema($table);
    $meta = '';
  }
  $return = new stdClass();
  if ($fields == '*') {
    foreach ($schema['fields'] as $name => $field) {
      // Don't include fields added by feeds_flatstore_processor.
      if ($name != 'feeds_flatstore_entry_id' && $name != 'timestamp' && $name != 'feeds_entity_id') {
        $name = $meta ? $meta['fields'][$name]['label'] : $name;
        $return->fields[] = array('id' => $name, 'type' => $field['type']);
      }
    }
  }
  else {
    $used_fields = explode(',', $fields);
    foreach ($used_fields as $key => $field) {
      $output_fields[$field] = $schema['fields'][$field];
      $output_fields[$field]['label'] = $meta ? $meta['fields'][$field]['label'] : $field;
    }
    $fields = $output_fields;
  }
  $return->resource_id = $resource_ids;
  $return->limit = $count['limit'];
  $total = db_query("SELECT count(feeds_flatstore_entry_id) from {$table}")->fetchCol();
  $return->total = $total[0];
  $return->records = $items;

  return $help + $success + array('result' => $return);
}

/**
 * Creates help text for API.
 */
function dkan_datastore_api_resource_help() {
  return t('Search a datastore table. :param resource_id: id or alias of the data that is going to be selected.');
}
