[
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Symfony\\Contracts\\Service\\ResetInterface::reset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\DependencyInjection\\Container\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementWrapper\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"RecursiveFilterIterator::getChildren()\" might add \"\\?RecursiveFilterIterator\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Core\\Extension\\Discovery\\RecursiveExtensionFilterIterator\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "The \"Twig\\Environment::getTemplateClass()\" method is considered internal. It may change without further notice. You should not extend it from \"Drupal\\Core\\Template\\TwigEnvironment\".",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Twig\\Extension\\ExtensionInterface::getFunctions()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigExtension\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Twig\\Extension\\ExtensionInterface::getFilters()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigExtension\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Twig\\Extension\\ExtensionInterface::getNodeVisitors()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigExtension\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Twig\\Extension\\ExtensionInterface::getTokenParsers()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigExtension\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Twig\\Loader\\FilesystemLoader::findTemplate()\" might add \"?string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Core\\Template\\Loader\\FilesystemLoader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Twig\\Loader\\LoaderInterface::exists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Loader\\StringLoader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Symfony\\Component\\EventDispatcher\\EventSubscriberInterface::getSubscribedEvents()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Update\\UpdateRegistry\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Symfony\\Component\\EventDispatcher\\EventSubscriberInterface::getSubscribedEvents()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\ckeditor5\\EventSubscriber\\CKEditor5CacheTag\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Symfony\\Component\\EventDispatcher\\EventSubscriberInterface::getSubscribedEvents()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\datastore\\EventSubscriber\\DatastoreSubscriber\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Symfony\\Component\\EventDispatcher\\EventSubscriberInterface::getSubscribedEvents()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\metastore\\EventSubscriber\\MetastoreSubscriber\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Symfony\\Component\\EventDispatcher\\EventSubscriberInterface::getSubscribedEvents()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\search_api\\Plugin\\search_api\\datasource\\ContentEntityTaskManager\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Symfony\\Component\\EventDispatcher\\EventSubscriberInterface::getSubscribedEvents()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\search_api\\Task\\IndexTaskManager\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Symfony\\Component\\EventDispatcher\\EventSubscriberInterface::getSubscribedEvents()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\search_api\\Task\\ServerTaskManager\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Symfony\\Component\\EventDispatcher\\EventSubscriberInterface::getSubscribedEvents()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\search_api\\Contrib\\ViewsBulkOperationsEventSubscriber\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Symfony\\Component\\EventDispatcher\\EventSubscriberInterface::getSubscribedEvents()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\views_bulk_operations\\EventSubscriber\\ViewsBulkOperationsEventSubscriber\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::setUp",
    "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Condition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetVersions",
    "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Upsert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetVersions",
    "message": "Method \"Behat\\Mink\\Element\\ElementInterface::getText()\" might add \"string\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\DocumentElement\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 2
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetVersions",
    "message": "Method \"Behat\\Mink\\Element\\ElementInterface::waitFor()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\DocumentElement\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 2
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetVersions",
    "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\KernelTests\\KernelTestBase\".",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getDocComment()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getNamespaceName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getMethod()\" might add \"\\ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getProperty()\" might add \"\\ReflectionProperty\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getConstant()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getConstructor()\" might add \"\\?ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getDefaultProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getEndLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getExtension()\" might add \"\\?ReflectionExtension\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getExtensionName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getFileName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getInterfaceNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getInterfaces()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getMethods()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getModifiers()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getParentClass()\" might add \"\\ReflectionClass|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getShortName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getStartLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getStaticProperties()\" might add \"\\?array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getStaticPropertyValue()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getTraitAliases()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getTraitNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getTraits()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::hasConstant()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::hasMethod()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::hasProperty()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::implementsInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::inNamespace()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::isAbstract()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::isCloneable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::isFinal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::isInstance()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::isInstantiable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::isInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::isInternal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::isIterateable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::isSubclassOf()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::isTrait()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::isUserDefined()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::newInstanceArgs()\" might add \"\\?object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::newInstanceWithoutConstructor()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::setStaticPropertyValue()\" might add \"void\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::getConstants()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ReflectionClass::newInstance()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Contracts\\FactoryInterface::getInstance()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\metastore\\Storage\\DataFactory\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Contracts\\FactoryInterface::getInstance()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\common\\Storage\\JobStoreFactory\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Contracts\\RetrieverInterface::retrieve()\" might add \"string\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\common\\Storage\\AbstractDatabaseTable\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Contracts\\FactoryInterface::getInstance()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\common\\FileFetcher\\Factory\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Contracts\\FactoryInterface::getInstance()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\datastore\\Storage\\DatabaseTableFactory\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Contracts\\FactoryInterface::getInstance()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\datastore\\Service\\Factory\\Import\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\Map\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Contracts\\FactoryInterface::getInstance()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\harvest\\Storage\\DatabaseTableFactory\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"Contracts\\RetrieverInterface::retrieve()\" might add \"string\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\harvest\\Storage\\DatabaseTable\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\search_api\\Item\\Field\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Functional\\DkanDocsTest::testGetCompleteJson",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\search_api\\Query\\ResultSet\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Unit\\Commands\\CommonCommandsTest::testDatasetInfo",
    "message": "Method \"Consolidation\\AnnotatedCommand\\State\\SavableState::currentState()\" might add \"State\" as a native return type declaration in the future. Do the same in implementation \"Drush\\Commands\\DrushCommands\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Controller\\OpenApiControllerTest::testGetInvalid",
    "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"OpisErrorPresenter\\Implementation\\PresentedValidationError\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Unit\\DataResourceTest::testGetTableName",
    "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\common\\DataResource\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Unit\\DatasetInfoTest::testGetStorage",
    "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\datastore\\Storage\\DatabaseTable\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Unit\\Storage\\JobStoreTest::testConstruction",
    "message": "Method \"Contracts\\RetrieverInterface::retrieve()\" might add \"string\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\common\\Storage\\JobStore\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Unit\\Storage\\JobStoreTest::testConstruction",
    "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Procrastinator\\Job\\Job\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\common\\Unit\\Storage\\JobStoreTest::testRetrieve",
    "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Procrastinator\\Result\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\dastastore_mysql_import\\Unit\\Service\\MysqlImportTest::testMysqlImporter",
    "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\datastore\\DatastoreResource\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\dastastore_mysql_import\\Unit\\Service\\MysqlImportTest::testMysqlImporter",
    "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"CsvParser\\Parser\\Csv\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\dastastore_mysql_import\\Unit\\Service\\MysqlImportTest::testMysqlImporter",
    "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Maquina\\StateMachine\\Machine\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\dastastore_mysql_import\\Unit\\Service\\MysqlImportTest::testMysqlImporter",
    "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Maquina\\StateMachine\\MachineOfMachines\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\Plugin\\DataType\\EntityAdapter\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\content_moderation\\Plugin\\Field\\ModerationStateFieldItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\content_moderation\\Plugin\\Field\\ModerationStateFieldItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\content_moderation\\Plugin\\Field\\ModerationStateFieldItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\path\\Plugin\\Field\\FieldType\\PathFieldItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\path\\Plugin\\Field\\FieldType\\PathFieldItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\path\\Plugin\\Field\\FieldType\\PathFieldItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "The \"Drupal\\Core\\Form\\FormBuilder::getForm()\" method will require a new \"... Any additional arguments are passed on to the functions called by \\Drupal::formBuilder->getForm, including the unique form constructor function. For example, the node_edit form requires that a node object is passed in here when it is called. These are available to implementations of hook_form_alter and hook_form_FORM_ID_alter as the array $form_state->getBuildInfo['args'].\" argument in the next major version of its interface \"Drupal\\Core\\Form\\FormBuilderInterface\", not defining it is deprecated.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Insert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"SessionHandlerInterface::open()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\SessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"SessionHandlerInterface::read()\" might add \"string|false\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\SessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"SessionHandlerInterface::write()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\SessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"SessionHandlerInterface::close()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\SessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"SessionHandlerInterface::destroy()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\SessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"SessionHandlerInterface::gc()\" might add \"int|false\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\SessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"SessionHandlerInterface::close()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\WriteSafeSessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"SessionHandlerInterface::destroy()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\WriteSafeSessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"SessionHandlerInterface::gc()\" might add \"int|false\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\WriteSafeSessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"SessionHandlerInterface::open()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\WriteSafeSessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"SessionHandlerInterface::read()\" might add \"string|false\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\WriteSafeSessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"SessionHandlerInterface::write()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\WriteSafeSessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "The \"Drupal\\Core\\Controller\\ArgumentResolver\\Psr7RequestValueResolver\" class implements \"Symfony\\Component\\HttpKernel\\Controller\\ArgumentValueResolverInterface\" that is deprecated since Symfony 6.2, implement ValueResolverInterface instead.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "The \"Drupal\\Core\\Controller\\ArgumentResolver\\RouteMatchValueResolver\" class implements \"Symfony\\Component\\HttpKernel\\Controller\\ArgumentValueResolverInterface\" that is deprecated since Symfony 6.2, implement ValueResolverInterface instead.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Config\\Schema\\ArrayElement\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Iterator::current()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\metastore_search\\Facade\\ComplexDataFacade\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\metastore_search\\Facade\\ComplexDataFacade\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\metastore_search\\Facade\\ComplexDataFacade\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\metastore_search\\Facade\\ComplexDataFacade\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\metastore_search\\Facade\\ComplexDataFacade\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Twig\\TokenParser\\TokenParserInterface::parse()\" might add \"Node\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigTransTokenParser\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Twig\\TokenParser\\TokenParserInterface::getTag()\" might add \"string\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigTransTokenParser\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Twig\\NodeVisitor\\AbstractNodeVisitor::doEnterNode()\" might add \"Node\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Core\\Template\\TwigNodeVisitor\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Twig\\NodeVisitor\\AbstractNodeVisitor::doLeaveNode()\" might add \"?Node\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Core\\Template\\TwigNodeVisitor\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Twig\\NodeVisitor\\NodeVisitorInterface::getPriority()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigNodeVisitor\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\search_api\\Item\\Item\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\GeneratedLink\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\GeneratedLink\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Functional\\DictionaryEnforcerTest::testDictionaryEnforcement",
    "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\datastore\\Storage\\TableSummary\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Unit\\Controller\\QueryControllerTest::testQueryJson",
    "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Unit\\Controller\\QueryControllerTest::testQueryJson",
    "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Unit\\Controller\\QueryControllerTest::testQueryJson",
    "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Unit\\Controller\\QueryControllerTest::testQueryJson",
    "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Unit\\Plugin\\QueueWorker\\ImportJobTest::setUp",
    "message": "Method \"Contracts\\RetrieverInterface::retrieve()\" might add \"string\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\datastore\\Unit\\Plugin\\QueueWorker\\TestMemStorage\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\datastore\\Unit\\Plugin\\QueueWorker\\ImportJobTest::setUp",
    "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\datastore\\Unit\\Plugin\\QueueWorker\\TestMemStorage\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  },
  {
    "location": "Drupal\\Tests\\metastore\\Unit\\ResourceMapperTest::test",
    "message": "Method \"Contracts\\RetrieverInterface::retrieve()\" might add \"string\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\metastore\\Unit\\DatabaseTableMock\" now to avoid errors or add an explicit @return annotation to suppress this message.",
    "count": 1
  }
]
