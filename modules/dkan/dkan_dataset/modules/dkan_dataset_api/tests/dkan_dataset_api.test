<?php

/**
 * @file
 * Common functionality for DKAN Dataset API tests.
 */

/**
 * Test basic Data API functionality.
 */
class DkanDatasetApiWebTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';
  protected $group;
  protected $dataset;
  protected $resource;
  /**
   * Information about the test.
   */
  public static function getInfo() {
    return array(
      'name'  => 'DKAN Dataset API Test',
      'description' => 'Test DKAN Dataset API functions and endpoints',
      'group' => 'DKAN Dataset API',
    );
  }

  /**
   * Setup testcase.
   */
  public function setUp() {
    $args = func_get_args();

    // Build the list of required modules which can be altered by passing in an
    // array of module names to setUp().
    if (isset($args[0])) {
      if (is_array($args[0])) {
        $modules = $args[0];
      }
      else {
        $modules = $args;
      }
    }
    else {
      $modules = array();
    }

    $modules[] = 'ctools';
    $modules[] = 'context';
    $modules[] = 'block';
    $modules[] = 'file';
    $modules[] = 'filter';
    $modules[] = 'image';
    $modules[] = 'list';
    $modules[] = 'menu';
    $modules[] = 'number';
    $modules[] = 'options';
    $modules[] = 'path';
    $modules[] = 'taxonomy';
    $modules[] = 'text';
    $modules[] = 'user';
    $modules[] = 'date';
    $modules[] = 'date_api';
    $modules[] = 'date_popup';
    $modules[] = 'dkan_dataset';
    $modules[] = 'dkan_dataset_groups';
    $modules[] = 'dkan_dataset_content_types';
    $modules[] = 'dkan_dataset_api';
    $modules[] = 'features';
    $modules[] = 'double_field';
    $modules[] = 'entityreference';
    $modules[] = 'field_group';
    $modules[] = 'field_group_table';
    $modules[] = 'filefield_sources';
    $modules[] = 'geofield';
    $modules[] = 'link';
    $modules[] = 'link_iframe_formatter';
    $modules[] = 'multistep';
    $modules[] = 'ref_field_sync';
    $modules[] = 'select_or_other';
    $modules[] = 'og';
    $modules[] = 'og_context';
    $modules[] = 'og_extras';
    $modules[] = 'og_ui';
    $modules[] = 'chosen';
    $modules[] = 'entity';
    $modules[] = 'geophp';
    $modules[] = 'gravatar';
    $modules[] = 'leaflet_widget';
    $modules[] = 'libraries';
    $modules[] = 'recline';
    $modules[] = 'remote_stream_wrapper';
    $modules[] = 'strongarm';
    $modules[] = 'token';
    $modules[] = 'search_api';
    $modules[] = 'search_api_db';
    $modules[] = 'search_api_views';
    $modules[] = 'facetapi';
    $modules[] = 'autocomplete_deluxe';
    $modules[] = 'beautytips';
    $modules[] = 'jquery_update';
    $modules[] = 'uuid';
    $modules[] = 'views';
    $modules[] = 'views_bulk_operations';

    $modules = array_unique($modules);

    parent::setUp($modules);

    features_rebuild();

    // Setup group.
    $this->group = $this->drupalCreateNode(
      array(
        'type' => 'group',
        'title' => $this->randomName(32),
      )
    );

    // Upload test csv file.
    $file_path = drupal_get_path('module', 'dkan_dataset_api');
    $file_path = realpath($file_path . '/tests/files/test.csv');
    $file = file_get_contents($file_path);
    $file = file_save_data($file, 'public://test.csv');
    $file = (array) $file;
    $file['grid'] = 1;
    $file['map'] = 1;

    // Setup resources.
    $this->resource = $this->drupalCreateNode(
      array(
        'title' => $this->randomName(32),
        'type' => 'resource',
        'body' => array(
          LANGUAGE_NONE => array(
            array(
              $this->randomName(256),
            ),
          ),
        ),
        'field_upload' => array(
          LANGUAGE_NONE => array(
            $file,
          ),
        ),
      )
    );

    // Setup dataset.
    $this->dataset = $this->drupalCreateNode(
      array(
        'type' => 'dataset',
        'title' => $this->randomName(32),
      )
    );

    $this->resource->field_dataset_ref[LANGUAGE_NONE][] = array(
      'target_id' => $this->dataset->nid,
      'target_type' => $this->dataset->type,
    );
    node_save($this->resource);

    // $this->dataset->og_group_ref[LANGUAGE_NONE][] = array(
    //   'target_id' => $this->group->nid,
    //   'target_type' => $this->group->type,
    // );

    $this->dataset->field_resources[LANGUAGE_NONE][] = array(
      'target_id' => $this->resource->nid,
      'target_type' => $this->resource->type,
    );
    node_save($this->dataset);
  }

  /**
   * Test all read api methods with access control.
   */
  public function testDkanDatasetAPIRead() {
    // Get all data.json succesful responses.
    $responses = $this->runQuerys('data_json');

    // Get all data.json sucessful responses.
    foreach ($responses as $r) {
      // There should be only one item.
      $this->assertTrue(count($r) === 1);
      foreach ($r as $dataset) {
        // Test if title is set.
        $this->assertTrue(isset($dataset->title));
      }
    }

    // Get all site_read succesful responses.
    $responses = $this->runQuerys('site_read');
    // Test specifics to site_read for every succesful response.
    foreach ($responses as $r) {
      $this->runCommonTest($r, 'Return');
    }

    // Get all revision_list succesful responses.
    $responses = $this->runQuerys('revision_list');
    // Test specifics to revision_list for every succesful response.
    foreach ($responses as $r) {
      $this->runCommonTest($r, 'Return a list of the IDs');
    }

    // Get all package_list succesful responses.
    $responses = $this->runQuerys('package_list');
    // Test specifics to package_list for every succesful response.
    foreach ($responses as $r) {
      $this->runCommonTest($r, 'Return a list of the names');
      $uuids = $r->result;
    }
    foreach ($uuids as $uuid) {
      // Get all package_revision_list succesful responses.
      $responses = $this->runQuerys('package_revision_list', $uuid);
      foreach ($responses as $r) {
        $this->runCommonTest($r, 'Return a dataset (package)');
        foreach ($r->result as $package) {
          $this->assertTrue($package->timestamp);
          $this->assertTrue($package->id);
        }
      }

      // Get all package_show succesful responses.
      $responses = $this->runQuerys('package_show', $uuid);
      foreach ($responses as $r) {
        $this->runCommonTest($r, 'Return the metadata of a dataset');
        $this->runPackageTests($r->result);
      }
    }

    // Get all current_package_list_with_resources succesful responses.
    $responses = $this->runQuerys('current_package_list_with_resources');
    foreach ($responses as $r) {
      $this->runCommonTest($r, 'Return a list of the site\'s datasets');
      $this->runPackageTests($r->result);
    }

    // Get all group_list succesful responses.
    $responses = $this->runQuerys('group_list');
    $uuids = array();
    foreach ($responses as $r) {
      $this->runCommonTest($r, 'Return a list of the names of the site\'s groups');
      $uuids = $r->result;
    }

    foreach ($uuids as $uuid) {
      // Get all group_package_show succesful responses.
      $responses = $this->runQuerys('group_package_show', $uuid);
      foreach ($responses as $r) {
        $this->runCommonTest($r, 'Return the datasets (packages) of a group');
        $this->runPackageTests($r->result);
      }
    }
  }

  /**
   * Run common test to an array of package.
   *
   * @param object $result
   *   A dkan_dataset_api result object.
   * @param string $text
   *   A string to match against the returned help string.
   */
  protected function runCommonTest($result, $text) {
    if (count($result->result)) {
      $this->assertTrue($result->result);
      $this->assertTrue($result->success);
    }
    $this->assertTrue(strpos($result->help, $text) !== FALSE);
  }

  /**
   * Run common test to an array of package.
   *
   * @param array $packages
   *   An array of json datasets.
   */
  protected function runPackageTests($packages) {
    // Loop every dataset.
    foreach ($packages as $package) {
      $this->assertTrue($package->metadata_created);
      $this->assertTrue($package->metadata_modified);
      $this->assertTrue($package->id);
      $this->assertTrue($package->resources);
      $this->assertTrue($package->num_resources === count($package->resources));
      // Loop every resource.
      foreach ($package->resources as $resource) {
        $this->assertTrue($resource->title);
        $this->assertTrue($resource->id);
        $this->assertTrue($resource->revision_id);
        $this->assertTrue($resource->created);
        $this->assertTrue($resource->active);
      }
    }
  }

  /**
   * Runs querys for every hook_menu_item related to $slug.
   *
   * @param string $slug
   *   identifier for a specific api endpoint
   * @param string $uuid
   *   unique identifier for a specific group, resource or dataset query
   * @param string $prefix
   *   for access control variable_set
   */
  protected function runQuerys($slug, $uuid = FALSE, $prefix = 'dkan_dataset_api_') {
    $uris = $this->getHookMenuItems($slug);
    foreach ($uris as $key => $uri) {
      $uris[$key] = array('uri' => $uri, 'options' => array());
      if ($uuid) {
        if (strpos($uri, '%') !== FALSE) {
          $uris[$key]['uri'] = str_replace('%', $uuid, $uri);
        }
        else {
          $uris[$key]['options'] = array('query' => array('id' => $uuid), 'absolute' => TRUE);
        }
      }
    }
    $succesful = array();
    // Assert Successful Header and store succesful responses.
    variable_set($prefix . $slug, 1);
    foreach ($uris as $uri) {
      $r = json_decode($this->drupalGet($uri['uri'], $uri['options']));
      $h = $this->drupalGetHeaders();
      $this->assertTrue(strpos($h[':status'], '200') !== FALSE);
      $succesful[] = $r;
    }
    // Assert Forbbiden Header.
    variable_set($prefix . $slug, 0);
    foreach ($uris as $uri) {
      $f = $this->drupalGet($uri['uri'], $uri['options']);
      $h = $this->drupalGetHeaders();
      $this->assertTrue(strpos($h[':status'], '403') !== FALSE);
    }
    // Return succesful querys for further assertions.
    return $succesful;
  }

  /**
   * Helper that gets defined hook_menu items related to a specific callback.
   *
   * @param string $callback
   *   a string representing a drupal callback.
   * @param string $prefix
   *   prefix to remove from the callback.
   *
   * @return array
   *   an array of related callbacks.
   */
  protected function getHookMenuItems($callback, $prefix = 'dkan_dataset_api_') {
    $items = dkan_dataset_api_menu();
    $r = array();
    // Match callback variable against $item['page_callback'],
    foreach ($items as $key => $item) {
      $item_callback = $item['page callback'];
      $item_callback = str_replace($prefix, '', $item_callback);
      // If match push key to test endpoint.
      if ($item_callback === $callback) {
        $r[] = $key;
      }
    }
    return $r;
  }
}
