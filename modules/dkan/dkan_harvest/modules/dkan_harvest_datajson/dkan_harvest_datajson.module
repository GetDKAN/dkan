<?php

/**
 * @file
 * Support for data.json endpoints for dkan_harvest.
 */

/**
 * Implements hook_harvest_source_types().
 */
function dkan_harvest_datajson_harvest_source_types() {
  return array(
    'datajson_v1_1_json' => array(
      'machine_name' => 'datajson_v1_1_json',
      'label' => 'Project Open Data v1.1 JSON',
      'cache callback' => 'dkan_harvest_datajson_cache',
      'migration class' => 'DatajsonHarvestMigration',
    ),
    'datajson_v1_1_xml' => array(
      'machine_name' => 'datajson_v1_1_xml',
      'label' => 'Project Open Data v1.1 XML',
      'cache callback' => 'dkan_harvest_datajson_cache',
      'migration class' => 'DatajsonHarvestMigration',
    ),
  );
}

/**
 * Cache callback for Project Open Data v1.1 endpoints.
 *
 * Currently support datajson_v1_1_json and pod_v1_1_xml
 * dkan_harvest source types.
 *
 * @param HarvestSource $source
 *   The source object from a datajson endpoint to cache.
 * @param int $harvest_updatetime
 *   Last harvest update time.
 *
 * @return HarvestCache
 *   A harvest cache object.
 */
function dkan_harvest_datajson_cache(HarvestSource $source, $harvest_updatetime) {
  // This is needed for remote uri.
  $context = stream_context_create(
    array(
      'http' => array(
        'timeout' => 36000,
      ),
      'https' => array(
        'timeout' => 36000,
      ),
    )
  );

  $remote = @file_get_contents($source->uri, 0, $context);

  if ($remote) {
    $data = FALSE;
    if ($source->type->machineName === 'datajson_v1_1_xml') {
      // Convert the XML document to JSON.
      $xml = simplexml_load_string($remote);
      $json = json_encode($xml);
      $data = json_decode($json, TRUE);
    }
    elseif ($source->type->machineName === 'datajson_v1_1_json') {
      $data = drupal_json_decode($remote);
    }

    // Filter and save the data gathered from the endpoint.
    if ($data) {
      $v = dkan_harvest_datajson_cache_pod_v1_1_json($data, $source,
        $harvest_updatetime);
      return $v;
    }
  }
}

/**
 * Set a nested value inside an array.
 *
 * @param array &$obj
 *   Original array.
 * @param string $path
 *   Path to the value (path.to.the.0.value).
 * @param object $value
 *   Value to set.
 * @param bool $override
 *   If should or shouldn't override an existing value.
 *
 * @return array
 *   Modified array.
 */
function dkan_harvest_datajson_set_value(&$obj, $path, $value, $override = FALSE) {
  $updated = FALSE;
  $keys = explode('.', $path);
  $branch = &$obj;

  foreach ($keys as $key) {
    if (isset($branch[$key])) {
      $branch = &$branch[$key];
    }
    else {
      drupal_set_message(t('Key "@path" was automatically generated because doesn\'t exists in the dataset "@title". Make sure you want to modify the key "@path".',
        array('@path' => $path, '@title' => $obj['title'])),
      'warning');
      $branch[$key] = array();
      $branch = &$branch[$key];
    }
  }

  // Update the obj if $override is set or the branch is empty.
  if ($override || empty($branch)) {
    $branch = $value;
    $updated = TRUE;
  }

  return $updated;
}

/**
 * Get a nested value from an array.
 *
 * @param array $obj
 *   Array.
 * @param string $path
 *   Path to the value (path.to.the.0.value).
 *
 * @return mixed
 *   Modified array
 */
function dkan_harvest_datajson_get_value($obj, $path) {
  $keys = explode('.', $path);
  $value = $obj;

  foreach ($keys as $key) {
    if (isset($value[$key])) {
      $value = $value[$key];
    }
    else {
      drupal_set_message(t('Error trying to access to key @path. Please make sure @path exists in the dataset', array('path' => $path, 'title' => $obj['title'])), 'error');
      return;
    }
  }
  return $value;
}

/**
 * Cache the datajson_1_1_json datasets.
 *
 * @param array $data
 *   Harvested data.
 * @param HarvestSource $source
 *   Harvest source instance.
 * @param int $harvest_updatetime
 *   Last harvest update time.
 *
 * @return HarvestCache
 *   HarvestCache object
 */
function dkan_harvest_datajson_cache_pod_v1_1_json(array $data, HarvestSource $source, $harvest_updatetime) {
  $harvest_cache = new HarvestCache($source, $harvest_updatetime);

  $datasets = $data['dataset'];

  // Filter datasets, only allow datasets that have the filters value.
  $filters = $source->filters;
  if (!empty($filters)) {
    $datasets = array_filter($datasets, function ($dataset) use ($filters, &$harvest_cache) {
      $dataset_key = dkan_harvest_datajson_prepare_item_id($dataset['identifier']);
      // Default action is to DROP the dataset if it does not meet the
      // filtering criteria.
      $accept = FALSE;
      foreach ($filters as $path => $filter_value) {
        $value = dkan_harvest_datajson_get_value($dataset, $path);
        if (!empty($value) && !empty($filter_value) && count(array_intersect((array) $filter_value, (array) $value)) > 0) {
          // The value to filter is an array and does intersect with the
          // dataset value. ACCEPT.
          $accept = TRUE;
        }
        if ($accept) {
          // Dataset have at least one filter that match. No need for more
          // proccecing.
          break;
        }
      }

      if ($accept) {
        // Update the cache result object.
        $harvest_cache->setCacheEntryFiltered($dataset_key, $dataset['title']);
      }
      else {
        // This dataset will be dropped from here on.
        // Add to the processed count.
        $harvest_cache->setCacheEntryProcessed($dataset_key, $dataset['title']);
      }
      // Drop the dataset if excluded.
      return $accept;
    });
  }

  // Exclude datasets, drop datasets that have the excludes value.
  $excludes = $source->excludes;
  if (!empty($excludes)) {
    $datasets = array_filter($datasets, function ($dataset) use ($excludes, &$harvest_cache) {
      $dataset_key = dkan_harvest_datajson_prepare_item_id($dataset['identifier']);
      // Default action is to accept dataset that does not meet the
      // excluding criteria.
      $accept = TRUE;
      foreach ($excludes as $path => $exclude_value) {
        $value = dkan_harvest_datajson_get_value($dataset, $path);
        if (!empty($value) && count(array_intersect((array) $exclude_value, (array) $value)) > 0) {
          // The value to exclude is an array and does intersect
          // with the dataset value then drop it.
          $accept = FALSE;
        }

        if (!$accept) {
          // Dataset have at least one exclude criterion that matchs.
          // No need for more proccecing.
          break;
        }
      }

      if (!$accept) {
        // Update the cache result object.
        // This dataset will be dropped from here on.
        // Add to the processed count.
        $harvest_cache->setCacheEntryExcluded($dataset_key, $dataset['title']);
      }

      // Drop the dataset if excluded.
      return $accept;
    });
  }

  // Override field values.
  $overrides = $source->overrides;
  $datasets = array_map(function ($dataset) use ($overrides, &$harvest_cache) {
    $identifier = dkan_harvest_datajson_prepare_item_id($dataset['identifier']);
    $overridden = FALSE;

    foreach ($overrides as $path => $override_value) {
      $overridden = $overridden || dkan_harvest_datajson_set_value($dataset, $path, $override_value[0], TRUE);
    }

    if ($overridden) {
      $harvest_cache->setCacheEntryOverridden($identifier, $dataset['title']);
    }

    return $dataset;
  }, $datasets
  );

  // Set default values for empty fields.
  $defaults = $source->defaults;
  $datasets = array_map(function ($dataset) use ($defaults, &$harvest_cache) {
    $identifier = dkan_harvest_datajson_prepare_item_id($dataset['identifier']);
    $defaulted = FALSE;

    foreach ($defaults as $path => $default_value) {
      $defaulted = $defaulted || dkan_harvest_datajson_set_value($dataset, $path, $default_value[0]);
    }

    if ($defaulted) {
      $harvest_cache->setCacheEntryDefaulted($identifier, $dataset['title']);
    }

    return $dataset;
  }, $datasets
  );

  foreach ($datasets as $dataset) {
    $identifier = dkan_harvest_datajson_prepare_item_id($dataset['identifier']);
    $dataset_file = implode('/', array($source->getCacheDir(), $identifier));
    $data = drupal_json_encode($dataset);
    $cached = @file_put_contents($dataset_file, $data);

    if (!$cached) {
      $harvest_cache->setCacheEntryFailed($identifier, $dataset['title']);
    }
    else {
      // This will reset the failed flag if previously set.
      $harvest_cache->setCacheEntryProcessed($identifier, $dataset['title']);
    }
  }

  return $harvest_cache;
}

/**
 * Removes URL and returns directory from URL string.
 *
 * Example: "http://example.com/whathat" returns "whatwhat"
 */
function dkan_harvest_datajson_prepare_item_id($identifier) {
  if (filter_var($identifier, FILTER_VALIDATE_URL)) {
    $identifier = parse_url($identifier, PHP_URL_PATH);
    $frag = explode('/', $identifier);
    // Does not produce "Strict warning: Only variables should be passed by
    // reference" like end(explode('/', $identifier));.
    $identifier = $frag[count($frag) - 1];
  }
  return $identifier;
}
