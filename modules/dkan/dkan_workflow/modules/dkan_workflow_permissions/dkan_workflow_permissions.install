<?php

/**
 * @file
 * Installation procedures for dkan_workflow_permissions.
 */

/**
 * Implements hook_enable().
 */
function dkan_workflow_permissions_enable() {
  features_revert(array('dkan_workflow_permissions' => array('role_permission')));
  drupal_flush_all_caches();

  // Set up source for the admin menu.
  _dkan_workflow_permissions_setup_admin_menu_source();
  drupal_flush_all_caches();
  features_revert(array('dkan_sitewide_menu' => array('menu_links')));

  // Assign view moderation history perm to anonymous users.
  if (!module_exists('workbench_moderation')) {
    module_enable(array('workbench_moderation'));
  }

  // Assign role supervisor to editor users.
  $uids = array();
  $supervisor = user_role_load_by_name("Workflow Supervisor");
  $site_manager = user_role_load_by_name("site manager");
  $result = db_query("SELECT uid FROM {users_roles} WHERE rid=:site_manager AND uid NOT IN (SELECT uid FROM {users_roles} WHERE rid=:supervisor)", array(':site_manager' => $site_manager->rid, ':supervisor' => $supervisor->rid));

  if (!empty($result)) {
    foreach ($result as $user) {
      $uids[] = $user->uid;
    }
    user_multiple_role_edit($uids, 'add_role', $supervisor->rid);
  }

  $anon = user_role_load_by_name('anonymous user');
  user_role_grant_permissions($anon->rid, array('view moderation history'));

  // Rebuild node access permissions as a batch process.
  node_access_rebuild(TRUE);
}

/**
 * This helper function sets up the admin_menu_source module's configuration.
 *
 * We want the workflow roles to have the "command center"
 * menu rather than the whole admin menu in the top bar. We can't rely on the
 * rid to be the same on every site so not using features.
 */
function _dkan_workflow_permissions_setup_admin_menu_source() {
  $required_roles = array(
    'administrator',
    'site manager',
    'editor',
    'content creator',
    'Workflow Contributor',
    'Workflow Moderator',
    'Workflow Supervisor',
  );
  $roles = array_flip(user_roles());
  $admin_menu_source_settings = array();
  foreach ($required_roles as $role_name) {
    if (!isset($roles[$role_name])) {
      $role = new stdClass();
      $role->name = $role_name;
      user_role_save($role);
      $roles[$role_name] = $role->rid;
    }
  }

  $roles = array_flip(user_roles());

  $admin_menu_source_settings = array(
    $roles['administrator'] => array(
      'rid' => $roles['administrator'],
      'source' => '',
      'weight' => 0,
    ),
    $roles['site manager'] => array(
      'rid' => $roles['site manager'],
      'source' => 'menu-command-center-menu',
      'weight' => 1,
    ),
    $roles['editor'] => array(
      'rid' => $roles['editor'],
      'source' => 'menu-command-center-menu',
      'weight' => 2,
    ),
    $roles['content creator'] => array(
      'rid' => $roles['content creator'],
      'source' => 'menu-command-center-menu',
      'weight' => 3,
    ),
    $roles['Workflow Supervisor'] => array(
      'rid' => $roles['Workflow Supervisor'],
      'source' => 'menu-command-center-menu',
      'weight' => 4,
    ),
    $roles['Workflow Moderator'] => array(
      'rid' => $roles['Workflow Moderator'],
      'source' => 'menu-command-center-menu',
      'weight' => 5,
    ),
    $roles['Workflow Contributor'] => array(
      'rid' => $roles['Workflow Contributor'],
      'source' => 'menu-command-center-menu',
      'weight' => 6,
    ),
  );
  variable_set('admin_menu_source_settings', $admin_menu_source_settings);
}

/**
 * Implements hook_disable().
 */
function dkan_workflow_permissions_disable() {
  // Remove view moderation history perm from anonymous users.
  $anon = user_role_load_by_name('anonymous user');
  user_role_revoke_permissions($anon->rid, array('view moderation history'));

  // Rebuild node access permissions as a batch process.
  node_access_rebuild(TRUE);
}
