<?php

/**
 * Generates a list of links to available moderation actions.
 * based on workbench_moderation_get_moderation_links().
 *
 * @param $node
 *   The node being acted upon.
 * @param $url_options
 *   An array of options to pass, following the url() function syntax.
 *
 * @return
 *   A list of links to display with the revision.
 */
function views_workflow_list_get_moderation_links($node, $url_options = array()) {
  // Make sure that this node is moderated.
  if (!workbench_moderation_node_moderated($node)) {
    return;
  }

  // Build links to available moderation states.
  $links = array();
  $my_revision = $node->workbench_moderation['my_revision'];
  $state_current = $my_revision->state;
  if ($my_revision->vid == $node->workbench_moderation['current']->vid
    && $states_next = workbench_moderation_states_next($my_revision->state, NULL, $node)) {
      $transitions = workbench_moderation_transitions();
      foreach ($states_next as $state_next => $label) {
        foreach ($transitions as $transition){
          if($transition->from_name == $state_current && $transition->to_name == $state_next) {
            $title = $transition->name;
            $link = array_merge($url_options, array(
              'title' => $title,
              'href' => "node/{$node->nid}/moderation/{$node->vid}/change-state/{$state_next}",
            ));
            $link['query']['token'] = drupal_get_token("{$node->nid}:{$node->vid}:{$state_next}");
            $link['query']['destination'] = current_path();
            $links[] = $link;      }
        }
      }
    }

  return $links;
}

/**
 * Implements of hook_views_api().
 */
function views_workflow_list_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'views_workflow_list'),
  );
}

/**
 * Implements hook_action_info().
 */
function views_workflow_list_action_info() {
  $info = array();
  foreach(workbench_moderation_state_labels() as $key => $label) {
    $info['views_workflow_list_set_moderation_state_action_' . $key] = array(
      'type' => 'node',
      'label' => t("Workflow set moderation state " . $label),
      'triggers' => array('node_presave', 'node_insert', 'node_update', 'workbench_moderation_transition'),
      'callback' => 'views_workflow_list_set_state_action',
      'parameters' => array('state' => $key)
    );
  }
  return $info;
}

function views_workflow_list_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  // Workbench Moderation VBO action permissions check
  // @TODO This is temporary and needs to be moved to the front-end.
  if (strpos($form['#form_id'], 'views_form_workbench_moderation') == 0) {
    $account = $GLOBALS['user'];
    $types = array('dataset', 'resource');
    $from_states = array(
      'views_form_workbench_moderation_needs_review_page' => 'needs_review',
      ' views_form_workbench_moderation_drafts_page' => 'draft',
      'views_form_workbench_moderation_page_stale_drafts' => 'draft',
      ' views_form_workbench_moderation_page_stale_reviews' => 'needs_review',
    );
    foreach($form['select'] as $select_key => $select_value) {
      $matches = array();
      if (preg_match("/^action::views_workflow_list_set_moderation_state_action_(\D+)$/", $select_key, $matches)
      && isset($from_states[$form['#form_id']])) {
        $to_state = $matches[1];
        foreach($types as $node_type){
          if(!workbench_moderation_state_allowed($account, $from_states[$form['#form_id']], $to_state, $node_type)) {
            unset($form['select'][$select_key]);
          }
        }
      }
    }
  }

  // Change "Select all items" button position
  if ($form_state['step'] == 'views_form_views_form' && isset($form['select_all_markup'])) {
    $form['select']['select_all_markup'] = $form['select_all_markup'];
    unset($form['select_all_markup']);
  }
}

/**
 * Action callback for views_workflow_list_set_moderation_state_action.
 */
function views_workflow_list_set_state_action($node, $context) {
  return workbench_moderation_set_state_action($node, array('state' => $context['state'], 'force_transition' => TRUE));
}

/**
 * Implements of hook_theme().
 */
function views_workflow_list_theme($existing, $type, $theme, $path) {
  return array(
    'views_workflow_list' => array(
      'variables' => array(
        'view' => NULL,
        'options' => array(),
        'rows' => array(),
        'title' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for the workbench tree style plugin.
 */
function theme_views_workflow_list($variables) {
  $view = $variables['view'];
  $result = $view->result;

  $vbo_field = $variables['options']['vbo_field'];
  $vid_field = $variables['options']['vid_field'];
  foreach(array('VBO' => $vbo_field, 'VID' => $vid_field) as $field_key => $field_value){
    if(!isset($field_value)){
      //Can't continue without the vid alias. report and skip.
      watchdog('views_workflow_list', t('Missing %field_key field value from the View Format settings.'), array('%field_key' => $field_key), WATCHDOG_ERROR);
      return;
    }
  }

  $vid_alias = $variables['view']->field[$vid_field]->field_alias;

  $nodes = array();
  foreach($result as $result_index => $result_item) {
    if($node = node_load(NULL, $result_item->{$vid_alias})) {
      $node->row_index = $result_index;
      $nodes[$node->nid] = $node;
    }
  }

  $items = array();
  $datasets = array();
  $resources = array();
  $children_without_datasets = array();

  // Separate datasets from resources and render datasets.
  foreach($nodes as $nid => $node) {
    if($node->type == 'dataset') {
      $datasets[$nid] = $node;
      $variables = array(
        'node' => $node,
        'vbo' => $view->style_plugin->get_field($node->row_index, $vbo_field),
      );
      $items[$nid]['data'] = theme_workflow_list_item_dataset_same_moderation_state($variables);
      $items[$nid]['class'] = array('views-workflow-list-item');
    } elseif ($node->type == 'resource') {
      $resources[$nid] = $node;
    }
  }

  foreach ($resources as $nid => $node) {
    if(!isset($node->field_dataset_ref) || empty($node->field_dataset_ref)) {
      // If resource does not reference any dataset.
      $variables = array(
        'node' => $node,
        'vbo' => $view->style_plugin->get_field($node->row_index, $vbo_field),
      );
      $children_without_datasets[] = theme_workflow_list_item_resource($variables);

    } else {
      $parents_nid = array();
      $parents_nid = $node->field_dataset_ref[LANGUAGE_NONE];
      foreach($parents_nid as $parent_nid) {
        $parent_nid = $parent_nid['target_id'];
        if(!in_array($parent_nid, array_keys($datasets))) {
          // Resource references a dataset with different moderation state.
          if ($parent_new = node_load($parent_nid)) {
            $datasets[$parent_nid] = $parent_new;
            $items[$parent_nid]['data'] = theme_workflow_list_item_dataset_other_moderation_state(
              array('node' => $parent_new));
            $items[$parent_nid]['class'] = array('views-workflow-list-item');
          } else {
            // Can't load the missing parent dataset node. Add the resource to
            // "Resources without a dataset".
            $variables = array(
              'node' => $node,
              'vbo' => $view->style_plugin->get_field($node->row_index, $vbo_field),
            );
            $children_without_datasets[] = theme_workflow_list_item_resource($variables);
            // TODO: add watchdog entry.
            continue;
          }
        }

        // Parent dataset exists or added.
        $variables = array(
          'node' => $node,
          'vbo' => $view->style_plugin->get_field($node->row_index, $vbo_field),
        );
        $items[$parent_nid]['children'][] = theme_workflow_list_item_resource($variables);
      }
    }
  }

  if (!empty($children_without_datasets)) {
    $without_datasets = array();
    $without_datasets['data'] = theme_workflow_list_item_dataset();
    $without_datasets['class'] = array('views-workflow-list-item');
    $without_datasets['children'] = $children_without_datasets;
    $items[] = $without_datasets;
  }

  $variables = array('items' => $items,
    'type' => 'ul',
    'attributes' => array('class' => array('views-workflow-list')));
  return theme('item_list', $variables);
}

function theme_workflow_list_item_dataset($variables = NULL) {
  if (!isset($variables['node'])) {
    $output = '<div class="item-content item-disabled">';
    $output .=
      '<div class="form-item form-type-checkbox form-item-views-bulk-operations-null checkbox">' .
      '<label for="edit-views-bulk-operations-null">' .
      '<input class="vbo-select form-checkbox" disabled="disabled" type="checkbox">' .
      '</label>' .
      '</div>' .
      '<span class="views-workflow-list-title">' .
      t('Resources without a dataset') .
      '</span>';

    $output .= '</div>';

    return $output;
  }
  else {
    return theme_workflow_list_item_dataset_same_moderation_state($variables);
  }
}

function theme_workflow_list_item_dataset_same_moderation_state($variables) {
  $vbo = $variables['vbo'];
  $node = $variables['node'];

  $output = '<div class="item-content">';
  $output .= $vbo;

  $author = user_load($node->revision_uid);
  $output .=
    '<span class="views-workflow-list-title">' .
    l($node->title, 'node/' . $node->nid) .
    '</span>' .
    '<span class="views-workflow-list-revision-user">' .
    theme('username', array('account' => $author)) .
    '</span>' .
    '<span class="views-workflow-list-revision-timestamp">' .
    format_date($node->revision_timestamp) .
    '</span>' .
    '<span class="views-workflow-list-edit">' .
    l('Edit', 'node/' . $node->nid . '/edit', array('attributes' => array('class' => 'btn btn-default btn-primary'))) .
    '</span>';

  $url_options = array('attributes' => array('class' => 'btn btn-default btn-primary'));
  $moderation_links = views_workflow_list_get_moderation_links($node, $url_options);

  foreach($moderation_links as $moderation_link) {
    $link = '<span class="views-workflow-list-moderation-link">';
    $link .= l($moderation_link['title'], $moderation_link['href'], $moderation_link);
    $link .= '</span>';

    $output .= $link;
  }

  $output .= '</div>';

  return $output;
}

function theme_workflow_list_item_dataset_other_moderation_state($variables) {
  $node = $variables['node'];
  $author = user_load($node->uid);

  $output = '<div class="item-content item-disabled">';
    $output .=
      '<div class="form-item form-type-checkbox form-item-views-bulk-operations-null checkbox">' .
      '<label for="edit-views-bulk-operations-null">' .
      '<input class="vbo-select form-checkbox" disabled="disabled" type="checkbox">' .
      '</label>' .
      '</div>';

  $author = user_load($node->revision_uid);
  $output .=
    '<span class="views-workflow-list-title">' .
    l($node->title, 'node/' . $node->nid) .
    '</span>' .
    '<span class="views-workflow-list-revision-user">' .
    theme('username', array('account' => $author)) .
    '</span>' .
    '<span class="views-workflow-list-revision-timestamp">' .
    format_date($node->revision_timestamp) .
    '</span>' .
    '<span class="views-workflow-list-edit">' .
    l('Edit', 'node/' . $node->nid . '/edit', array('attributes' => array('class' => 'btn btn-default btn-primary'))) .
    '</span>';

  $url_options = array('attributes' => array('class' => 'btn btn-default btn-primary'));
  $moderation_links = views_workflow_list_get_moderation_links($node, $url_options);

  foreach($moderation_links as $moderation_link) {
    $link = '<span class="views-workflow-list-moderation-link">';
    $link .= l($moderation_link['title'], $moderation_link['href'], $moderation_link);
    $link .= '</span>';

    $output .= $link;
  }

  $output .= '</div>';

  return $output;
}

/**
 * Implement hook_theme();
 */
function theme_workflow_list_item_resource($variables) {
  $vbo = $variables['vbo'];
  $node = $variables['node'];

  $output = '<div class="item-content">';
  $output .= $vbo;

  $author = user_load($node->revision_uid);
  $output .=
    '<span class="views-workflow-list-title">' .
    l($node->title, 'node/' . $node->nid) .
    '</span>' .
    '<span class="views-workflow-list-revision-user">' .
    theme('username', array('account' => $author)) .
    '</span>' .
    '<span class="views-workflow-list-revision-timestamp">' .
    format_date($node->revision_timestamp) .
    '</span>' .
    '<span class="views-workflow-list-edit">' .
    l('Edit', 'node/' . $node->nid . '/edit', array('attributes' => array('class' => 'btn btn-default btn-primary'))) .
    '</span>';

  $url_options = array('attributes' => array('class' => 'btn btn-default btn-primary'));
  $moderation_links = views_workflow_list_get_moderation_links($node, $url_options);

  foreach($moderation_links as $moderation_link) {
    $link = '<span class="views-workflow-list-moderation-link">';
    $link .= l($moderation_link['title'], $moderation_link['href'], $moderation_link);
    $link .= '</span>';

    $output .= $link;
  }

  $output .= '</div>';

  return $output;
}
