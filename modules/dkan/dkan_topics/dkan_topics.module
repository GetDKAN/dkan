<?php
/**
 * @file
 * Code for the DKAN Featured Topics feature.
 */

include_once 'dkan_topics.features.inc';
include_once 'dkan_topics.features.conditional_fields.inc';
module_load_include('inc','pathauto','pathauto');

/**
 * Implements hook_page_alter().
 */
function dkan_topics_page_alter(&$page) {
  drupal_add_css(drupal_get_path('module', 'dkan_topics') . '/theme/dkan_topics.css');
}

/**
 * Implements hook_menu() to add topics link.
 */
function dkan_topics_menu() {
  $items['topics'] = array(
    'title'           => t('Topics'),
    'menu_name'       => 'main-menu',
    'weight'          => 8,
    'access callback' => TRUE,
    'page callback'   => 'topics_page',
    'access arguments' => array('view published content'), // permission
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 *
 */
function dkan_topics_menu_link_insert($link) {
  // We need to set the 'taxonomy_menu_vocab_parent_dkan_topics' variable
  // with the ID of the 'Topics' menu link so all the topics terms can be
  // added there as sub-links.
  if (isset($link['page callback']) && ($link['page callback'] == 'topics_page')) {
    variable_set('taxonomy_menu_vocab_parent_dkan_topics', $link['mlid']);
  }
}

/*
 * Set main menu topics link to null.
 */
function topics_page() {
  drupal_goto('search/field_topic');
}


/**
* Implements hook_preprocess_field().
*/
function dkan_topics_preprocess_field(&$vars) {
  if ($vars['element']['#field_name'] == 'field_topic_icon') {
    $vars['label_hidden'] = TRUE;
  }
  if ($vars['element']['#field_name'] == 'topic') {
    $vars['label_hidden'] = TRUE;
    $color = $vars['field_topic'][1]['taxonomy_term']->field_topic_icon_color['und'][0]['rgb'];
    $icon = $vars['field_topic'][0]['taxonomy_term']->field_topic_icon['und'][0]['value'];
    if($icon && $color) {
      $vars['field_topic'][0]['taxonomy_term']->field_topic_icon['und'][0]['value'] = '<span style="color:' . $color . '">' . $icon . '</span>';
    }
  }
}

/**
* Implements hook_views_pre_render().
*/
function dkan_topics_views_pre_render(&$view) {
  if(isset($view->name) && $view->name == 'dkan_topics_featured') {
    foreach($view->result as $row) {
      if($row->_field_data['tid']['entity']->field_icon_type['und'][0]['value'] == 'font') {
        global $base_url;
        $term = $row->taxonomy_term_data_name;
        $term = pathauto_cleanstring($term);
        $url =  $base_url . '/search/field_topic/' . $term . '-' . $row->tid;

        if($row->field_field_topic_icon) {
          // Modify icon to add term link and custom color.
          $prefix_clipped = substr($row->field_field_topic_icon[0]['rendered']['#prefix'], 6);
          $new_prefix = '<a href="' . $url . '"';
          if(!empty($row->field_field_topic_icon_color[0]['raw']['rgb'])) {
            $new_prefix .= ' style="color:' . $row->field_field_topic_icon_color[0]['raw']['rgb'] . '"';
          }
          else {
            $new_prefix .= '';
          }
          $new_prefix .= $prefix_clipped;
          $row->field_field_topic_icon[0]['rendered']['#prefix'] = $new_prefix;
          $row->field_field_topic_icon[0]['rendered']['#suffix'] = '</a>';
        }
      }
    }

    return $view;
  }
}

/**
 * Rewrite font file paths to work on install.
 */
function dkan_topics_file_url_alter(&$uri) {
  $re = "/public:\\/\\/[^\\/]*\\/?dkan-topics.*\\.(eot|woff|ttf|svg)$/";
  $match = preg_match($re, $uri);

  if ($match) {
    $uri = str_replace('public://', '/sites/default/files/', $uri);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function dkan_topics_field_formatter_info() {
  return array(
    'dkan_topic_formatter' => array(
      'label' => t('Topic with icon'),
      'field types' => array('taxonomy_term_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function dkan_topics_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {

    case 'dkan_topic_formatter':
      global $base_url;
      // Custom formatter for topic field.
      foreach ($items as $delta => $item) {
        $term = taxonomy_term_load($item['tid']);
        $url =  $base_url . '/search/field_topic/' . pathauto_cleanstring($term->name) . '-' . $term->tid;
        // Gather icon values if font icon is used.
        $icons = field_get_items('taxonomy_term', $term, 'field_topic_icon');
        $icon = field_view_field('taxonomy_term', $term, 'field_topic_icon', $icons, $langcode = NULL);
        if($icon) {
          if(isset($term->field_topic_icon_color['und'][0]['rgb'])) {
            $color = $term->field_topic_icon_color['und'][0]['rgb'];
            $prefix_clipped = substr($icon[0]['#prefix'], 6);
            $new_prefix = '<span style="color:' . $color . '" ' . $prefix_clipped;
            $icon[0]['#prefix'] = $new_prefix;
          }
          // Font Icon formatter.
          $element[$delta] = array(
          'image' => array(
            '#type' => 'markup',
            '#markup' => drupal_render($icon),
            ),
          'name' => array(
            '#type' => 'markup',
            '#markup' => check_plain($term->name),
            '#prefix' => '<a class="name" href="' . $url . '">',
            '#suffix' => '</a>',
            ),
          );
        }
        // Set up image values if image is used.
        else {
          $images = field_get_items('taxonomy_term', $term, 'field_image');
          $display = array(
            'label' => 'hidden',
            'settings' => array(
              'image_style' => 'small_topics_icons',
              ),
            );
          $img = field_view_field('taxonomy_term', $term, 'field_image', $display, $langcode = NULL);
          // Image Icon formatter.
          $element[$delta] = array(
          'image' => array(
            '#type' => 'markup',
            '#markup' => drupal_render($img),
            ),
          'name' => array(
            '#type' => 'markup',
            '#markup' => check_plain($term->name),
            '#prefix' => '<a class="name" href="' . $url . '">',
            '#suffix' => '</a>',
            ),
          );
        }
      }
      break;
  }

  return $element;
}
