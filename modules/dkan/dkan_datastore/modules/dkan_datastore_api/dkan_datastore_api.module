<?php

/**
 * @file
 * Data API via services.
 *
 * TODO: Add search element, investigate caching, add uuids.
 */

define('DKAN_DATASTORE_API_DEFAULT_TABLE_ALIAS', 't');

/**
 * Given all the possible fields input returns a normalized version.
 *
 * Inputs:
 *
 * {fields: ['field']}
 * {fields: 'field,field2'}
 * {fields: {table:'field,field2'}}
 * {fields: {table:['field','field2']}}
 * {fields: {table: '*'}}
 *
 * Output:
 *
 * ['table_alias1.field1', 'table_alias1.field2']
 */
function normalize_fields($fields, $resources) {
  $resources = is_string($resources) ? array('t' => $resources) : $resources;
  $new_fields = array();
  $normalized = array();
  foreach ($resources as $alias => $id) {
    if ((is_string($fields) && $fields == '*') || in_array($alias, array_keys($fields))) {
      // Fields comes with table prefix and fields are not specified.
      if (is_assoc($fields) && is_string($fields[$alias]) && $fields[$alias] == '*') {

        $table = dkan_datastore_api_tablename($id);
        $schema = drupal_get_schema($table);
        $new_fields = build_qualified_fields(array_keys($schema['fields']), $alias);

        // Fields comes with table prefix either using an
        // array or a string to set the fields.
      }
      elseif (is_assoc($fields)) {
        $new_fields = $fields[$alias];
        $new_fields = is_string($new_fields) ? explode(',', $new_fields) : $new_fields;
        $new_fields = build_qualified_fields($new_fields, $alias);

        // Fields comes without table prefix within an array.
        // Since fields aren't prefixed we infer there is only
        // one alias.
      }
      elseif (is_array($fields)) {
        $new_fields = build_qualified_fields($fields, $alias);

        // Fields are not specified so we get all of them
        // from the table schema.
      }
      elseif (is_string($fields) && $fields == '*') {
        $table = dkan_datastore_api_tablename($id);
        $schema = drupal_get_schema($table);
        $new_fields = build_qualified_fields(array_keys($schema['fields']), $alias);

        // Fields comes without table prefix and split by commas.
        // Since fields aren't prefixed we infer there is only
        // one alias.
      }
      elseif (is_string($fields)) {
        $new_fields = explode(',', $fields);
        $new_fields = build_qualified_fields($new_fields, $alias);
      }
      $normalized = array_merge($normalized, $new_fields);
    }
  }
  return array_unique($normalized);
}

/**
 * Create a qualified version of a field name.
 *
 * Qualified field names are those with the table prefix.
 * For example: table_name.field_name.
 */
function build_qualified_fields($fields, $alias) {
  return array_reduce($fields, function ($memo, $field) use ($alias, $excludes) {
    if (!dkan_datastore_api_field_excluded($field)) {
      $memo[] = $alias . '.' . normalize_field_name($field);
    }
    return $memo;
  }, array());
}

/**
 * Check if a field should be excluded.
 *
 * Some internal fields are not needed in the request
 * response so it's better to exclude them to don't
 * confuse users and reveal internal db schemas.
 */
function dkan_datastore_api_field_excluded($field) {
  $excludes = array('timestamp', 'feeds_entity_id', 'feeds_flatstore_entry_id');
  foreach (module_implements('dkan_datastore_api_field_excluded_alter') as $module) {
    $function = $module . '_dkan_datastore_api_field_excluded_alter';
    $function($excludes);
  }
  return in_array($field, $excludes);
}

/**
 * Parse a qualified field.
 *
 * Given a qualified field parses it and returns
 * an associative array with the table and field name.
 */
function parse_field($field) {
  list($table, $field) = explode('.', $field);
  return array('table' => $table, 'field' => $field);
}

/**
 * Groups qualified fields.
 *
 * Given an array of qualified field returns
 * a new array with non qualified fields grouped
 * by table names.
 */
function prepare_fields($fields) {
  $grouped = array();
  foreach ($fields as $field) {
    list($table, $field) = explode('.', $field);
    $grouped[$table][] = $field;
  }
  return $grouped;
}

/**
 * Returns an array with fields, types and labels.
 */
function schema_fields($resource_ids) {
  $fields = array();

  foreach ((array) $resource_ids as $id) {
    $table = dkan_datastore_api_tablename($id);
    if ($data_table = data_get_table($table)) {
      $schema = $data_table->table_schema;
      $meta = $data_table->meta;
    }
    else {
      $schema = drupal_get_schema($table);
      $meta = array('fields' => array());
    }

    $meta_fields = array_merge_recursive($meta['fields'], $schema['fields']);
    $fields = array_merge_recursive((array) $fields, (array) $meta_fields);
  }

  // Remove flatstore processor fields.
  unset($fields['timestamp']);
  unset($fields['feeds_entity_id']);
  unset($fields['feeds_flatstore_entry_id']);
  return $fields;
}

/**
 * Implements hook_init().
 */
function dkan_datastore_api_init() {

  // This abomination redirects between datastore_search and the 'q' request.
  //
  // Drupal redirects everything through the 'q' query string.
  // CKAN uses the 'q' string for searches.
  // Services module won't allow an endpoint to have an underscore so
  // datastore_search is redircted to datastore/search.
  //
  // We can't just search for the api/action/datastore/search.json request
  // string since we support search.xml, search.jsonp etc.
  // If the request doesn't have datastore_search, we need to redirect 'q' to
  // 'query' if it does not have /api/action/datastore/search in it.
  if (isset($_GET['resource_id']) && !strpos($_SERVER['REQUEST_URI'], 'datastore_search')) {
    $request = explode('/', $_SERVER['REQUEST_URI']);
    $query = explode('/', $_GET['q']);
    $query_val = array();
    foreach ($query as $key => $val) {
      $query_val[$val] = 1;
    }
    if (!isset($query_val['api']) && !isset($query_val['action']) && !isset($query_val['datastore'])) {
      $matches = array();
      preg_match("/(search\.)(\S*)(\?)/", $_SERVER['REQUEST_URI'], $matches);
      $_GET['query'] = $_GET['q'];
      unset($_GET['q']);
      drupal_goto('api/action/datastore/search.' . $matches[2], array('query' => $_GET));
    }
  }
  // If the request does have datastore_search, redirect.
  elseif (isset($_GET['resource_id']) && strpos($_SERVER['REQUEST_URI'], 'datastore_search')) {
    $args = $_GET;
    // Redirect to search.json.
    if ($args['q'] == 'api/3/action/datastore_search') {
      unset($args['q']);
      drupal_goto('api/action/datastore/search.json', array('query' => $args));
    }
    // There is an actual search in the 'q' string, so redirect that to 'query'.
    elseif ($args['q'] != 'api/action/datastore/search.json') {
      $args['query'] = $args['q'];
      unset($args['q']);
      drupal_goto('api/action/datastore/search.json', array('query' => $args));
    }
  }
}

/**
 * Implements hook_init().
 */
function dkan_datastore_api_boot() {
  // This is required for compatability with the CKAN API which uses 'q' which
  // drupal also uses.
  if (!$_GET['q'] && isset($_GET['limit'])) {
    $_GET['q'] = 'api/action/datastore/search.json';
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function dkan_datastore_api_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
    );
  }
}

/**
 * Implements hook_services_resources().
 */
function dkan_datastore_api_services_resources() {

  $datastore_node_type = dkan_datastore_node_type();

  return array(
    'dkan_datastore_search' => array(
      'index' => array(
        'file' => array(
          'type' => 'inc',
          'module' => 'services',
          'name' => 'resources/user_resource',
        ),
        'description' => 'Data API for DKAN datastores',
        'callback' => 'dkan_datastore_api_datastore_index',
        'args' => array(),
        'access callback' => 'dkan_datastore_api_datastore_access',
        'access arguments' => array('view'),
        'access arguments append' => FALSE,
      ),
      'create' => array(
        'file' => array(
          'type' => 'inc',
          'module' => 'services',
          'name' => 'resources/user_resource',
        ),
        'description' => 'Data API for DKAN datastores',
        'callback' => 'dkan_datastore_api_datastore_index',
        'args' => array(),
        'access callback' => 'dkan_datastore_api_datastore_access',
        'access arguments' => array('view'),
        'access arguments append' => FALSE,
      ),
    ),
    'dkan_datastore' => array(
      'operations' => array(
        'create' => array(
          'file' => array(
            'type' => 'module',
            'module' => 'dkan_datastore_api',
            'name' => 'dkan_datastore_api',
          ),
          'help' => 'Create a store with a file with base64 encoded data',
          'callback' => 'dkan_datastore_api_datastore_create',
          'access arguments' => array('create ' . $datastore_node_type . ' content'),
          'args' => array(
            array(
              'name' => 'file',
              'type' => 'array',
              'description' => t('An array representing a file.'),
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),
        ),
        'update' => array(
          'file' => array(
            'type' => 'module',
            'module' => 'dkan_datastore_api',
            'name' => 'dkan_datastore_api',
          ),
          'help' => 'Update a store with a file with base64 encoded data',
          'callback' => 'dkan_datastore_api_datastore_update',
          'access arguments' => array('edit any ' . $datastore_node_type . ' content'),
          'args' => array(
            array(
              'name' => 'id',
              'optional' => FALSE,
              'type' => 'string',
              'description' => 'Datastore ID',
              'default value' => '',
              'source' => array('path' => 0),
            ),
            array(
              'name' => 'file',
              'type' => 'array',
              'description' => t('An array representing a file.'),
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),
        ),
      ),
      'actions' => array(
        'create' => array(
          'help' => 'Create store with a file with raw data.',
          'file' => array(
            'type' => 'module',
            'module' => 'dkan_datastore_api',
            'name' => 'dkan_datastore_api',
          ),
          'callback' => 'dkan_datastore_api_datastore_create_raw',
          'access arguments' => array('create ' . $datastore_node_type . ' content'),
        ),
        'update' => array(
          'help' => 'Update a store with a file with raw data.',
          'file' => array(
            'type' => 'module',
            'module' => 'dkan_datastore_api',
            'name' => 'dkan_datastore_api',
          ),
          'callback' => 'dkan_datastore_api_datastore_update_raw',
          'access arguments' => array('edit any ' . $datastore_node_type . ' content'),
          'args' => array(
            array(
              'name' => 'id',
              'optional' => FALSE,
              'type' => 'string',
              'description' => 'Datastore ID',
              'default value' => '',
              'source' => array('path' => 1),
            ),
          ),
        ),
      ),
    ),
    'dkan_datastore_file' => array(
      'delete' => array(
        'file' => array(
          'type' => 'module',
          'module' => 'dkan_datastore_api',
          'name' => 'dkan_datastore_api',
        ),
        'callback' => 'dkan_datastore_api_datastore_file_delete',
        'access arguments' => array('edit any ' . $datastore_node_type . ' content'),
        'args' => array(
          array(
            'name' => 'id',
            'optional' => FALSE,
            'type' => 'string',
            'description' => 'Datastore ID',
            'default value' => '',
            'source' => array('path' => 0),
          ),
        ),
      ),
    ),
  );
}

/**
 * Creates index based off of query.
 *
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function dkan_datastore_api_datastore_index() {
  if ($_SERVER['REQUEST_METHOD'] === 'GET') {
    $params = dkan_datastore_api_get_params();
    // Add anonoymous user to hash so refresh after login relaxes query limits.
    $cache_hash = md5(json_encode($params)) . user_is_anonymous();

    if ($cache = cache_get($cache_hash)) {
      return $cache->data;
    }
    $result = dkan_datastore_api_query($params);
    cache_set($cache_hash, $result, 'cache', CACHE_TEMPORARY);
  }
  elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $result = dkan_datastore_api_multiple_query();
  }
  return $result;
}

/**
 * Performs a multiple query against the datastore.
 */
function dkan_datastore_api_get_params($params = array()) {
  $params = !empty($params) ? (array) $params : drupal_get_query_parameters();
  $params['resource_ids'] = $params['resource_id'];
  $defaults = array(
    'resource_ids' => array(),
    'fields' => '*',
    'sort' => '',
    'filters' => array(),
    'join' => array(),
    'query' => '',
    'offset' => 0,
    'limit' => 10,
    'group_by' => array(),
    'avg' => '',
    'sum' => '',
    'min' => '',
    'max' => '',
    'count' => '',
  );
  $params = array_merge($defaults, $params);
  $sort = dkan_datastore_api_sort_clean($params['sort']);
  $aggregations = array(
    'sum' => $params['sum'],
    'avg' => $params['avg'],
    'min' => $params['min'],
    'max' => $params['max'],
    'count' => $params['count'],
  );
  unset($params['resource_id']);
  $params = array_intersect_key($params, $defaults);
  return array_merge($params, array(
    'aggregations' => $aggregations,
    'sort' => $sort,
  ));
}

/**
 * Field safe name.
 *
 * It depends on the feeds_flatstore_processor_safe_name.
 * I decided to wrap it to make easy to decouple it.
 */
function normalize_field_name($field) {
  return feeds_flatstore_processor_safe_name($field);
}

/**
 * Performs a single query against the datastore.
 */
function dkan_datastore_api_query($params) {
  extract($params);
  $data_select = NULL;
  $aggregations = array(
    'sum' => $sum,
    'avg' => $avg,
    'max' => $max,
    'min' => $min,
    'count' => $count,
  );
  try {
    $resource_ids = (array) $resource_ids;
    list($alias, $resource_id) = each($resource_ids);
    $alias = is_string($alias) ? $alias : DKAN_DATASTORE_API_DEFAULT_TABLE_ALIAS;
    $table = dkan_datastore_api_tablename($resource_id);
    $data_select = db_select($table, $alias);

    dkan_datastore_api_limit($data_select, $offset, $limit);
    dkan_datastore_api_group_by($data_select, $group_by);
    dkan_datastore_api_aggregations($data_select, $aggregations);
    dkan_datastore_api_sort($data_select, $sort, $alias);
    dkan_datastore_api_where($data_select, $filters);

    // Query for a single resource.
    if (count($resource_ids) > 1) {

      // We can't have multiple resources if we can't join them.
      if (!$join) {
        throw new Exception('Mulitple resources require joins.');
      }

      while (list($alias, $resource_id) = each($resource_ids)) {
        $table = dkan_datastore_api_tablename($resource_id);
        dkan_datastore_api_join($data_select, $table, $join);
      }
    }

    // By set up fields a new alias it is being defined
    // Join method also tries to define an alias so in order to
    // avoid alias renaming we need to move fields below the
    // join process otherwise join alias will be renamed using
    // incremental counters.
    dkan_datastore_api_select_fields($data_select, $fields, $resource_ids);

    if ($query && $query != 'api/3/action/datastore_search') {
      dkan_datastore_api_use_indexes($data_select, $table, $query);
    }

    $count = dkan_datastore_api_count($data_select);
    $results = $data_select->execute();
    return dkan_datastore_api_output($data_select, $results, $table, $fields, $resource_ids, $count, $limit);
  }
  catch (Exception $ex) {
    return array('sql' => dkan_datastore_api_debug($data_select), 'error' => array('message' => 'Caught exception: ' . $ex->getMessage()));
  }
}

/**
 * Performs a multiple query against the datastore.
 */
function dkan_datastore_api_multiple_query($queries = NULL) {
  $post_raw_data = file_get_contents('php://input');
  $queries = $queries ? $queries : json_decode($post_raw_data, TRUE);

  // Add anonoymous user to hash so refresh after login relaxes query limits.
  $cache_hash = md5($post_raw_data) . user_is_anonymous();
  if ($cache = cache_get($cache_hash)) {
    return $cache->data;
  }
  foreach ((array) $queries as $name => $query) {
    $params = dkan_datastore_api_get_params($query);
    $result[$name] = dkan_datastore_api_query($params);
  }
  cache_set($cache_hash, $result, 'cache', CACHE_TEMPORARY);
  return $result;
}

/**
 * Retrieves count given fully query without paging limit.
 */
function dkan_datastore_api_count($data_select) {
  $query = clone($data_select);
  $count = $query->range()->countQuery()->execute()->fetchField();
  return $count;
}

/**
 * Adds conditions, ie WHERE clause, to query.
 */
function dkan_datastore_api_where(&$data_select, $filters) {
  if ($filters) {

    // Fields without table prefix.
    // e.g.: "filters": [{ "WL_1_County": [1] }].
    if (!is_assoc($filters)) {
      foreach ($filters as $field => $value) {
        $field = str_replace(' ', '_', $field);
        $value = is_array($value) ? $value : explode(',', $value);
        $data_select->condition($field, $value, dkan_datastore_api_clause_condition($value));
      }
      // Fields with table prefix.
      // e.g. {"counties": {"msa": "N"}}.
    }
    elseif (is_assoc($filters)) {
      foreach ($filters as $key => $value) {

        // Fields with table prefix again.
        // {"counties": {"msa": "N"}, "msab": ... }.
        if (is_array($value) && is_assoc($value)) {
          foreach ($value as $field => $filterValue) {
            $table = $key;
            $field = str_replace(' ', '_', $field);
            $filterValue = is_array($filterValue) ? $filterValue : explode(',', $filterValue);
            $data_select->condition($table . '.' . $field, $filterValue, dkan_datastore_api_clause_condition($value));
          }

          // Fields without table prefix again.
          // {"counties": ..., "msab": [1,2] }.
        }
        else {
          $key = str_replace(' ', '_', $key);
          $value = is_array($value) ? $value : explode(',', $value);
          $data_select->condition($key, $value, dkan_datastore_api_clause_condition($value));
        }
      }
    }
  }
}

/**
 * Check which SQL clause should use for conditions.
 */
function dkan_datastore_api_clause_condition($value) {
  return $value == 'NULL' ? 'IS' : 'IN';
}

/**
 * Returns true if all the keys in a given array are strings.
 */
function is_assoc($array) {
  return is_array($array) && count(array_filter(array_keys($array), 'is_string')) > 0;
}

/**
 * Adds group by statements to query.
 */
function dkan_datastore_api_group_by(&$data_select, $group_by, $alias = DKAN_DATASTORE_API_DEFAULT_TABLE_ALIAS) {
  if (empty($group_by)) {
    return;
  }
  $alias = is_assoc($group_by) ? end(array_keys($group_by)) : $alias;
  $group_by = isset($group_by[$alias]) ? $group_by[$alias] : $group_by;
  if ($group_by) {
    $group_by = (is_array($group_by)) ? $group_by : services_str_getcsv($group_by);
    foreach ($group_by as $field) {
      $data_select->groupBy($alias . '.' . normalize_field_name($field));
    }
  }
}

/**
 * Adds aggregations to query.
 */
function dkan_datastore_api_aggregations(&$data_select, $aggregations, $alias = NULL) {

  // Walk all the aggregations (sum, avg, etc.).
  // { "sum": {"table_name": {"field_name": "as_field" }}}.
  foreach ($aggregations as $method => $agg) {
    if (!empty($agg)) {
      // If aggregation is an object then its using a table prefix.
      // {"table_name": {"field_name": "as_field" }}.
      if (is_assoc($agg)) {

        // Walk through all the fields inside that table.
        // {"field_name1": "as_field1", "field_name2": "as_field2"}.
        foreach ($agg as $table => $fields) {
          if (is_assoc($fields)) {
            foreach ($fields as $field => $as) {
              $field_full = $table . '.' . normalize_field_name($field);
              $data_select->addExpression($method . '(' . $field_full . ')', normalize_field_name($as));
            }
          }
          elseif (is_string($fields)) {
            $field = $fields;
            $field_full = $table . '.' . normalize_field_name($field);
            $data_select->addExpression($method . '(' . $field_full . ')', $method . '_' . normalize_field_name($field));
          }
          elseif (is_array($fields)) {
            foreach ($fields as $field) {
              $field_full = $table . '.' . normalize_field_name($field);
              $data_select->addExpression($method . '(' . $field_full . ')', $method . '_' . normalize_field_name($field));
            }
          }
        }

        // If aggregation's value is an array then contains
        // field names without table prefixes.
        // { "sum": ["field_name1", "field_name2"]}.
      }
      elseif (is_array($agg)) {
        foreach ($agg as $field) {
          $field = normalize_field_name($field);
          $data_select->addExpression($method . '(' . $field . ')', $method . '_' . $field);
        }

        // If aggregation's value is an string then contains just a single
        // field name.
        // { "sum": "field_name1" }.
      }
      elseif (is_string($agg)) {

        $field = normalize_field_name($agg);
        if (!empty($field)) {
          $data_select->addExpression($method . '(' . $field . ')', $method . '_' . $field);
        }
      }
    }
  }
}

/**
 * Add search terms ("query") to query.
 *
 * @todo Add SQL server support
 */
function dkan_datastore_api_use_indexes(&$data_select, $table, $query) {
  if (db_driver() == 'mysql') {
    // Get fulltext fields.
    $ft_result = db_query("SHOW INDEX IN {$table} WHERE Index_type = 'FULLTEXT'");
    $ft_fields = array();
    foreach ($ft_result as $ft_row) {
      $ft_fields[] = $ft_row->Column_name;
    }
    if (count($ft_fields)) {
      $field_list = implode(', ', $ft_fields);
      $data_select->where("MATCH($field_list) AGAINST (:query IN BOOLEAN MODE)", array(':query' => $query));
      return;
    }
  }

  // If no FULLTEXT indexes, try concat method if on mysql or postgres.
  if ($field_list = feeds_flatstore_fulltext_fields(drupal_get_schema($table))) {
    if (db_driver() == 'mysql' || db_driver() == 'pgsql') {
      $data_select->where("CONCAT_WS(' ', $field_list) LIKE :query", array(':query' => "%$query%"));
    }
    // For MS SQL Server, use alternate concat syntax.
    elseif (db_driver() == 'sqlsrv') {
      $ft_fields = explode(',', $field_list);
      $field_list = implode("+' '+", $ft_fields);
      $data_select->where("$field_list LIKE :query", array(':query' => "%$query%"));
    }
    else {
      throw new Exception('Text search currently only works with MySQL, PostgresSQL or SQL Server datastore.');
    }
  }
}

/**
 * Adds additional fields and join.
 */
function dkan_datastore_api_join(&$data_select, $table, $join) {
  list($left, $right) = array_keys($join);
  $joint = $left . '.' . normalize_field_name($join[$left]) . ' = ' . $right . '.' . normalize_field_name($join[$right]);
  $data_select->innerjoin($table, $right, $joint);
}

/**
 * Makes sure we are using column names for sorts.
 */
function dkan_datastore_api_sort_clean($sort) {
  if (is_array($sort)) {
    return $sort;
  }
  if (strpos($sort, ' asc') !== FALSE) {
    $type = 'asc';
  }
  elseif (strpos($sort, ' desc') !== FALSE) {
    $type = 'desc';
  }
  else {
    return $sort;
  }

  $sort = explode(" $type", $sort);
  foreach ($sort as $key => $value) {
    $sort[$key] = normalize_field_name($value);
  }
  $sort = implode(" $type", $sort);
  return $sort;
}

/**
 * Returns table name or exeption.
 */
function dkan_datastore_api_tablename($resource_id) {
  static $tables;
  if (!isset($tables[$resource_id])) {
    $nid = db_query('SELECT nid FROM {node} WHERE uuid = :uuid', array(':uuid' => $resource_id))->fetchField();
    $source_id = dkan_datastore_api_get_feeds_source($nid);
    $table = feeds_flatstore_processor_table_name($source_id, $nid);
    if (db_table_exists($table) && dkan_datastore_datastore_api_access($nid)) {
      $tables[$resource_id] = $table;
      return $table;
    }
    else {
      throw new Exception('Resource ' . $resource_id . ' does not exist.');
    }
  }
  else {
    return $tables[$resource_id];
  }
}

/**
 * Retrieves source_id from feeds_source.
 */
function dkan_datastore_api_get_feeds_source($nid) {
  $source_id = db_query("SELECT id FROM {feeds_source} WHERE feed_nid = :nid AND source != ''", array(':nid' => $nid))->fetchField();
  return $source_id ? $source_id : NULL;
}

/**
 * Builds index query.
 */
function dkan_datastore_api_build_query($table, $fields, $sort, $alias = DKAN_DATASTORE_API_DEFAULT_TABLE_ALIAS) {
  $data_select = db_select($table, $alias);
  return $data_select;
}

/**
 * Sort provided data array.
 *
 * @param mixed $data_select
 *   SelectQuery object to sort.
 * @param mixed $sort
 *   Sort criteria.
 * @param string $alias
 *   Drupal Database alias.
 */
function dkan_datastore_api_sort(&$data_select, $sort, $alias) {
  if (!is_array($sort)) {
    $sort = explode(' ', $sort);
    $order = $sort[0];
    $columns = empty($sort) ? $sort : explode(',', $sort[0]);
  }
  else {
    $columns = $sort;
  }

  if (count($columns) == 1 && array_values($columns)[0] == '') {
    $data_select->orderBy($alias . '.feeds_flatstore_entry_id', 'ASC');
  }
  else {
    $key = end(array_values($sort));
    if (!in_array($key, ['desc', 'asc'])) {
      $columns = $key;
      $alias = end(array_keys($sort));
    }
    foreach ($columns as $field => $order) {
      $data_select->orderBy($alias . '.' . $field, $order);
    }
  }
}

/**
 * Same as services version but not adding conditions.
 */
function dkan_datastore_api_select_fields(&$data_select, $fields, $resource_ids) {
  $resource_ids = is_assoc($resource_ids)
    ? $resource_ids
    : array(DKAN_DATASTORE_API_DEFAULT_TABLE_ALIAS => $resource_ids[0]);

  // Select all the fields using an alias performs better than selecting
  // specific fields. However if the user specify fields we have to fallback
  // the slowest approach.
  if ($fields == '*') {
    foreach ($resource_ids as $table_alias => $resource_id) {
      $data_select->fields($table_alias);
    }
  }
  else {
    $fields = normalize_fields($fields, $resource_ids);
    foreach (prepare_fields($fields) as $table_alias => $table_fields) {
      $data_select->fields($table_alias, $table_fields);
    }
  }
}

/**
 * Restrict the result to a range.
 */
function dkan_datastore_api_limit(&$data_select, $offset, $limit) {
  $default_limit = variable_get('dkan_datastore_default_page_size', 100);
  if ((!user_access('perform unlimited index queries') && $limit > $default_limit) || !$limit) {
    $limit = $default_limit;
  }
  $data_select->range($offset, $limit);
}

/**
 * Access callback.
 */
function dkan_datastore_api_datastore_access($op) {
  return TRUE;
}

/**
 * Builds index link with results of the query.
 */
function dkan_datastore_api_output($data_select, $results, $table, $fields, $resource_ids, $count, $limit) {
  $fields = normalize_fields($fields, $resource_ids);

  // Put together array of matching items to return.
  $items = array();
  foreach ($results as $result) {
    $items[] = $result;
  }

  $help = array('help' => dkan_datastore_api_resource_help());
  $success = count($items) ? array('success' => TRUE) : array('success' => FALSE);
  $schema_fields = schema_fields($resource_ids);

  // Prepare rows.
  $items = array_map(function ($item) use ($schema_fields) {
    $new_item = new stdClass();
    foreach ($item as $name => $data) {
      if (!dkan_datastore_api_field_excluded($name)) {
        if (!empty($schema_fields[$name])) {
          $new_name = $schema_fields[$name]['label'];
          $new_item->$new_name = $data;
        }
        else {
          $new_item->$name = $data;
        }
      }
    }
    return $new_item;
  }, $items);

  $return = new stdClass();

  // Prepare schema.
  foreach (prepare_fields($fields) as $table_alias => $table_fields) {
    foreach ($table_fields as $table_field) {
      $field = $schema_fields[$table_field];
      $name = $field['label'];
      $type = preg_replace('/date|timestamp/', 'datetime', $field['type']);
      $return->fields[] = array('id' => $name, 'type' => $type);
    }
  }

  // Prepare output.
  $return->resource_id = $resource_ids;
  $return->limit = (int) $limit;
  $return->total = (int) $count;
  $return->records = $items;
  return $help + $success + array('result' => $return);
}

/**
 * Creates help text for API.
 */
function dkan_datastore_api_resource_help() {
  return t('Search a datastore table. :param resource_id: id or alias of the data that is going to be selected.');
}

/**
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function dkan_datastore_api_datastore_create($file) {

  $file = _services_arg_value($file, 'file');

  // If the file data or filename is empty then bail.
  if (!isset($file['file']) || empty($file['filename'])) {
    return services_error(t("Missing data the file upload can not be completed"), 500);
  }

  $file_saved = process_file_argument($file);

  if ($file_saved) {
    $datastore = dkan_datastore_go();
    if ($datastore) {
      if ($datastore->createFromFileUri($file_saved->uri, FALSE)) {

        $result = new stdClass();
        $result->result = 'success';
        $result->datastore_id = $datastore->node->uuid;
        $result->node_id = $datastore->node->nid;
        return $result;
      }
    }
  }
  else {
    return services_error(t('The store could not be created.'));
  }
}

/**
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function dkan_datastore_api_datastore_create_raw() {

  $validators = array(
    'file_validate_extensions' => array(),
    'file_validate_size' => array(),
  );

  foreach ($_FILES['files']['name'] as $field_name => $file_name) {
    $file = file_save_upload($field_name, $validators, file_default_scheme() . "://");

    if (!empty($file->fid)) {
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);

      // Required to be able to reference this file.
      file_usage_add($file, 'dkan_datastore_api', 'files', $file->fid);

      $datastore = dkan_datastore_go();
      if ($datastore) {
        if ($datastore->createFromFileUri($file->uri, FALSE)) {

          $result = new stdClass();
          $result->result = 'success';
          $result->datastore_id = $datastore->node->uuid;
          $result->node_id = $datastore->node->nid;
          return $result;
        }
      }
    }
    else {
      return services_error(t('An unknown error occured'), 500);
    }
  }

  return services_error(t('An unknown error occured'), 500);
}

/**
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function dkan_datastore_api_datastore_update($id, $file) {

  $file = _services_arg_value($file, 'file');

  if (!isset($file['file']) || empty($file['filename'])) {
    return services_error(t("The file is missing or empty."), 500);
  }

  $file_saved = process_file_argument($file);

  if ($file_saved) {
    $datastore = dkan_datastore_go($id);
    if ($datastore) {
      if ($datastore->updateFromFileUri($file_saved->uri, FALSE)) {

        $result = new stdClass();
        $result->result = 'success';
        $result->datastore_id = $datastore->node->uuid;
        $result->node_id = $datastore->node->nid;
        return $result;
      }
    }
  }
  else {
    return services_error(t('The store could not be updated.'));
  }
}

/**
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function dkan_datastore_api_datastore_update_raw($id) {

  $validators = array(
    'file_validate_extensions' => array(),
    'file_validate_size' => array(),
  );

  foreach ($_FILES['files']['name'] as $field_name => $file_name) {
    $file = file_save_upload($field_name, $validators, file_default_scheme() . "://");

    if (!empty($file->fid)) {
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);

      file_usage_add($file, 'dkan_datastore_api', 'files', $file->fid);

      $datastore = dkan_datastore_go($id);
      if ($datastore) {
        if ($datastore->updateFromFileUri($file->uri, FALSE)) {

          $result = new stdClass();
          $result->result = 'success';
          $result->datastore_id = $datastore->node->uuid;
          $result->node_id = $datastore->node->nid;
          return $result;
        }
      }
    }
    else {
      return services_error(t('The store could not be updated.'));
    }
  }

  return services_error(t('An unknown error occured'), 500);
}

/**
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function dkan_datastore_api_datastore_file_delete($id) {

  $datastore = dkan_datastore_go($id);
  if ($datastore) {
    if ($datastore->deleteFile()) {

      $result = new stdClass();
      $result->result = 'success';
      $result->datastore_id = $datastore->node->uuid;
      $result->node_id = $datastore->node->nid;
      return $result;
    }
  }
}

/**
 * Saves the received file.
 */
function process_file_argument($file) {

  if (!isset($file['file']) || empty($file['filename'])) {
    return FALSE;
  }

  if (empty($file['filepath'])) {
    $file['filepath'] = file_default_scheme() . '://' . $file['filename'];
  }
  $dir = drupal_dirname($file['filepath']);

  if (!file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    return FALSE;
  }

  if (!$file_saved = file_save_data(base64_decode($file['file']), $file['filepath'], FILE_EXISTS_RENAME)) {
    return FALSE;
  }

  if (isset($file['status']) && $file['status'] == 0) {
    $file_saved->status = FILE_STATUS_PERMANENT;
    file_save($file_saved);
  }

  file_usage_add($file_saved, 'dkan_datastore_api', 'files', $file_saved->fid);

  return $file_saved;
}

/**
 * Returns sql statement for debug purposes.
 */
function dkan_datastore_api_debug($data_select) {
  if (method_exists($data_select, 'preExecute')) {
    $data_select->preExecute();
  }
  $sql = (string) $data_select;
  $quoted = array();
  $connection = Database::getConnection();
  foreach ((array) $data_select->arguments() as $key => $val) {
    $quoted[$key] = $connection->quote($val);
  }
  $sql = strtr($sql, $quoted);
  $sql = str_replace('\n', ' ', $sql);
  return (string) $sql;
}
