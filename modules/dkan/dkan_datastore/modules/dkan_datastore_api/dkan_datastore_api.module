<?php

/**
 * @file
 * Data API via services.
 *
 * TODO: Add search element, investigate caching, add uuids.
 */

/**
 * Implements hook_init().
 */
function dkan_datastore_api_init() {
  // This abomination redirects between datastore_search and the 'q' request.
  //
  // Drupal redirects everything through the 'q' query string.
  // CKAN uses the 'q' string for searches.
  // Services module won't allow an endpoint to have an underscore so
  // datastore_search is redircted to datastore/search.
  //
  // We can't just search for the api/action/datastore/search.json request
  // string since we support search.xml, search.jsonp etc.
  // If the request doesn't have datastore_search, we need to redirect 'q' to
  // 'query' if it does not have /api/action/datastore/search in it.
  if (isset($_GET['resource_id']) && !strpos($_SERVER['REQUEST_URI'], 'datastore_search')) {
    $request = explode('/', $_SERVER['REQUEST_URI']);
    $query = explode('/', $_GET['q']);
    $query_val = array();
    foreach ($query as $key => $val) {
      $query_val[$val] = 1;
    }
    if (!isset($query_val['api']) && !isset($query_val['action']) && !isset($query_val['datastore'])) {
      $matches = array();
      preg_match("/(search\.)(\S*)(\?)/", $_SERVER['REQUEST_URI'], $matches);
      $_GET['query'] = $_GET['q'];
      unset($_GET['q']);
      drupal_goto('api/action/datastore/search.' . $matches[2], array('query' => $_GET));
    }
  }
  // If the request does have datastore_search, redirect.
  elseif (isset($_GET['resource_id']) && strpos($_SERVER['REQUEST_URI'], 'datastore_search')) {
    $args = $_GET;
    // Redirect to search.json.
    if ($args['q'] == 'api/3/action/datastore_search') {
      unset($args['q']);
      drupal_goto('api/action/datastore/search.json', array('query' => $args));
    }
    // There is an actual search in the 'q' string, so redirect that to 'query'.
    elseif ($args['q'] != 'api/action/datastore/search.json') {
      $args['query'] = $args['q'];
      unset($args['q']);
      drupal_goto('api/action/datastore/search.json', array('query' => $args));
    }
  }
}

/**
 * Implements hook_init().
 */
function dkan_datastore_api_boot() {
  // This is required for compatability with the CKAN API which uses 'q' which
  // drupal also uses.
  if (!$_GET['q'] && isset($_GET['limit'])) {
    $_GET['q'] = 'api/action/datastore/search.json';
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function dkan_datastore_api_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
    );
  }
}

/**
 * Implements hook_services_resources().
 */
function dkan_datastore_api_services_resources() {

  $datastore_node_type = dkan_datastore_node_type();

  return array(
    'dkan_datastore_search' => array(
      'index' => array(
        'file' => array(
          'type' => 'inc',
          'module' => 'services',
          'name' => 'resources/user_resource',
        ),
        'description' => 'Data API for DKAN datastores',
        'callback' => '_dkan_datastore_api_datastore_index',
        'args' => array(),
        'access callback' => '_dkan_datastore_api_datastore_access',
        'access arguments' => array('view'),
        'access arguments append' => FALSE,
      ),
      'create' => array(
        'file' => array(
          'type' => 'inc',
          'module' => 'services',
          'name' => 'resources/user_resource',
        ),
        'description' => 'Data API for DKAN datastores',
        'callback' => '_dkan_datastore_api_datastore_index',
        'args' => array(),
        'access callback' => '_dkan_datastore_api_datastore_access',
        'access arguments' => array('view'),
        'access arguments append' => FALSE,
      ),
    ),
    'dkan_datastore' => array(
      'operations' => array(
        'create' => array(
          'file' => array(
            'type' => 'module',
            'module' => 'dkan_datastore_api',
            'name' => 'dkan_datastore_api',
          ),
          'help' => 'Create a store with a file with base64 encoded data',
          'callback' => '_dkan_datastore_api_datastore_create',
          'access arguments' => array('create ' . $datastore_node_type . ' content'),
          'args' => array(
            array(
              'name' => 'file',
              'type' => 'array',
              'description' => t('An array representing a file.'),
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),
        ),
        'update' => array(
          'file' => array(
            'type' => 'module',
            'module' => 'dkan_datastore_api',
            'name' => 'dkan_datastore_api',
          ),
          'help' => 'Update a store with a file with base64 encoded data',
          'callback' => '_dkan_datastore_api_datastore_update',
          'access arguments' => array('edit any ' . $datastore_node_type . ' content'),
          'args' => array(
            array(
              'name' => 'id',
              'optional' => FALSE,
              'type' => 'string',
              'description' => 'Datastore ID',
              'default value' => '',
              'source' => array('path' => 0),
            ),
            array(
              'name' => 'file',
              'type' => 'array',
              'description' => t('An array representing a file.'),
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),
        ),
      ),
      'actions' => array(
        'create' => array(
          'help' => 'Create store with a file with raw data.',
          'file' => array(
            'type' => 'module',
            'module' => 'dkan_datastore_api',
            'name' => 'dkan_datastore_api',
          ),
          'callback' => '_dkan_datastore_api_datastore_create_raw',
          'access arguments' => array('create ' . $datastore_node_type . ' content'),
        ),
        'update' => array(
          'help' => 'Update a store with a file with raw data.',
          'file' => array(
            'type' => 'module',
            'module' => 'dkan_datastore_api',
            'name' => 'dkan_datastore_api',
          ),
          'callback' => '_dkan_datastore_api_datastore_update_raw',
          'access arguments' => array('edit any ' . $datastore_node_type . ' content'),
          'args' => array(
            array(
              'name' => 'id',
              'optional' => FALSE,
              'type' => 'string',
              'description' => 'Datastore ID',
              'default value' => '',
              'source' => array('path' => 1),
            ),
          ),
        ),
      ),
    ),
    'dkan_datastore_file' => array(
      'delete' => array(
        'file' => array(
          'type' => 'module',
          'module' => 'dkan_datastore_api',
          'name' => 'dkan_datastore_api',
        ),
        'callback' => '_dkan_datastore_api_datastore_file_delete',
        'access arguments' => array('edit any ' . $datastore_node_type . ' content'),
        'args' => array(
          array(
            'name' => 'id',
            'optional' => FALSE,
            'type' => 'string',
            'description' => 'Datastore ID',
            'default value' => '',
            'source' => array('path' => 0),
          ),
        ),
      ),
    ),
  );
}

/**
 * Creates index based off of query.
 *
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function _dkan_datastore_api_datastore_index() {
  if($_SERVER['REQUEST_METHOD'] === 'GET') {
    $params = _dkan_datastore_api_get_params();
    $result = _dkan_datastore_api_query($params);
  } elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $result = _dkan_datastore_api_multiple_query();
  }
  return $result;
}
/**
 * Performs a multiple query against the datastore.
 */
function _dkan_datastore_api_get_params($params = array()) {
  $params = !empty($params) ? (array)$params : drupal_get_query_parameters();
  $params['resource_ids'] = $params['resource_id'];
  $defaults = array(
    'resource_ids' => array(),
    'fields' => '*',
    'sort' => '',
    'filters' => array(),
    'join' => array(),
    'query' => '',
    'offset' => 0,
    'limit' => 10,
    'group_by' => array(),
    'avg' => '',
    'sum' => '',
    'min' => '',
    'max' => '',
    'count' => '',
  );
  $params = array_merge($defaults, $params);
  $sort = dkan_datastore_api_sort_clean($params['sort']);
  $fields = _dkan_datastore_api_fields_clean($params['fields']);
  $aggregations = array(
    'sum' => $params['sum'],
    'avg' => $params['avg'],
    'min' => $params['min'],
    'max' => $params['max'],
    'count' => $params['count'],
  );
  unset($params['resource_id']);
  $params = array_intersect_key($params, $defaults);
  return array_merge($params, array(
    'aggregations' => $aggregations, 
    'sort' => $sort,
    'fields' => $fields,
  ));
}

/**
 * Field safe name.
 * It depends on the feeds_flatstore_processor_safe_name but
 * I decided to wrap it to make easy to decouple it.
 */
function _dkan_datastore_api_field_safe_name($field) {
  return feeds_flatstore_processor_safe_name($field);
}

/**
 * Clean fields.
 */
function _dkan_datastore_api_fields_clean($fields) {
  if($fields == '*'){
    return $fields;
  } elseif(is_array($fields)) {
    return array_map('_dkan_datastore_api_field_safe_name', $fields);
  } elseif(is_string($fields)) {
    return array_map('_dkan_datastore_api_field_safe_name', explode(',', $fields));
  }
}

/**
 * Performs a single query against the datastore.
 */
function _dkan_datastore_api_query($params) {
  extract($params);
  $data_select = null;
  $aggregations = array('sum' => $sum, 'avg' => $avg, 'max' => $max, 'min' => $min, 'count' => $count);

  try {
    // Query for a single resource.

    if (count($resource_ids) < 2) {
      $ids = array_values((array)$resource_ids);
      $resource_id = array_shift($ids);
      $table = dkan_datastore_api_tablename($resource_id);
      $data_select = dkan_datastore_api_build_index_query($table, $offset, $limit, $fields, $sort);
      dkan_datastore_api_add_index_conditions($data_select, $filters);
      dkan_datastore_api_add_index_group_by($data_select, $group_by);
      dkan_datastore_api_add_index_aggregations($data_select, $aggregations);
    }
    // Query for a multiple resources.
    else {
      $i = 0;
      foreach ($resource_ids as $alias => $resource_id) {
        // We can't have multiple resources if we can't join them.
        if (!$join) {
          throw new Exception('Mulitple resources require joins.');
        }
        $table = dkan_datastore_api_tablename($resource_id);
        // For the first resource we are creating the base query.
        if ($i == 0) {
          $fields = isset($fields[$alias]) ? $fields[$alias] : $fields;
          $sort = isset($sort[$alias]) ? $sort[$alias] : $sort;
          $filters = isset($filters[$alias]) ? $filters[$alias] : $filters;
          $data_select = dkan_datastore_api_build_index_query($table, $offset, $limit, $fields, $sort, $alias);
        }
        // For the additional resources we are adding joins, fields, filters.
        else {
          $newfields = isset($fields[$alias]) ? $fields[$alias] : '*';
          $sort = isset($sort[$alias]) ? $sort[$alias] : '';
          $filters = isset($filters[$alias]) ? $filters[$alias] : '';
          dkan_datastore_api_build_additional_index_query($data_select, $table, $fields, $sort, $alias, $join);
        }
        dkan_datastore_api_add_index_conditions($data_select, $filters, $alias);
        dkan_datastore_api_add_index_group_by($data_select, $group_by, $alias);
        dkan_datastore_api_add_index_aggregations($data_select, $aggregations, $alias);
        $i++;
      }
    }
    if ($query && $query != 'api/3/action/datastore_search') {
      dkan_datastore_api_add_index_query($data_select, $table, $query);
    }
    $count = dkan_datastore_api_count($data_select);
    $results = services_resource_execute_index_query($data_select);
    return dkan_datastore_api_resource_build_index_list($data_select, $results, $table, $fields, $resource_ids, $count, $limit);
  }
  catch (Exception $ex) {
    return array('sql' => dkan_datastore_api_debug($data_select),'error' => array('message' => 'Caught exception: ' . $ex->getMessage()));
  }
}

/**
 * Performs a multiple query against the datastore.
 */
function _dkan_datastore_api_multiple_query($queries) {
  $request_body = $queries ? $queries : json_decode(file_get_contents('php://input'));
  $queries = $request_body;
  foreach ((array)$queries as $name => $query) {
    $params = _dkan_datastore_api_get_params($query);
    $result[$name] = _dkan_datastore_api_query($params);
  }
  return $result;
}

/**
 * Retrieves count given fully query without paging limit.
 */
function dkan_datastore_api_count($data_select) {
  $query = clone($data_select);
  $count = $query->range()->execute()->fetchAll();
  return count($count);
}

/**
 * Adds conditions, ie WHERE clause, to query.
 */
function dkan_datastore_api_add_index_conditions(&$data_select, $filters, $alias = 't') {
  if ($filters && is_array($filters)) {
    foreach ($filters as $num => $filter) {
      $num = str_replace(' ', '_', $num);

        foreach ($filter as $key => $value) {
          $data_select->condition($alias . '.' . $key, $filter, 'IN');
        }
    }
  }
}


/**
 * Adds group by statements to query.
 */
function dkan_datastore_api_add_index_group_by(&$data_select, $group_by, $alias = 't') {
  if(empty($group_by)) return;
  $group_by = $alias && isset($group_by[$alias]) ? $group_by[$alias] : $group_by;
  if($group_by) {
    $group_by = (is_array($group_by)) ? $group_by : services_str_getcsv($group_by);
    foreach ($group_by as $field) {
      $data_select->groupBy($alias.'.'._dkan_datastore_api_field_safe_name($field));
    }
  }
}


/**
 * Adds aggregations to query.
 */
function dkan_datastore_api_add_index_aggregations(&$data_select, $aggregations, $alias = null) {
  foreach ($aggregations as $method => $agg) {
    $fieldName = $alias && is_array($agg) && isset($agg[$alias]) ? $agg[$alias] : $agg;
    $fieldFull = $alias ? $alias.'.'.$fieldName : $fieldName;

    if(!empty($fieldName)) {
      $data_select->addExpression($method . '(' ._dkan_datastore_api_field_safe_name($fieldFull). ')', $method . '_' . _dkan_datastore_api_field_safe_name($fieldName));
    }
  }
}


/**
 * Add search terms ("query") to query.
 *
 * @todo Add SQL server support
 */
function dkan_datastore_api_add_index_query(&$data_select, $table, $query) {
  if (db_driver() == 'mysql') {
    // Get fulltext fields.
    $ft_result = db_query("SHOW INDEX IN {$table} WHERE Index_type = 'FULLTEXT'");
    $ft_fields = array();
    foreach ($ft_result as $ft_row) {
      $ft_fields[] = $ft_row->Column_name;
    }
    if (count($ft_fields)) {
      $field_list = implode(', ', $ft_fields);
      $data_select->where("MATCH($field_list) AGAINST (:query IN BOOLEAN MODE)", array(':query' => $query));
      return;
    }
  }
  // If no FULLTEXT indexes, try concat method if on mysql or postgres.
  if ($field_list = feeds_flatstore_fulltext_fields(drupal_get_schema($table))) {
    if (db_driver() == 'mysql' || db_driver() == 'pgsql') {
      $data_select->where("CONCAT_WS(' ', $field_list) LIKE :query", array(':query' => "%$query%"));
    }
    // For MS SQL Server, use alternate concat syntax.
    elseif (db_driver() == 'sqlsrv') {
      $ft_fields = explode(',', $field_list);
      $field_list = implode("+' '+", $ft_fields);
      $data_select->where("$field_list LIKE :query", array(':query' => "%$query%"));
    }
    else {
      throw new Exception('Text search currently only works with MySQL, PostgresSQL or SQL Server datastore.');
    }
  }
  else {
    throw new Exception('No text search compatible fields on this datastore.');
  }
}

/**
 * Adds additional fields and join.
 */
function dkan_datastore_api_build_additional_index_query(&$data_select, $table, $fields, $sort, $alias, $join) {
  $aliases = array_keys($join);
  $joint = $aliases[0] . '.' . $join[$aliases[0]] . ' = ' . $aliases[1] . '.' . $join[$aliases[1]];
  $data_select->addJoin('INNER', $table, $alias, $joint);

  // AddField doesn't work with asterisk after join.
  if ($fields == '*') {
    $schema = drupal_get_schema($table);
    foreach ($schema['fields'] as $name => $element) {
      $data_select->addField($alias, $name);
    }
  }
  else {
    $data_select->addField($alias, explode(',', $fields));
  }
}

/**
 * Makes sure we are using column names for sorts.
 */
function dkan_datastore_api_sort_clean($sort) {
  if(is_array($sort)) return $sort;
  if (strpos($sort, ' asc') !== FALSE) {
    $type = 'asc';
  }
  elseif (strpos($sort, ' desc') !== FALSE) {
    $type = 'desc';
  }
  else {
    return $sort;
  }

  $sort = explode(" $type", $sort);
  foreach ($sort as $key => $value) {
    $sort[$key] = _dkan_datastore_api_field_safe_name($value);
  }
  $sort = implode(" $type", $sort);
  return $sort;
}

/**
 * Returns table name or exeption.
 */
function dkan_datastore_api_tablename($resource_id) {
  static $tables;
  if (!isset($tables[$resource_id])) {
    $nid = db_query('SELECT nid FROM {node} WHERE uuid = :uuid', array(':uuid' => $resource_id))->fetchField();
    $source_id = dkan_datastore_api_get_feeds_source($nid);
    $table = feeds_flatstore_processor_table_name($source_id, $nid);
    if (db_table_exists($table) && dkan_datastore_datastore_api_access($nid)) {
      $tables[$resource_id] = $table;
      return $table;
    }
    else {
      throw new Exception('Resource ' . $resource_id . ' does not exist.');
    }
  }
  else {
    return $tables[$resource_id];
  }
}
/**
 * Retrieves source_id from feeds_source.
 */
function dkan_datastore_api_get_feeds_source($nid) {
  $source_id = db_query("SELECT id FROM {feeds_source} WHERE feed_nid = :nid AND source != ''", array(':nid' => $nid))->fetchField();
  return $source_id ? $source_id : NULL;
}
/**
 * Builds index query.
 */
function dkan_datastore_api_build_index_query($table, $offset, $limit, $fields, $sort, $alias = 't') {
  $data_select = db_select($table, $alias);

  if(!is_array($sort)) {
    $sort = explode(' ', $sort);
    $order = $sort[0];
    $columns = empty($sort) ? $sort : explode(',', $sort[0]);
  } else {
    $columns = $sort;
  }

  if(count($columns) == 1 && array_values($columns)[0] == '') {

    $data_select->orderBy($alias . '.feeds_flatstore_entry_id', 'ASC');
  } else {
    foreach ($columns as $field => $order) {
      $data_select->orderBy($alias . '.' . $field, $order);
    }
  }
  dkan_datastore_api_resource_build_index_query($data_select, $offset, $fields, $limit, $alias, $table);
  return $data_select;
}

/**
 * Same as services version but not adding conditions.
 */
function dkan_datastore_api_resource_build_index_query(&$query, $page, $fields, $page_size, $alias, $table) {
  $default_limit = variable_get('dkan_datastore_default_page_size', 100);
  if ((!user_access('perform unlimited index queries') && $page_size > $default_limit) || !$page_size) {
    $page_size = $default_limit;
  }
  $query->range($page, $page_size);
  if ($fields == '*') {
    $query->fields($alias);
  }
  else {
    $fields = is_array($fields) ? $fields : explode(',', $fields);
    $query->fields($alias, $fields);
  }
}

/**
 * Access callback.
 */
function _dkan_datastore_api_datastore_access($op) {
  return TRUE;
}

/**
 * Builds index link with results of the query.
 */
function dkan_datastore_api_resource_build_index_list($data_select, $results, $table, $fields, $resource_ids, $count, $limit) {
  // Put together array of matching items to return.
  $items = array();
  foreach ($results as $result) {
    $items[] = $result;
  }

  $help = array('help' => dkan_datastore_api_resource_help());
  $success = count($items) ? array('success' => TRUE) : array('success' => FALSE);
  // Use labels from data module if available.
  if ($data_table = data_get_table($table)) {
    $schema = $data_table->table_schema;
    $meta = $data_table->meta;
    $new_items = array();
    foreach ($items as $item) {
      $new_item = new stdClass();
      foreach ($item as $name => $data) {
        if (isset($meta['fields'][$name]['label']) && $new_name = $meta['fields'][$name]['label']) {
          $new_item->$new_name = $data;
        }
        else {
          $new_item->$name = $data;
        }
      }
      $new_items[] = $new_item;
    }
    $items = $new_items;
  }
  else {
    $schema = drupal_get_schema($table);
    $meta = '';
  }
  $return = new stdClass();

  if ($fields == '*') {
    foreach ($schema['fields'] as $name => $field) {
      // Don't include fields added by feeds_flatstore_processor.
      if ($name != 'feeds_flatstore_entry_id' && $name != 'timestamp' && $name != 'feeds_entity_id') {
        $name = $meta ? $meta['fields'][$name]['label'] : $name;
        if ($name == 'date' || $name == 'timestamp' || $name == 'datetime') {
          $return->fields[] = array('id' => $name, 'type' => 'datetime');
        }
        else {
          $return->fields[] = array('id' => $name, 'type' => $field['type']);
        }
      }
    }
  }
  else {
    $used_fields = explode(',', $fields);
    foreach ($used_fields as $key => $field) {
      $output_fields[$field] = $schema['fields'][$field];
      $output_fields[$field]['label'] = $meta ? $meta['fields'][$field]['label'] : $field;
    }
    $fields = $output_fields;
  }
  $return->resource_id = $resource_ids;
  $return->limit = (int)$limit;
  $return->total = (int)$count;
  $return->records = $items;
  $return->sql = (string)$data_select;
  return $help + $success + array('result' => $return);
}

/**
 * Creates help text for API.
 */
function dkan_datastore_api_resource_help() {
  return t('Search a datastore table. :param resource_id: id or alias of the data that is going to be selected.');
}

/**
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function _dkan_datastore_api_datastore_create($file) {

  $file = _services_arg_value($file, 'file');

  // If the file data or filename is empty then bail.
  if (!isset($file['file']) || empty($file['filename'])) {
    return services_error(t("Missing data the file upload can not be completed"), 500);
  }

  $file_saved = process_file_argument($file);

  if ($file_saved) {
    $datastore = dkan_datastore_go();
    if ($datastore) {
      if ($datastore->createByFile($file_saved->uri, FALSE)) {

        $result = new stdClass();
        $result->result = 'success';
        $result->datastore_id = $datastore->node->uuid;
        $result->node_id = $datastore->node->nid;
        return $result;
      }
    }
  }
  else {
    return services_error(t('The store could not be created.'));
  }
}

/**
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function _dkan_datastore_api_datastore_create_raw() {

  $validators = array(
    'file_validate_extensions' => array(),
    'file_validate_size' => array(),
  );

  foreach ($_FILES['files']['name'] as $field_name => $file_name) {
    $file = file_save_upload($field_name, $validators, file_default_scheme() . "://");

    if (!empty($file->fid)) {
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);

      // Required to be able to reference this file.
      file_usage_add($file, 'dkan_datastore_api', 'files', $file->fid);

      $datastore = dkan_datastore_go();
      if ($datastore) {
        if ($datastore->createByFile($file->uri, FALSE)) {

          $result = new stdClass();
          $result->result = 'success';
          $result->datastore_id = $datastore->node->uuid;
          $result->node_id = $datastore->node->nid;
          return $result;
        }
      }
    }
    else {
      return services_error(t('An unknown error occured'), 500);
    }
  }

  return services_error(t('An unknown error occured'), 500);
}

/**
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function _dkan_datastore_api_datastore_update($id, $file) {

  $file = _services_arg_value($file, 'file');

  if (!isset($file['file']) || empty($file['filename'])) {
    return services_error(t("The file is missing or empty."), 500);
  }

  $file_saved = process_file_argument($file);

  if ($file_saved) {
    $datastore = dkan_datastore_go($id);
    if ($datastore) {
      if ($datastore->updateByFile($file_saved->uri, FALSE)) {

        $result = new stdClass();
        $result->result = 'success';
        $result->datastore_id = $datastore->node->uuid;
        $result->node_id = $datastore->node->nid;
        return $result;
      }
    }
  }
  else {
    return services_error(t('The store could not be updated.'));
  }
}

/**
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function _dkan_datastore_api_datastore_update_raw($id) {

  $validators = array(
    'file_validate_extensions' => array(),
    'file_validate_size' => array(),
  );

  foreach ($_FILES['files']['name'] as $field_name => $file_name) {
    $file = file_save_upload($field_name, $validators, file_default_scheme() . "://");

    if (!empty($file->fid)) {
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);

      file_usage_add($file, 'dkan_datastore_api', 'files', $file->fid);

      $datastore = dkan_datastore_go($id);
      if ($datastore) {
        if ($datastore->updateByFile($file->uri, FALSE)) {

          $result = new stdClass();
          $result->result = 'success';
          $result->datastore_id = $datastore->node->uuid;
          $result->node_id = $datastore->node->nid;
          return $result;
        }
      }
    }
    else {
      return services_error(t('The store could not be updated.'));
    }
  }

  return services_error(t('An unknown error occured'), 500);
}

/**
 * For arguments, see: dkan_datastore_api_services_resources().
 */
function _dkan_datastore_api_datastore_file_delete($id) {

  $datastore = dkan_datastore_go($id);
  if ($datastore) {
    if ($datastore->deleteFile()) {

      $result = new stdClass();
      $result->result = 'success';
      $result->datastore_id = $datastore->node->uuid;
      $result->node_id = $datastore->node->nid;
      return $result;
    }
  }
}

/**
 * Saves the received file.
 */
function process_file_argument($file) {

  if (!isset($file['file']) || empty($file['filename'])) {
    return FALSE;
  }

  if (empty($file['filepath'])) {
    $file['filepath'] = file_default_scheme() . '://' . $file['filename'];
  }
  $dir = drupal_dirname($file['filepath']);

  if (!file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    return FALSE;
  }

  if (!$file_saved = file_save_data(base64_decode($file['file']), $file['filepath'], FILE_EXISTS_RENAME)) {
    return FALSE;
  }

  if (isset($file['status']) && $file['status'] == 0) {
    $file_saved->status = FILE_STATUS_PERMANENT;
    file_save($file_saved);
  }

  file_usage_add($file_saved, 'dkan_datastore_api', 'files', $file_saved->fid);

  return $file_saved;
}

function dkan_datastore_api_debug($data_select) {
  return array('sql' => (string)$data_select);
}
