<?php

/**
 * @file
 * Enables database csv imports.
 */

define('DKAN_DATASTORE_FAST_IMPORT_DKAN_DATASTORE_BATCH_IMPORT', 0);
define('DKAN_DATASTORE_FAST_IMPORT_DKAN_DATASTORE_FAST_IMPORT', 1);
define('DKAN_DATASTORE_FAST_IMPORT_DKAN_DATASTORE_DYNAMIC_IMPORT', 2);

/**
 * Implements hook_menu().
 */
function dkan_datastore_fast_import_menu() {
  $items['admin/dkan/datastore'] = array(
    'title' => 'DKAN Datastore',
    'description' => 'Settings for DKAN Datastore.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkan_datastore_fast_import_settings'),
    'access arguments' => array('manage datastore settings'),
  );

  return $items;
}

/**
 * Check database is set with pdo flags.
 */
function dkan_datastore_check_database() {
  global $databases;
  $target = Database::getConnection()->getTarget();
  $key = Database::getConnection()->getKey();
  $database = $databases[$target][$key];

  if (!isset($database['pdo'])) {
    drupal_set_message(t('Required PDO flags for dkan_datastore_fast_import were not found. This module requires PDO::MYSQL_ATTR_LOCAL_INFILE and PDO::MYSQL_ATTR_USE_BUFFERED_QUERY'), 'error', FALSE);
  }
  else {

    $infile_enabled = array_key_exists(PDO::MYSQL_ATTR_LOCAL_INFILE, $database['pdo']) && $database['pdo'][PDO::MYSQL_ATTR_LOCAL_INFILE];
    if (!$infile_enabled) {
      drupal_set_message(t('Required PDO flag for dkan_datastore_fast_import were not found. This module requires PDO::MYSQL_ATTR_LOCAL_INFILE'), 'error', FALSE);
    }

    $buffered_query_enabled = array_key_exists(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, $database['pdo']) && $database['pdo'][PDO::MYSQL_ATTR_USE_BUFFERED_QUERY];
    if (!$buffered_query_enabled) {
      drupal_set_message(t('Required PDO flag for dkan_datastore_fast_import were not found. This module requires PDO::MYSQL_ATTR_USE_BUFFERED_QUERY'), 'error', FALSE);
    }

  }
}

/**
 * Settings form.
 */
function dkan_datastore_fast_import_settings() {
  dkan_datastore_check_database();
  $form = array();
  $options = array(
    DKAN_DATASTORE_FAST_IMPORT_DKAN_DATASTORE_BATCH_IMPORT => t('Use regular import as default (BATCH)'),
    DKAN_DATASTORE_FAST_IMPORT_DKAN_DATASTORE_FAST_IMPORT => t('Use fast import as default (LOAD DATA)'),
    DKAN_DATASTORE_FAST_IMPORT_DKAN_DATASTORE_DYNAMIC_IMPORT => t('Use fast import for files with a weight over:'),
  );

  $form['dkan_datastore_fast_import_selection'] = array(
    '#type' => 'radios',
    '#title' => t('Fast Import Selection'),
    '#options' => $options,
    '#default_value' => variable_get('dkan_datastore_fast_import_selection', 0),
  );

  $form['dkan_datastore_fast_import_selection_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('File size threshold'),
    '#size' => 50,
    '#default_value' => variable_get('dkan_datastore_fast_import_selection_threshold', DkanDatastoreFastImport::FAST_IMPORT_THRESHOLD_DEFAULT),
    '#description' => '',
    '#states' => array(
      'visible' => array(
        ':input[name="dkan_datastore_fast_import_selection"]' => array('value' => DKAN_DATASTORE_FAST_IMPORT_DKAN_DATASTORE_DYNAMIC_IMPORT),
      ),
    ),
  );

  $options = array(
    'load_data_local_infile' => t('LOAD DATA LOCAL INFILE'),
    'load_data_infile' => t('LOAD DATA INFILE'),
  );
  $form['dkan_datastore_load_data_type'] = array(
    '#type' => 'radios',
    '#title' => t('Load Data Statement'),
    '#options' => $options,
    '#description' => t('Choose the version of load data you want to use. This depends on your hosting configuration.'),
    '#default_value' => variable_get('dkan_datastore_load_data_type', 'load_data_local_infile'),
    '#states' => array(
      'invisible' => array(
        ':input[name="dkan_datastore_fast_import_selection"]' => array('value' => DKAN_DATASTORE_FAST_IMPORT_DKAN_DATASTORE_BATCH_IMPORT),
      ),
    ),
  );

  $form['queue_filesize_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Queue Filesize Threshold'),
    '#size' => 50,
    '#default_value' => variable_get('queue_filesize_threshold', DkanDatastoreFastImport::QUEUE_FILESIZE_THRESHOLD_DEFAULT),
    '#description' => 'You need to setup a cron to run periodically "drush queue-run dkan_datastore_queue". If not, files will not be imported into the datastore.',
    '#states' => array(
      'invisible' => array(
        ':input[name="dkan_datastore_fast_import_selection"]' => array('value' => DKAN_DATASTORE_FAST_IMPORT_DKAN_DATASTORE_BATCH_IMPORT),
      ),
    ),
  );
  $form['#submit'][] = 'dkan_datastore_fast_import_settings_submit';

  return system_settings_form($form);
}

/**
 * Settings submit callback.
 */
function dkan_datastore_fast_import_settings_submit($form, &$form_state) {
  $fast_import_selection = $form_state['values']['dkan_datastore_fast_import_selection'];
  $class = ($fast_import_selection != DKAN_DATASTORE_FAST_IMPORT_DKAN_DATASTORE_BATCH_IMPORT) ? 'DkanDatastoreFastImport' : 'DkanDatastoreFastImport';
  variable_set('dkan_datastore_class', $class);
}

/**
 * Get the datastore queue name.
 */
function dkan_datastore_fast_import_queue_name() {
  return 'dkan_datastore_fast_import_queue';
}

/**
 * Implements hook_cron_queue_info().
 */
function dkan_datastore_fast_import_cron_queue_info() {
  return array(
    dkan_datastore_fast_import_queue_name() => array(
      'worker callback' => 'dkan_datastore_fast_import_import_queue_worker',
      'skip on cron' => TRUE,
      'time' => 600,
    ),
  );
}

/**
 * Get header names as sql variables.
 */
function dkan_datastore_fast_import_get_fields_as_vars($headers) {
  $vars = array();
  foreach ($headers as $header) {
    $vars[] = '@v' . $header;
  }
  return $vars;
}

/**
 * Queue worker for dkan fast imports.
 */
function dkan_datastore_fast_import_import_queue_worker($item) {
  dkan_datastore_fast_import_import($item['source'], $item['node'], $item['table'], $item['config']);
}
