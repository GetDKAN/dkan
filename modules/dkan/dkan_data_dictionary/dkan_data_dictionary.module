<?php

/**
 * @file
 * Code for the DKAN Data Dictionary feature.
 */

include_once 'dkan_data_dictionary.features.inc';

use Dkan\DataDictionary\Resource;
use Dkan\DataDictionary\DataDictionaryBase;

/**
 * Implements hook_menu().
 */
function dkan_data_dictionary_menu() {
  $items = array();

  $items['node/%node/dictionary/reports'] = array(
    'title' => 'Validation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dkan_data_dictionary_resource_report_form', 1),
    'access callback' => 'dkan_data_dictionary_access',
    'access arguments' => array('view', 1),
    'file' => 'dkan_data_dictionary.pages.inc',
    'weight' => '15',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function dkan_data_dictionary_permission() {
  return array(
    'view data_dictionary report' => array(
      'title' => t('view data_dictionary report'),
    ),

    'validate data_dictionary' => array(
      'title' => t('validate resource against data_dictionary'),
    ),
  );
}

/**
 *
 */
function dkan_data_dictionary_supported_bundles() {
  return array(
    'resource',
  );
}

/**
 * Access callback for DKAN data_dictionary operations.
 */
function dkan_data_dictionary_access($op, $node, $account = NULL) {
  if (!in_array($node->type, dkan_data_dictionary_supported_bundles())) {
      watchdog(
        'dkan_data_dictionary',
        "Node \"@node_title\" [@nid] does not support Data Dictionaries.",
        array(
          '@nid' => $node->nid,
          '@node_title' => $node->title,
        ),
        WATCHDOG_DEBUG
      );
      return FALSE;
  }

  try {
    $resource = Resource::createFromDrupalNode($node);
    $dataDict_machinename = $resource->getDataDictSchemaSpec();
    $dataDict = dkan_data_dictionary_dictionary_load($dataDict_machinename);

    if (empty($dataDict)) {
      watchdog(
        'dkan_data_dictionary',
        "Node \"@node_title\" [@nid] Data Dictionary specification is empty.",
        array(
          '@nid' => $node->nid,
          '@nid' => $node->title,
        ),
        WATCHDOG_DEBUG
      );
      return FALSE;
    }
    elseif (!($dataDict instanceof DataDictionaryBase)) {
      watchdog(
        'dkan_data_dictionary',
        "Node \"@node_title\" [@nid] Data Dictionary is not an instance of DataDictionaryBase.",
        array(
          '@nid' => $node->nid,
          '@nid' => $node->title,
        ),
        WATCHDOG_DEBUG
      );
      return FALSE;
    }
    elseif (!$dataDict->hasManager()) {
      watchdog(
        'dkan_data_dictionary',
        "Node \"@node_title\" [@nid] Data Dictionary does not have a Validation Manager.",
        array(
          '@nid' => $node->nid,
          '@nid' => $node->title,
        ),
        WATCHDOG_DEBUG
      );
      return FALSE;
    }
  }
  catch (\Exception $e) {
    watchdog(
      'dkan_data_dictionary',
      "Failed to instanciate Resource object from node \"@nid\"",
      array('@nid' => $node->nid),
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  global $user;
  if (!isset($account)) {
    $account = $user;
  }

  switch ($op) {
    case 'view':
      // TODO.
      return user_access('view data_dictionary report', $account)
        && node_access('view', $node, $account);

    case 'manage':
      // Validation operations require the 'manage data_dictionary' permission.
      return user_access('validate data_dictionary', $account)
        && node_access('update', $node, $account);
  }
}

/**
 * Implements hook_xautoload().
 */
function dkan_data_dictionary_xautoload($adapter) {
  $adapter->absolute()->addPsr4(
    'Dkan\DataDictionary\\',
    drupal_get_path("module", "dkan_data_dictionary") . '/src'
  );
}

/**
 * Get dictionaries info.
 */
function dkan_data_dictionary_dictionaries_info() {
  // TODO Add caching.
  $dictionariesInfo = module_invoke_all("dkan_data_dictionaries");

  // Allow alteration by third party modules.
  drupal_alter('dkan_data_dictionaries_alter',
    $dictionariesInfo
  );

  return $dictionariesInfo;
}

/**
 * Load Data Dictionary from machine name.
 */
function dkan_data_dictionary_dictionary_load($dkan_datadict_machinename) {
  $dkan_datadict_selected = NULL;

  foreach (dkan_data_dictionary_dictionaries_info() as $dkan_datadict) {
    if ($dkan_datadict->getMachineName() == $dkan_datadict_machinename) {
      $dkan_datadict_selected = $dkan_datadict;
      break;
    }
  }

  return $dkan_datadict_selected;
}

/**
 * Validate a data dictionary.
 */
function dkan_data_dictionary_validate($dkan_datadict_machinename, $dict_descriptor) {
  $valid = FALSE;
  $errors = array();

  $dataDictionary = dkan_data_dictionary_dictionary_load($dkan_datadict_machinename);

  if (empty($dataDictionary)) {
    watchdog(
      'dkan_data_dictionary',
      'Failed to load Data Dictionary "@data_dict"',
      array('@data_dict' => $dkan_datadict_machinename),
      WATCHDOG_ERROR
    );

    $errors[] = t('Schema selected cannot be found.');
    return array($valid, $errors);
  }

  $errors = $dataDictionary->validateSchema($dict_descriptor);

  if (empty($errors)) {
    $valid = TRUE;
  }

  return array($valid, $errors);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dkan_data_dictionary_form_resource_node_form_alter(&$form, &$form_state) {
  if ($form['#id'] == 'resource-node-form') {
    $form['#validate'][] = 'dkan_data_dictionary_validate_resource';
  }
}

/**
 * Custom validation function for resource node.
 */
function dkan_data_dictionary_validate_resource($form, &$form_state) {
  $language = $form_state['values']['language'];

  // We expect only one Dictionary type selected.
  $describedby_spec = $form_state['values']['field_describedby_spec'][$language][0]['value'];

  // Skip if no data dictionary specification is selected.
  if (empty($describedby_spec)) {
    return;
  }

  // At this point, a data dictionary schema type is selected and we need the
  // associated schema content. Use file if uploaded, then check for text
  // field. Expect a single item to be provided by the file upload and the
  // text field.
  $schema_textfield = $form_state['values']['field_describedby_schema_text'][$language][0]['value'];

  if (empty($schema_textfield)) {
    $schema_textfield = FALSE;
  }

  $schema_file = $form_state['values']['field_describedby_schema_upload'][$language][0];

  if (isset($schema_file['fid']) && $schema_file['fid'] == 0) {
    $schema_file = FALSE;
  }

  if (empty($schema_file) && empty($schema_textfield)) {
    form_set_error('field_describedby_spec', t('A Data Dictionary Specification is selected but no Schema provided.'));
    return;
  }
  elseif (!empty($schema_file)) {
    $schema_file = file_load($schema_file['fid']);

    list($valid, $errors) = dkan_data_dictionary_validate($describedby_spec, $schema_file->uri);
    $form_item = 'field_describedby_schema_upload';
  }
  elseif (!empty($schema_textfield)) {
    list($valid, $errors) = dkan_data_dictionary_validate($describedby_spec, $schema_textfield);
    $form_item = 'field_describedby_schema_text';
  }

  if ($valid != TRUE) {
    foreach ($errors as $error) {
      form_set_error($form_item, $error);
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function dkan_data_dictionary_field_formatter_info() {
  return array(
    'table_data_dictionary' => array(
      'label' => t('Data Dictionary Table'),
      'field types' => array('text', 'text_long'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function dkan_data_dictionary_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();

  $resource = entity_metadata_wrapper($entity_type, $entity);

  $describedby_spec = $resource->field_describedby_spec->value();

  if (empty($describedby_spec)) {
    watchdog(
      'dkan_data_dictionary',
      'field_describedby_spec empty, no data dictionary to display.',
      array(),
      WATCHDOG_DEBUG
    );
    return array();
  }

  $dataDictionary = dkan_data_dictionary_dictionary_load($describedby_spec);

  if (empty($dataDictionary)) {
    watchdog(
      'dkan_data_dictionary',
      'Failed to load DataDictionaryBase object for node "@nid" with describedby_spec "@describedby_spec"',
      array('@nid' => $entity->nid, '@describedby_spec' => $describedby_spec),
      WATCHDOG_ERROR
    );
    return array();
  }

  foreach ($items as $delta => $item) {
    $elements[$delta] = $dataDictionary::dictionaryFormatterView($langcode, $item, $display);
  }

  return $elements;
}

/**
 * Allowed_values_function config for field_describedby_spec.
 */
function dkan_data_dictionary_field_describedby_spec_allowed_values() {
  $dictionaries = dkan_data_dictionary_dictionaries_info();

  $allowed_values = array();

  foreach ($dictionaries as $dicctionary) {
    $allowed_values[$dicctionary->getMachineName()] = $dicctionary->getLabel();
  }

  return $allowed_values;
}
