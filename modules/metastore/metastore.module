<?php

/**
 * @file
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\common\Resource;
use Drupal\Core\Entity\EntityInterface;
use Drupal\metastore\Events\DatasetUpdate;
use Drupal\metastore\Storage\Data as DataStorage;
use Drupal\metastore\Storage\MetastoreEntityStorageInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_load().
 */
function metastore_entity_load(array $entities) {
  foreach($entities as $entity) {
    metastore_data_node_lifecycle($entity, "load");
  }
}

/**
 * Implements hook_entity_presave().
 */
function metastore_entity_presave(EntityInterface $entity) {
  metastore_data_node_lifecycle($entity, "presave");
}

/**
 * Implements hook_entity_predelete().
 */
function metastore_node_predelete(EntityInterface $entity) {
  metastore_data_node_lifecycle($entity, "predelete");
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function metastore_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($bundle === 'data') {
    if (isset($fields['field_json_metadata'])) {
      $fields['field_json_metadata']->addConstraint('ProperJson', []);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function metastore_node_update(NodeInterface $node) {
  purgeResources($node);
}

/**
 * Purge resources (if unneeded) of any updated dataset.
 */
function purgeResources(NodeInterface $node) {
  if ($node->bundle() == 'data'
      && $node->get('field_data_type')->getString() == 'dataset'
  ) {
    \Drupal::service('event_dispatcher')->dispatch(
      DataStorage::EVENT_DATASET_UPDATE,
      new DatasetUpdate($node)
    );
  }
}

/**
 * Helper method to retrieve the static value for a resource's display.
 */
function resource_mapper_display() {
  return drupal_static('metastore_resource_mapper_display', Resource::DEFAULT_SOURCE_PERSPECTIVE);
}

/**
 * Helper method to retrieve the static value for a resource's revisioning.
 */
function resource_mapper_new_revision() {
  return drupal_static('metastore_resource_mapper_new_revision', 0);
}

/**
 * Create a LifeCycle object.
 *
 * @param Drupal\Core\Entity\ContentEntityInterface $entity
 *
 * @return Drupal\metastore\LifeCycle\Data
 *   LifeCycle object.
 */
function metastore_data_node_lifecycle(EntityInterface $entity, string $hook) {

  if (metastore_entity_is_valid_item($entity)) {
    $itemFactory = \Drupal::service('dkan.metastore.metastore_item_factory');
    $metastoreItem = $itemFactory->wrap($entity);
    $lifeCycle = \Drupal::service('dkan.metastore.lifecycle');
    $lifeCycle->setFileMapper(\Drupal::service('dkan.metastore.resource_mapper'));
    $lifeCycle->$hook($metastoreItem);  
  }

  return FALSE;
}

/**
 * Check if the entity is part of the metastore.
 *
 * @param Drupal\Core\Entity\ContentEntityInterface $entity
 *   A Drupal content entity.
 * 
 * @return bool
 *   Returns true if the entity is used by the metastore.
 */
function metastore_entity_is_valid_item(EntityInterface $entity) {
  $storageFactory = \Drupal::service('dkan.metastore.storage');
  $storageClass = $storageFactory::getStorageClass();

  // If the storage class used implements the entity storage interface, continue.
  if (!is_a($storageClass, MetastoreEntityStorageInterface::class, true)) {
    return FALSE;
  }

  // If the type and bundle are correct, return true.
  if ($entity->getEntityTypeId() != $storageClass::getEntityType()) {
    return FALSE;
  }
  if (in_array($entity->bundle(), $storageClass::getBundles())) {
    return TRUE;
  }
}

/**
 * Implements hook_form_alter().
 */
function metastore_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (isset($form['field_json_metadata']['widget'][0]['value']['#default_value'])) {
    $json = $form['field_json_metadata']['widget'][0]['value']['#default_value'];
    if (empty($json)) {
      return;
    }
    $object = json_decode($json);
    $object = \Drupal\metastore\Service::removeReferences($object);
    $form['field_json_metadata']['widget'][0]['value']['#default_value'] = json_encode($object);
  }
}

/**
 * Implements hook_entity_view_alter.
 */
function metastore_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if (isset($build['field_json_metadata'][0]['#context']['value'])) {
    $json = $build['field_json_metadata'][0]['#context']['value'];
    if (empty($json)) {
      return;
    }
    $object = json_decode($json);
    $object = \Drupal\metastore\Service::removeReferences($object);
    $build['field_json_metadata'][0]['#context']['value'] = json_encode($object);
  }
}
