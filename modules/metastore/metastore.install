<?php

/**
 * @file
 */

/**
 * Import config from metastore to use JSON Form Widget.
 */
function metastore_update_8002() {
  $config_path = \Drupal::service('extension.list.module')->getPath('metastore') . '/config/optional';
  $container = \Drupal::getContainer();
  $drush_import = $container->get('config.import.commands');
  $options = [
    'source' => $config_path,
    'partial' => true
  ];
  $result = $drush_import->import(NULL, $options);
}

/**
 * Import config to change visibility of the preveiw button on data form.
 */
function metastore_update_8003() {
  $config = \Drupal::service('config.factory')->getEditable('node.type.data');
  $config->set('preview_mode', 0)->save();
}

/**
 * Add archived state and transitions to dkan publishing workflow config.
 */
function metastore_update_8004() {
  $workflow = \Drupal::service('config.factory')->getEditable('workflows.workflow.dkan_publishing');

  $states = $workflow->get('type_settings.states');
  $states["archived"] = [
    "label" => "Archived",
    "published" => false,
    "default_revision" => true,
    "weight" => 3
  ];

  $transitions = $workflow->get('type_settings.transitions');
  $transitions["archive"] = [
    "label" => "Archive",
    "from" => ["published"],
    "to" => "archived",
    "weight" => 3
  ];
  $transitions["restore"] = [
    "label" => "Restore",
    "from" => ["archived"],
    "to" => "published",
    "weight" => 4
  ];

  $workflow->set('type_settings.states', $states);
  $workflow->set('type_settings.transitions', $transitions);
  $workflow->save(TRUE);

  drupal_flush_all_caches();
}

/**
 * Add hidden state and transitions to dkan publishing workflow config.
 */
function metastore_update_8005() {
  $workflow_settings = \Drupal::service('config.factory')->getEditable('workflows.workflow.dkan_publishing');

  $states = $workflow_settings->get('type_settings.states');
  $states['hidden'] = [
    'label' => 'Published (hidden)',
    'published' => TRUE,
    'default_revision' => TRUE,
    'weight' => 4
  ];

  $transitions = $workflow_settings->get('type_settings.transitions');
  $hidable = ['archive', 'create_new_draft', 'orphan', 'publish'];
  foreach ($hidable as $state) {
    $transitions[$state]['from'][] = 'hidden';
  }
  $transitions['hidden'] = [
    'label' => 'Remove from search indexing',
    'from' => [
      'draft',
      'hidden',
      'published',
    ],
    'to' => 'hidden',
    'weight' => 5,
  ];

  $workflow_settings->set('type_settings.states', $states);
  $workflow_settings->set('type_settings.transitions', $transitions);
  $workflow_settings->save();
}

/**
 * Add hidden and unpublished filters to the dkan search_api index.
 */
function metastore_update_8006() {
  $index_settings = \Drupal::service('config.factory')->getEditable('search_api.index.dkan');

  $index_settings->set('processor_settings.dkan_dataset_filter_hidden', []);
  $index_settings->set('processor_settings.dkan_dataset_filter_unpublished', []);
  $index_settings->save();
}

/**
 * Restore the preveiw button on data form.
 */
function metastore_update_8007() {
  $config = \Drupal::service('config.factory')->getEditable('node.type.data');
  $config->set('preview_mode', 1)->save();
}

/**
 * Ensure the entity manager knows about resource_mapping entities.
 *
 * Note: The dkan_metastore_resource_mapper table might already exist in your
 * database. The resource_mapping entity is designed to use it without
 * modification.
 */
function metastore_update_8008(&$sandbox) {
  \Drupal::entityTypeManager()->clearCachedDefinitions();
  \Drupal::entityDefinitionUpdateManager()
    ->installEntityType(\Drupal::entityTypeManager()->getDefinition('resource_mapping'));
}

/**
 * Update existing data dictionary nodes to use corrected schema.
 */
function metastore_update_8009() {
  $ids = \Drupal::service('dkan.metastore.service')->getIdentifiers('data-dictionary');
  $count = 0;
  foreach ($ids as $id) {
    $dict = \Drupal::service('dkan.metastore.metastore_item_factory')->getInstance($id);
    $metadata = $dict->getMetadata();
    if (!isset($metadata->data->title) && isset($metadata->title)) {
      $metadata->data->title = $metadata->title;
      unset($metadata->title);
    }
    $dict->setMetadata($metadata);
    $dict->save();
    $count++;
  }
  return t("Updated $count dictionaries. If you have overridden DKAN's core schemas,
    you must update your site's data dictionary schema after this update. Copy
    modules/contrib/dkan/schema/collections/data-dictionary.json over you local
    site version before attempting to read or write any data dictionaries.");
}
