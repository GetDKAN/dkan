<?php

/**
 * @file
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function metastore_admin_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['#id'])
    && $form['#id'] == 'views-exposed-form-dkan-dataset-content-page-1'
    || $form['#id'] == 'views-exposed-form-dkan-dataset-content-page-2') {
    $schemaRetriever = \Drupal::service('dkan.metastore.schema_retriever');
    $schemaIds = array_filter($schemaRetriever->getAllIds(), function ($schemaId) {
      return substr($schemaId, -3) != '.ui';
    });
    $options = array_combine($schemaIds, $schemaIds);
    $options = array_merge(['' => t('- Any -')], $options);

    $form['data-type'] = [
      '#title' => new TranslatableMarkup('Data Type'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => 'dataset',
    ];
  }
}

/**
 * Implements template_preprocess_views_view_fields().
 */
function metastore_admin_preprocess_views_view_field(&$vars) {

  if (isset($vars['view']) && ($vars['view']->id() == 'dkan_dataset_content')) {
    // To access current row entity.
    $entity = $vars['row']->_entity;
    $entity_id = $entity->id();
    $entity_uuid = $entity->uuid();

    // Nodes without field_data_type should be skipped.
    if (!isset($entity->field_json_metadata)) {
      return;
    }

    // Modify data titles to display the metadata title values rather than uuids.
    $data = json_decode($entity->field_json_metadata->value);
    $title = (array) $data;

    if ($vars['field']->field == 'title') {
      switch ($entity->field_data_type->value) {
        case 'keyword':
        case 'theme':
          $vars['output'] = [
            '#markup' => Markup::create(
              metastore_admin_create_text_link($title['data'], 'internal:/node/' . $entity_id)
            ),
          ];
          break;

        case 'publisher':
          $name = (array) $title['data'];

          $vars['output'] = [
            '#markup' => Markup::create(
              metastore_admin_create_text_link($name['name'], 'internal:/node/' . $entity_id)
            ),
          ];
          break;

        case 'distribution':
          $dist = (array) $title['data'];
          $mediatype = isset($dist['mediaType']) ? $entity_id . ' ' . $dist['mediaType'] : '';
          $format = isset($dist['format']) ? $entity_id . ' ' . $dist['format'] : $mediatype;
          $title = $dist['title'] ?? $format;

          $vars['output'] = [
            '#markup' => Markup::create(
              metastore_admin_create_text_link($title, 'internal:/node/' . $entity_id)
            ),
          ];
          break;

        case 'data-dictionary':
          $vars['output'] = [
            '#markup' => Markup::create(
              metastore_admin_create_text_link($title['data']->title, 'internal:/api/1/metastore/schemas/data-dictionary/items/' . $entity_uuid)
            ),
          ];
          break;
      }
    }
  }
  // Check if the frontend module is enabled. If not, dataset titles
  // should link to the drupal node rather than the REACT frontend.
  if (isset($vars['view'])
    && ($vars['view']->id() == 'dkan_dataset_content')
    && ($vars['view']->current_display == 'page_1')) {

    $entity = $vars['row']->_entity;
    $entity_id = $entity->id();
    $entity_uuid = $entity->uuid();

    $moduleExists = \Drupal::moduleHandler()->moduleExists('dkan_js_frontend');
    $title = $entity->title->value;

    if ($vars['field']->field == 'title'
      && $entity->field_data_type->value == 'dataset'
      && !$moduleExists) {

      $vars['output'] = [
        '#markup' => Markup::create(
          metastore_admin_create_text_link($title, 'internal:/node/' . $entity_id)
        ),
      ];
    }
    elseif ($vars['field']->field == 'title'
      && $entity->field_data_type->value == 'dataset'
      && $moduleExists) {

      $vars['output'] = [
        '#markup' => Markup::create(
          metastore_admin_create_text_link($title, 'internal:/dataset/' . $entity_uuid)
        ),
      ];
    }
  }
}

/**
 * Create a text link.
 */
function metastore_admin_create_text_link($linkText, $internalUri) {
  $url = Url::fromUri($internalUri);
  $link = Link::fromTextAndUrl($linkText, $url);
  return $link->toString();
}

/**
 * Add custom submit handler to redirect to datasets page.
 */
function metastore_admin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === "node_data_form" || $form_id === "node_data_edit_form") {
    $form['actions']['submit']['#submit'][] = 'metastore_admin_form_submit';
  }
}

/**
 * Submit handler to redirect after node save to dkan dataset content page.
 */
function metastore_admin_form_submit($form, FormStateInterface &$form_state) {
  $form_state->setRedirect('view.dkan_dataset_content.page_1');
  return;
}

/*
 * Implements hook_toolbar_alter()
 */
function metastore_admin_toolbar_alter(&$items) {
  $items['administration']['#attached']['library'][] = 'metastore_admin/toolbar-icon';
}
