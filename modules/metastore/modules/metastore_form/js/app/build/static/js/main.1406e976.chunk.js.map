{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","tempUUID","isNew","useHistory","useState","identifier","setIdentifier","hasBeenUpdated","setHasBeenUpdated","message","setMessage","schema","setSchema","uiSchema","setUiSchema","formData","setFormData","submitDataset","event","cleanData","data","Object","keys","forEach","key","isNaN","toString","cleanTheData","length","axios","put","then","catch","error","response","post","id","window","scrollTo","useEffect","a","get","required","filter","item","properties","minLength","response2","fetchSchema","fetch","toast","success","fields","DescriptionField","description","className","dangerouslySetInnerHTML","__html","timerExpires","position","pauseOnHover","intent","type","onClick","location","href","autoComplete","transformErrors","errors","map","name","property","includes","onSubmit","e","onError","console","Boolean","hostname","match","uuid","drupalSettings","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1406e976.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport Form from \"@rjsf/core\";\nimport 'bootstrap-lite/lib.bootstrap.css';\nimport ToastBox, { toast } from \"react-toastbox\";\nimport './App.scss';\nimport axios from \"axios\";\n\nfunction App({ tempUUID, isNew }) {\n  const baseUrl = \"\";\n\n  let history = useHistory();\n\n  const [identifier, setIdentifier] = useState(null);\n  const [hasBeenUpdated, setHasBeenUpdated] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [schema, setSchema] = useState({});\n  const [uiSchema, setUiSchema] = useState({});\n  const [formData, setFormData] = useState({});\n\n\n  useEffect(() => {\n    async function fetchSchema() {\n      const response = await axios.get(baseUrl + '/api/1/metastore/schemas/dataset').then(\n        (response) => {\n          let data = response.data;\n          // Alter the schema to override the 'required' status on identifier.\n          data.required = data.required.filter(item => item !== \"identifier\" );\n          delete data.properties.identifier.minLength;\n          setSchema(data);\n        }\n      );\n\n      const response2 = await axios.get(baseUrl + '/api/1/metastore/schemas/dataset.ui');\n      setUiSchema(response2.data);\n\n      setIdentifier(tempUUID.toString());\n    }\n\n    fetchSchema();\n  }, []);\n\n  useEffect(() => {\n    async function fetch() {\n      setHasBeenUpdated(false);\n      if (identifier && !isNew) {\n        const response = await axios.get(baseUrl + '/api/1/metastore/schemas/dataset/items/' + identifier);\n        setFormData(response.data);\n      }\n    }\n\n    fetch();\n  }, [identifier, hasBeenUpdated]);\n\n  useEffect(() => {\n    if (message.length > 0) {\n      toast.success(message);\n    }\n  }, [message]);\n\n  function cleanTheData(data) {\n    let cleanData = {};\n    Object.keys(data).forEach((key) => {\n        if (isNaN(key)) {\n          cleanData[key] = data[key];\n        }\n      }\n    );\n    // Assign the uuid from drupalSettings to the identifier field.\n    if (!data.identifier) {\n      cleanData.identifier = tempUUID.toString();\n    }\n    return cleanData;\n  }\n\n  function submitDataset(event) {\n    const data = event.formData;\n    const cleanData = cleanTheData(data);\n\n    if (identifier.length > 0 && !isNew) {\n      axios.put(baseUrl + '/api/1/metastore/schemas/dataset/items/' + identifier, cleanData).then(\n        () => {\n          setHasBeenUpdated(true);\n          setMessage(\"The dataset with identifier \" + identifier + \" has been updated.\");\n        }\n      ).catch((error) => {\n        if (error.response) {\n          setMessage(error.response.data.message);\n        }\n      });\n    }\n    else {\n      axios.post(baseUrl + '/api/1/metastore/schemas/dataset/items', cleanData).then(\n        (response) => {\n          const id = response.data.identifier;\n          setIdentifier(id);\n          setMessage(\"A dataset with the identifier \" + id + \" has been created.\");\n        }\n      ).catch((error) => {\n        if (error.response) {\n          setMessage(error.response.data.message);\n        }\n      });\n    }\n    window.scrollTo(0,0);\n  }\n\n  const CustomDescriptionField = ({id, description}) => {\n    return <div className=\"dc-field-label\"  id={id} dangerouslySetInnerHTML={{__html: description}} />\n  };\n\n  const fields = {\n    DescriptionField: CustomDescriptionField\n  };\n\n  function transformErrors(errors) {\n    return errors.map(error => {\n      if (error.name === \"pattern\" && error.property === \".contactPoint.hasEmail\") {\n        error.message = \"Enter a valid email address.\";\n      }\n      if (error.name === \"pattern\" && error.property.includes(\".distribution\") && error.property.includes(\".isssued\")) {\n        error.message = \"Dates should be ISO 8601 of least resolution. In other words, as much of YYYY-MM-DDThh:mm:ss.sTZD as is relevant to this dataset.\";\n      }\n      return error;\n    });\n  }\n\n  return (\n    <>\n      <ToastBox\n        timerExpires={10000}\n        position=\"top-left\"\n        pauseOnHover={true}\n        intent=\"success\"\n      />\n      <button className=\"btn btn-default\" type=\"button\" onClick={event =>  window.location.href='/admin/content/datasets'}>Back to Datasets</button>\n      <Form\n        id=\"dc-json-editor\"\n        schema={schema}\n        fields={fields}\n        formData={formData}\n        uiSchema={uiSchema}\n        autoComplete=\"on\"\n        transformErrors={transformErrors}\n        onSubmit={ (e) => {\n          setMessage(\"\");\n          submitDataset(e);\n        } }\n        onError={(e) => { window.scrollTo(0,0); console.error(e);}}>\n        <div className=\"dc-form-actions\">\n          <button className=\"btn btn-success\" type=\"submit\">Submit</button>\n          <button className=\"btn btn-default\" type=\"button\" onClick={event =>  window.location.href='/admin/content/datasets'}>Cancel</button>\n        </div>\n      </Form>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\nconst uuid = window.drupalSettings.tempUUID;\nconst isNew = window.drupalSettings.isNew;\n\nReactDOM.render(<Router><App tempUUID={uuid} isNew={isNew} /></Router>, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}