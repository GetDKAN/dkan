<?php

use Drupal\Core\Entity\EntityInterface;

use Drupal\common\Exception\DataNodeLifeCycleEntityValidationException;
use Drupal\metastore\NodeWrapper\Data;

/**
 * Determine whether the supplied entity is a dataset.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity in question.
 *
 * @return bool
 *   Whether the entity is a dataset.
 */
function _metastore_search_is_dataset(EntityInterface $entity): bool {
  try {
    // Attempt to check this entity's data type.
    return (new Data($entity, \Drupal::entityTypeManager()))->getDataType() === 'dataset';
  }
  catch (DataNodeLifeCycleEntityValidationException $e) {
    // If the data object fails validation, the given entity is not a dataset.
    return FALSE;
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Track created datasets in the DKAN search api index.
 */
function metastore_search_entity_insert(EntityInterface $entity): void {
  // Ensure the entity in question is a dataset.
  // @todo Ensure it is not hidden or unpublished.
  if (!_metastore_search_is_dataset($entity)) {
    return;
  }

  $storage = \Drupal::service('entity_type.manager')->getStorage('search_api_index');
  $index = $storage->load('dkan');
  $index->trackItemsInserted('dkan_dataset', [$entity->uuid()]);
}

/**
 * Implements hook_entity_update().
 *
 * Track updated datasets in the DKAN search api index.
 */
function metastore_search_entity_update(EntityInterface $entity): void {
  // Ensure the entity in question is a dataset.
  if (!_metastore_search_is_dataset($entity)) {
    return;
  }

  $storage = \Drupal::service('entity_type.manager')->getStorage('search_api_index');
  $index = $storage->load('dkan');
  $index->trackItemsUpdated('dkan_dataset', [$entity->uuid()]);
}

/**
 * Implements hook_entity_delete().
 *
 * Track deleted datasets in the DKAN search api index.
 */
function metastore_search_entity_delete(EntityInterface $entity): void {
  // Ensure the entity in question is a dataset.
  if (!_metastore_search_is_dataset($entity)) {
    return;
  }

  $storage = \Drupal::service('entity_type.manager')->getStorage('search_api_index');
  $index = $storage->load('dkan');
  $index->trackItemsDeleted('dkan_dataset', [$entity->uuid()]);
}

/**
 * Implements hook_entity_extra_field_info().
 *
 * Expose Dataset properties as pseudo fields
 */
function metastore_search_entity_extra_field_info()
{
  $extra = [];

  $dataset = new \Drupal\metastore_search\ComplexData\Dataset('');
  foreach ($dataset->getProperties() as $property_key => $property) {
    if ($property instanceof \Drupal\Core\TypedData\TypedData) {
      $extra['node']['data']['display']['dataset_' . $property_key] = [
        'label' => t('Dataset property: @property', ['@property' => $property->getName()]),
        'weight' => 0,
        'visible' => FALSE
      ];
    }
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * output exposed dataset properties
 */
function metastore_search_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode)
{
  if ($entity instanceof \Drupal\node\Entity\Node && $entity->bundle() === 'data'
    && $entity->hasField('field_data_type')
    && !$entity->get('field_data_type')->isEmpty()
    && $entity->get('field_data_type')->value === 'dataset'
  ) {
    $dataset = new \Drupal\metastore_search\ComplexData\Dataset($entity->get('field_json_metadata')->value);
    foreach ($dataset->getProperties() as $property_key => $property) {
      if ($property instanceof \Drupal\Core\TypedData\TypedData) {
        if ($display->getComponent('dataset_' . $property_key)) {
          if ($property instanceof \Drupal\Core\TypedData\Plugin\DataType\ItemList) {
            foreach ($property->getValue() as $value) {
              $build['dataset_' . $property_key][] = [
                '#markup' => $value
              ];
            }
          }
          else {
            if (is_string($property->getValue())) {
              $build['dataset_' . $property_key] = [
                '#markup' => $property->getValue()
              ];
            }
          }
        }

      }
    }
  }
}
