<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\metastore\NodeWrapper\Data;

/**
 * Determine whether the supplied entity is a dataset.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity in question.
 *
 * @return bool
 *   Whether the entity is a dataset.
 */
function _is_dataset(EntityInterface $entity): bool {
  return $entity->getEntityTypeId() === 'node' && $entity->bundle() === 'data' && (new Data($entity))->getDataType() === 'dataset';
}

/**
 * Determine whether the supplied entity belongs to the hidden moderation state.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity in question.
 *
 * @return bool
 *   Whether the entity belongs to the hidden moderation state.
 */
function _is_hidden(EntityInterface $entity): bool {
  return ($entity->moderation_state->value ?? NULL) === 'hidden';
}

/**
 * Implements hook_entity_insert().
 *
 * Track created datasets in the DKAN search api index.
 */
function metastore_search_entity_insert(EntityInterface $entity): void {
  // Ensure the entity in question is a dataset and is not hidden.
  if (!_is_dataset($entity) || _is_hidden($entity)) {
    return;
  }

  $storage = \Drupal::service('entity_type.manager')->getStorage('search_api_index');
  $index = $storage->load('dkan');
  $index->trackItemsInserted('dkan_dataset', [$entity->uuid()]);
}

/**
 * Implements hook_entity_update().
 *
 * Track updated datasets in the DKAN search api index.
 */
function metastore_search_entity_update(EntityInterface $entity): void {
  // Ensure the entity in question is a dataset.
  if (!_is_dataset($entity)) {
    return;
  }

  $storage = \Drupal::service('entity_type.manager')->getStorage('search_api_index');
  $index = $storage->load('dkan');
  // Ensure newly hidden entities are not tracked in the DKAN search index.
  if (_is_hidden($entity)) {
    $index->trackItemsDeleted('dkan_dataset', [$entity->uuid()]);
  }
  else {
    $index->trackItemsUpdated('dkan_dataset', [$entity->uuid()]);
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Track deleted datasets in the DKAN search api index.
 */
function metastore_search_entity_delete(EntityInterface $entity): void {
  // Ensure the entity in question is a dataset.
  if (!_is_dataset($entity)) {
    return;
  }

  $storage = \Drupal::service('entity_type.manager')->getStorage('search_api_index');
  $index = $storage->load('dkan');
  $index->trackItemsDeleted('dkan_dataset', [$entity->uuid()]);
}
