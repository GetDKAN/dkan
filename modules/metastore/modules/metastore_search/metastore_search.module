<?php

use Drupal\Core\Entity\EntityInterface;

use Drupal\common\Exception\DataNodeLifeCycleEntityValidationException;
use Drupal\metastore\NodeWrapper\Data;

/**
 * Determine whether the supplied entity is a dataset.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity in question.
 *
 * @return bool
 *   Whether the entity is a dataset.
 */
function _metastore_search_is_dataset(EntityInterface $entity): bool {
  try {
    $data = new Data($entity, \Drupal::entityTypeManager());

    $config = \Drupal::configFactory();
    $processors = $config->get('search_api.index.dkan')->get('processor_settings');
    if (isset($processors['dkan_dataset_filter_unpublished'])) {
      // Only index published datasets.
      return ($data->getDataType() === 'dataset' && $data->getModerationState() === 'published');
    }
    else {
      return $data->getDataType() === 'dataset';
    }
  }
  catch (DataNodeLifeCycleEntityValidationException $e) {
    // If the data object fails validation, the given entity is not a dataset.
    return FALSE;
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Track created datasets in the DKAN search api index.
 */
function metastore_search_entity_insert(EntityInterface $entity): void {
  // Ensure the entity in question is a dataset and is not hidden or
  // unpublished.
  if (!_metastore_search_is_dataset($entity)) {
    return;
  }

  $storage = \Drupal::service('entity_type.manager')->getStorage('search_api_index');
  $index = $storage->load('dkan');
  $index->trackItemsInserted('dkan_dataset', [$entity->uuid()]);
}

/**
 * Implements hook_entity_update().
 *
 * Track updated datasets in the DKAN search api index.
 */
function metastore_search_entity_update(EntityInterface $entity): void {
  // Ensure the entity in question is a dataset.
  if (!_metastore_search_is_dataset($entity)) {
    return;
  }

  $storage = \Drupal::service('entity_type.manager')->getStorage('search_api_index');
  $index = $storage->load('dkan');
  $index->trackItemsUpdated('dkan_dataset', [$entity->uuid()]);
}

/**
 * Implements hook_entity_delete().
 *
 * Track deleted datasets in the DKAN search api index.
 */
function metastore_search_entity_delete(EntityInterface $entity): void {
  // Ensure the entity in question is a dataset.
  if (!_metastore_search_is_dataset($entity)) {
    return;
  }

  $storage = \Drupal::service('entity_type.manager')->getStorage('search_api_index');
  $index = $storage->load('dkan');
  $index->trackItemsDeleted('dkan_dataset', [$entity->uuid()]);
}
