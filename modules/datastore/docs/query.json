{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://getdkan.com/api/datastore.query.json",
    "title": "Datastore Query",
    "description": "Schema for DKAN datastore queries",
    "type": "object",
    "properties": {
        "resources": {
            "type": "array",
            "title": "Resources",
            "description": "Resources to query against and aliases. Usually you will add only one resource to this array, but if performing a join, list the primary resource first and then add resources to be used in the joins array.",
            "items": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "UUID of resource or distribution."
                    },
                    "alias": {
                        "type": "string",
                        "description": "Alias to use to refer to this resource elsewhere in the query."
                    }
                }
            }
        },
        "properties": {
            "type": "array",
            "items": {
                "anyOf": [
                    { "$ref": "#/definitions/resource" },
                    {
                        "type": "object",
                        "title": "Aliased property from specific resource",
                        "properties": {
                            "resource": { "$ref": "#/definitions/resource" },
                            "property": { "$ref": "#/definitions/property" },
                            "alias": { "type": "string" }
                        },
                        "required": [ "resource", "property" ]
                    },
                    {
                        "type": "object",
                        "title": "Aliased expression",
                        "properties": {
                            "expression": { "$ref": "#/definitions/expression" },
                            "alias": { "type": "string" }
                        },
                        "required": [ "expression", "alias" ]
                    }
                ]
            }
        },
        "conditions": {
            "type": "array",
            "description": "Conditions or groups of conditions for the query, bound by 'and' operator.",
            "items": {
                "anyOf": [
                    { "$ref": "#/definitions/condition" },
                    { "$ref": "#/definitions/conditionGroup" }
                ]
            }
        },
        "joins": {
            "type":"array",
            "description":"Joins",
            "items": {
                "type":"object",
                "properties": {
                    "resource": { "$ref": "#/definitions/resource" },
                    "condition": { "$ref": "#/definitions/condition" }
                },
                "required": ["resource", "condition"]
            }
        },
        "groupings": {
            "type": "array",
            "description": "Properties or aliases to group results by.",
            "items": {
                "anyOf": [
                    { "$ref": "#/definitions/resource" },
                    { "$ref": "#/definitions/resourceProperty" }
                ]
            }
        },
        "limit": {
            "type": "integer",
            "description": "Limit for maximum number of records returned. Pass zero for no limit (may be restricted by user permissions)."
        },
        "offset": {
            "type": "integer",
            "description": "Number of records to offset by or skip before returning first record.",
            "default": 0
        },
        "sorts": {
            "type": "array",
            "description": "Result sorting directives.",
            "items": {"$ref": "#/definitions/sort"}
        },
        "count": {
            "description": "Return a count of the total rows returned by the query, ignoring the limit/offset.",
            "type": "boolean",
            "default": true
        },
        "results": {
            "description": "Return the result set. Set to false and set count to true to receive only a count of matches.",
            "type": "boolean",
            "default": true
        },
        "schema": {
            "description": "Return the schema for the datastore collection.",
            "type": "boolean",
            "default": true
        },
        "keys": {
            "description": "Return results as an array of keyed objects, with the column machine names as keys. If false, results will be an array of simple arrays of values.",
            "type": "boolean",
            "default": true
        },
        "format" : {
            "type": "string",
            "description": "Format to return data in. Default is JSON, can be set to CSV.",
            "enum": ["csv", "json"],
            "default": "json"
        },
        "rowIds": {
            "description": "Flag to include the result_number column in output. Default is FALSE",
            "type": "boolean",
            "default": false
        }
    },
    "definitions": {
        "resource": {
            "type": "string",
            "description": "Alias to resource set in resources array. Not needed when only querying against one resource."
        },
        "property": {
            "type": "string",
            "description": "The property/column or alias to filter by. Should not include collection/table alias.",
            "pattern": "^[^.]+$"
        },
        "resourceProperty": {
            "type": "object",
            "description": "Property name with optional collection/table alias.",
            "properties": {
                "resource": { "$ref": "#/definitions/resource" },
                "property": { "$ref": "#/definitions/property" }
            },
            "required": [ "property" ]
        },
        "conditionGroup": {
            "type": "object",
            "title": "Conditional group",
            "description": "Group of conditions bound by 'and'/'or' operators.",
            "properties": {
                "groupOperator": {
                    "type": "string",
                    "enum": [ "and", "or" ]
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "anyOf": [
                            { "$ref": "#/definitions/condition" },
                            { "$ref": "#/definitions/conditionGroup" }
                        ]
                    }
                }
            }
        },
        "condition": {
            "type": "object",
            "title": "Condition",
            "description": "Condition object including property, value and operator. If querying only one resource, the \"resource\" does not need to be specified.",
            "properties": {
                "resource": { "$ref": "#/definitions/resource" },
                "property": { "$ref": "#/definitions/property" },
                "value": {
                    "anyOf": [
                        { "type": "string" },
                        { "type": "number" },
                        {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    { "type": "string" },
                                    { "type": "number" }
                                ]
                            }
                        },
                        { "$ref": "#/definitions/resourceProperty" }
                    ],
                    "description": "The value to filter against."
                 },
                 "operator": {
                     "type": "string",
                     "description": "Condition operator",
                     "enum": [
                        "=",
                        "<>",
                        "<",
                        "<=",
                        ">",
                        ">=",
                        "like",
                        "between",
                        "in",
                        "not in",
                        "contains",
                        "starts with",
                        "match"
                    ],
                    "default": "="
                 }
            },
            "required": [ "property", "value" ]
        },
        "expression": {
            "type": "object",
            "title": "Expression",
            "description": "Arithmetic or aggregate expression performed on one or more properties.",
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "Expression operator. Note that performing expressions on text or other non-numeric data types my yield unexpected results.",
                    "enum": [
                        "+",
                        "-",
                        "*",
                        "/",
                        "%",
                        "sum",
                        "count",
                        "avg",
                        "max",
                        "min"
                    ]
                },
                "operands": {
                    "type": "array",
                    "description": "Arithmetic operators will require two operands, aggregate operators should take only one. Do not combine arithmetic and aggregate operators in a single query.",
                    "items": {
                        "anyOf": [
                            {
                                "type": "number",
                                "title": "Number"
                            },
                            { "$ref": "#/definitions/property" },
                            { "$ref": "#/definitions/resourceProperty" },
                            {
                                "type": "object",
                                "title": "Expression",
                                "properties": {
                                    "expression": { "$ref": "#/definitions/expression" }
                                }
                            }
                        ]
                    }
                }
            }
        },
        "sort": {
            "type": "object",
            "description": "Properties to sort by in a particular order.",
            "properties": {
                "resource": { "$ref": "#/definitions/resource" },
                "property": { "$ref": "#/definitions/property" },
                "order": {
                    "type": "string",
                    "description": "Order to sort in, lowercase.",
                    "enum": ["asc", "desc"]
                }
            }
        }
    }
}
