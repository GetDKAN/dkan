<?php

/**
 * @file
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\dkan\UrlHostTokenResolver;
use Drupal\dkan_data\DataNodeLifeCycle;
use Drupal\dkan_data\Reference\Dereferencer;
use Drupal\dkan\Exception\DataNodeLifeCycleEntityValidationException;

/**
 * Implements hook_node_load().
 */
function dkan_data_node_load(array $entities) {

  foreach ($entities as $entity) {
    if ($entity->bundle() == "data" && $entity->field_data_type->value == "dataset") {
      // Temporarily save the raw json metadata, for later use.
      $metadata_string = $entity->get('field_json_metadata')->value;
      $entity->referenced_metadata = $metadata_string;

      // Dereference dataset properties.
      $metadata_obj = json_decode($metadata_string);
      $referencer = Drupal::service("dkan_data.dereferencer");
      $metadata_obj = $referencer->dereference($metadata_obj, dereferencing_method());
      $entity->set('field_json_metadata', json_encode($metadata_obj));
    }

    // @todo Decouple "resource" functionality from specific dataset properties.
    if ($entity->bundle() == "data" && $entity->field_data_type->value == "distribution") {
      $metadataString = $entity->get('field_json_metadata')->value;
      $metadataString = UrlHostTokenResolver::resolve($metadataString);
      $entity->set('field_json_metadata', $metadataString);
    }
  }

}

/**
 * Helps select the dereferencing method.
 *
 * @return int
 *   One of the int constants from class ValueReferencer:
 *     - DEREFERENCE_OUTPUT_DEFAULT = 0
 *     - DEREFERENCE_OUTPUT_REFERENCE_IDS = 2
 */
function dereferencing_method() : int {
  $allowed_methods = [
    Dereferencer::DEREFERENCE_OUTPUT_DEFAULT,
    Dereferencer::DEREFERENCE_OUTPUT_REFERENCE_IDS,
  ];

  // Selection based on API's http request query parameters.
  $params = Drupal::request()->query->all();
  if (isset($params['show-reference-ids'])) {
    return Dereferencer::DEREFERENCE_OUTPUT_REFERENCE_IDS;
  }

  // Selection based on static variable.
  $method = drupal_static('dkan_data_dereference_method');
  if (isset($method) && in_array($method, $allowed_methods)) {
    return $method;
  }

  // Default case.
  return Dereferencer::DEREFERENCE_OUTPUT_DEFAULT;
}

/**
 * Implements hook_entity_presave().
 */
function dkan_data_entity_presave(EntityInterface $entity) {
  try {
    (new DataNodeLifeCycle($entity))->presave();
  }
  catch (DataNodeLifeCycleEntityValidationException $e) {
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function dkan_data_node_predelete(EntityInterface $entity) {
  // Check for possible orphan property references when deleting a dataset.
  if ($entity->bundle() == 'data' && $entity->get('field_data_type')->value == 'dataset') {
    $referenced_dataset = json_decode($entity->referenced_metadata);
    $referencer = Drupal::service("dkan_data.orphan_checker");
    $referencer->processReferencesInDeletedDataset($referenced_dataset);
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function dkan_data_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($bundle === 'data') {
    if (isset($fields['field_json_metadata'])) {
      $fields['field_json_metadata']->addConstraint('ProperJson', []);
    }
  }
}
