<?php

declare(strict_types = 1);

namespace Drupal\harvest\Entity;

use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\harvest\HarvestRunInterface;

/**
 * Defines the harvest run entity class.
 *
 * The harvest run entity connects three things:
 * - The timestamp/id of the harvest run.
 * - The plan id for the harvest that was run.
 * - The resulting status information for the run, as a blob of JSON.
 *
 * @ContentEntityType(
 *   id = "harvest_run",
 *   label = @Translation("Harvest Run"),
 *   label_collection = @Translation("Harvest Runs"),
 *   label_singular = @Translation("harvest run"),
 *   label_plural = @Translation("harvest runs"),
 *   label_count = @PluralTranslation(
 *     singular = "@count harvest runs",
 *     plural = "@count harvest runs",
 *   ),
 *   handlers = {
 *     "list_builder" = "Drupal\harvest\HarvestRunListBuilder",
 *     "views_data" = "Drupal\views\EntityViewsData",
 *     "route_provider" = {
 *       "html" = "Drupal\Core\Entity\Routing\AdminHtmlRouteProvider",
 *     },
 *   },
 *   base_table = "harvest_runs",
 *   admin_permission = "administer harvest_run",
 *   entity_keys = {
 *     "id" = "id",
 *     "label" = "id",
 *   },
 *   links = {
 *     "collection" = "/admin/dkan/harvest/runs",
 *     "add-form" = "/harvest-run/add",
 *     "canonical" = "/harvest-run/{harvest_run}",
 *     "edit-form" = "/harvest-run/{harvest_run}/edit",
 *     "delete-form" = "/harvest-run/{harvest_run}/delete",
 *     "delete-multiple-form" = "/admin/content/harvest-run/delete-multiple",
 *   },
 * )
 */
final class HarvestRun extends ContentEntityBase implements HarvestRunInterface {

  /**
   * {@inheritDoc}
   *
   * @todo Formalize UUID constraints.
   */
  public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
    $base_fields = parent::baseFieldDefinitions($entity_type);

    // The id is the unique ID for the harvest run, and also the timestamp at
    // which the run occurred, generated by time().
    $base_fields['id'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('Harvest Run'))
      ->setReadOnly(FALSE)
      ->setTranslatable(FALSE)
      ->setRequired(TRUE)
      ->setDisplayOptions('view', [
        'label' => 'inline',
        'type' => 'string',
        'weight' => -5,
      ])
      ->setDisplayOptions('form', [
        'type' => 'string',
        'weight' => -5,
      ])
      ->setDisplayConfigurable('form', TRUE);

    // Harvest plan id.
    $base_fields['harvest_plan_id'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Harvest Plan ID'))
      ->setDescription(t('The harvest plan ID.'))
      ->setRequired(TRUE)
      ->setTranslatable(FALSE)
      ->setSettings([
        'default_value' => '',
        'max_length' => 255,
      ])
      ->setDisplayOptions('view', [
        'type' => 'basic_string',
        'weight' => 0,
        'label' => 'inline',
      ]);

    // The 'data' field contains JSON which describes the result of the harvest
    // run. This is an arbitrary array created by runHarvest() and
    // Harvest\Harvester::harvest().
    $base_fields['data'] = BaseFieldDefinition::create('string_long')
      ->setLabel(new TranslatableMarkup('Data'))
      ->setReadOnly(FALSE)
      ->setTranslatable(FALSE)
      ->setDisplayOptions('form', [
        'type' => 'string_textarea',
        'weight' => 0,
        'settings' => [
          'rows' => 12,
        ],
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('view', [
        'type' => 'string',
        'weight' => 0,
        'label' => 'above',
      ])
      ->setDisplayConfigurable('view', TRUE);

    // UUID of entity that was extracted.
    $base_fields['extracted_uuid'] = static::createUnlimitedCardinalityUuidField()
      ->setLabel(t('Data node UUID'))
      ->setDescription(t('The Data node UUID.'));

    // @todo Put transform info here.
    // UUID of datastore entity that was loaded.
    $base_fields['load_new_uuid'] = static::createUnlimitedCardinalityUuidField()
      ->setLabel(t('Data node UUID'))
      ->setDescription(t('The Data node UUID.'));
    $base_fields['load_updated_uuid'] = static::createUnlimitedCardinalityUuidField()
      ->setLabel(t('Data node UUID'))
      ->setDescription(t('The Data node UUID.'));
    $base_fields['load_unchanged_uuid'] = static::createUnlimitedCardinalityUuidField()
      ->setLabel(t('Data node UUID'))
      ->setDescription(t('The Data node UUID.'));

    // UUID of entity that was orphaned.
    $base_fields['orphan_uuid'] = static::createUnlimitedCardinalityUuidField()
      ->setLabel(t('Data node UUID'))
      ->setDescription(t('The Data node UUID.'));

    return $base_fields;
  }

  /**
   * Generic field definition for a field with unlimited cardinality.
   *
   * @return \Drupal\Core\Field\BaseFieldDefinition
   *
   * @todo Use type 'uuid', after we figure out how to allow duplicates.
   */
  private static function createUnlimitedCardinalityUuidField(): BaseFieldDefinition {
    return BaseFieldDefinition::create('string')
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setRevisionable(FALSE)
      ->setReadOnly(FALSE)
      ->setStorageRequired(FALSE)
      ->setRequired(FALSE);
  }

  /**
   * {@inheritDoc}
   */
  #[\ReturnTypeWillChange]
  public function jsonSerialize() {
    return $this->getRun();
  }

  /**
   * {@inheritDoc}
   */
  public function getRun(): mixed {
    return json_decode($this->get('data')->getString());
  }

}
