<?php declare(strict_types = 1);

/**
 * @file
 * Provides a harvest runz entity type.
 */

use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function harvest_theme($existing, $type, $theme, $path) {
  return [
    'harvest_run' => [
      'path' => $path . '/templates',
      'template'  => 'harvest-run',
      'render element' => 'elements',
    ]
  ];
}

/**
 * Prepares variables for harvest run templates.
 *
 * Default template: harvest-run.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the harvest runz information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_harvest_run(&$variables) {
  // Helpful $content variable for templates.
  $variables['content'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  /** @var \Drupal\harvest\HarvestRunInterface $entity */
  $entity = $variables['elements']['#harvest_run'];
  //provide the label
  $variables['label'] = $entity->label();
  //provide the alias
  $variables['url'] = $entity->toUrl()->toString();
}


function harvest_theme_suggestions_artwork_alter( array &$suggestions, array $vars, $hook ) {
  if ($vars['elements']['#harvest_run'] ) {
    if (isset($vars['elements']['#view_mode'])) {
      $suggestions[] = 'harvest_run__' . $vars['elements']['#view_mode'];
    }
  }
}

//function harvest_entity_extra_field_info() {
//  $extra['harvest_run']['harvest_run']['display']['pfield_status_extract'] = [
//    'label' => t('Extract Status'),
//    'visible' => TRUE,
//    'weight' => 100,
//  ];
//  return $extra;
//}

function harvest_harvest_run_view(
  array &$build,
  \Drupal\Core\Entity\EntityInterface $entity,
  \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display,
  $view_mode
) {
//  throw new \Exception(print_r(array_keys($build), true));
  $data = json_decode($entity->get('data')->getString(), TRUE);
  $build['pfield_status_extract'] = [
    '#markup' => $data['status']['extract'] ?? '',
  ];
}
