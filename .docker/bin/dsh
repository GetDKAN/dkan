#!/bin/bash

help ()
{
	echo "dsh - Drude Shell"
	echo "Usage: dsh <command> [params]"
	echo "Commands list:"
	echo 
	echo "	init			Set up the project locally. Calls .docker/scripts/drude-init.sh"
	echo "	start (up)		Start vagrant vm (mac only) and docker containers -OR- restarts docker containers"
	echo "	stop (down, halt)	Stop vagrant vm (mac only) or stop containers"
	echo "	reload (restart)	Re-start vagrant vm (mac only) and docker containers"
	echo "	reset			Restart docker containers from scratch (stop, remove, up)"
	echo "	status (st, ps)		Show vm/containers status"
	echo "	bash			Start bash on cli container"
	echo "	exec (run)		Execute a command in cli container (usage: dsh exec <command> [param] [param] [param]...)"
	echo "	mysql			Opens mysql shell to drude database"
	echo "	mysql-import		Truncate database and import from sql dump (usage: dsh mysql-import <filename>)"
	echo "					Note: <filename> should be inside your project root"
	echo "	drush			Shorthand for executing drush commands (usage: dsh drush [command] [options])"
	echo "	cc			Shorthand for clearing caches (usage: dsh cc [cache_type] (\"dsh cc\" is equal to \"dsh cc all\")"
	echo "	behat			Run Behat tests"
	echo "	help			Output this help"
	echo
}

#-------------------------- Helper functions --------------------------------

# Search for file in current dir and all parent dirs
# @param $1 filename
upfind ()
{
	if [[ $1 == '' ]]; then return 1; fi
	local up='../'
	local pathup='./'
	local slashes=$(pwd | sed 's/[^\/]//g')
	for i in $(seq 0 ${#slashes}) ; do 
		if [ -f "${pathup}$1" ] ; then
			echo "${pathup}"
			break
		else
			pathup=$pathup$up
		fi
	done
}

yml_get_path ()
{
	echo `upfind docker-compose.yml`
}

# Returns absolute path 
get_abs_path ()
{
	local _dir
	if [ -f $1 ]; then
		_dir=`dirname $1`
	elif [ -d $1 ]; then
		_dir=$1
	else
		echo "Path \"$1\" does not exist"
		return
	fi
	local absolute=$( cd "${_dir}" ; pwd )
	echo "$absolute"
}

# Returns project root absolute path
get_project_root_path ()
{
	yml_path=`yml_get_path`
	# get relative project root path from docker-compose.yml config
	local project_root_relative=$(grep "&project_root" ${yml_path}docker-compose.yml | sed 's/.*"\(.*\):.*$/\1/')
	local project_root_absolute=$( cd "${yml_path}$project_root_relative" ; pwd )
	echo "$project_root_absolute"
}

# dummy function to check that command is run along settings.php
get_drush_path ()
{
	local docroot=$(get_project_root_path)'/docroot'
	local cwd=$(pwd)
	local pathdiff=${cwd#$docroot}
	if [ "$cwd" == "$pathdiff" ]; then
		echo "dsh supports '$argv' command only from docroot directory or directory that contains settings.php"
		return 1
	fi
	return 0
}

# Get current path relative to project root
# @param $1 name of variable to get result
cmdpath ()
{
	if [[ $# -ne 1 ]]; then return; fi
	project_root_path=$(get_project_root_path)
	# leave only part of absolute path that is after project root
	local cmdpath=${PWD#$project_root_path/}
	if [[ "$cmdpath" == "$(pwd)" ]] ; then

		# if replacement didnt happen then we are in project root or higher
		eval $1="."
	else	
		eval $1="$cmdpath"
	fi
}

# Removes invisible residue from the string that remains leftover sometimes
# @param $1 string to cleanup
# @param $2 variable that receives clean string
clean_string ()
{
	cleaned=$(echo "$1" | sed -e 's/[^a-zA-Z0-9_-]$//')
	eval $2=\'${cleaned}\'
}

# get mysql connection string
# @param $1 gets result
get_mysql_connect ()
{
	# get connection string and cleanup residue that is leftover
	clean_string "$(_run drush sql-connect)" clean_res
	eval $1=\'$clean_res\'
}

#----------------------- Basics check functions -----------------------------

is_linux ()
{
	res=`uname | grep 'Linux'`
	if [[ ! "$res" == '' ]]; then
		return 0;
	else 
		return 1;
	fi
}

# che—Åks wether we are in boot2docker console
is_boot2docker ()
{
	local res=`uname -a|grep 'boot2docker'`
	if [[ ! "$res" == '' ]]; then
		return 0;
	else
		return 1;
	fi
}

# checks if binary exists and callable in PATH
binary_found ()
{
	if [[ "$1" == "" ]]; then
		return 1;
	fi

	local bpath=`which $1`
	
	if [[ "$bpath" != "" ]] && [ -f `which $1` ]; then
		return 0
	else
		echo "\"$1\" executable not found."
		return 1
	fi
}

# check that vagrant binary exists
is_vagrant ()
{
	if is_linux ; then return 1; fi
	if is_boot2docker ; then return 1; fi
	binary_found 'vagrant';
	return $?
}

# check that docker-compose binary exists
is_docker_compose ()
{
	binary_found 'docker-compose';
	return $?
}

# check that docker binary exists
is_docker ()
{
	binary_found 'docker';
	return $?
}

# Checks if yml or vagrantfile (win, mac) is absent
is_yml_absent ()
{
	local vagrant_path=''

	yml_path=`yml_get_path`
	if [ "$yml_path" == "" ] ; then
		echo "dsh: docker-compose.yml not found in your directory tree"
		return 0
	fi

	if is_linux ; then
		return 1; # linux does not need vagrant
	fi

	vagrant_path=`upfind "Vagrantfile"`
	if [ "$vagrant_path" == "" ] ; then
		echo "dsh: Vagrantfile not found in your directory tree"
		return 0
	fi

	#if we got here files are present
	return 1
}

# Checks if vm exists (as per vagrant)
is_vm_exist ()
{
	if is_yml_absent ; then return 2; fi
	if is_linux || is_boot2docker ; then return 0; fi
	if is_vagrant ; then
		res=`vagrant status | grep -e "boot2docker.*not created"`
		if [[ "$res" == "" ]]; then
			return 0
		else 
			echo "dsh: Vagrant reports that boot2docker vm is not created. Please check you Vagrantfile or run \"dsh up\""
			return 1
		fi
	else
		return 2
	fi
}

# Checks if vm is stopped
is_vm_stopped ()
{
	if is_yml_absent ; then return 2; fi
	if is_linux || is_boot2docker ; then return 1; fi
	if is_vagrant ; then
		res=`vagrant status | grep -e "boot2docker.*running"`
		if [[ "$res" == "" ]]; then
			return 0
		else 
			return 1
		fi
	else
		return 2
	fi
}

#------------------------------- Commands -----------------------------------
# bring box up
up ()
{
	echo "Checking files..."
	if is_yml_absent ; then return 2; fi
	if is_vagrant ; then
		echo "Starting vagrant vm..."
		vagrant up
		started=$?
		if [ $started -eq 0 ] && is_docker_compose ; then
			echo "Starting containers..."
			cd `yml_get_path`
			docker-compose up -d
		fi
	elif ( is_boot2docker || is_linux ) && is_docker_compose ; then
		echo "Starting containers..."
		cd `yml_get_path`
		docker-compose up -d
	fi
}

# stop box
down ()
{
	if is_yml_absent ; then return 2; fi
	if ! is_vm_exist ; then return 2; fi
	if is_vagrant ; then
		echo "Stopping vagrant vm..."
		vagrant halt
	elif ( is_boot2docker || is_linux ) && is_docker_compose ; then
		echo "Stopping containers..."
		cd `yml_get_path`
		docker-compose stop
	fi
}

# call 911
restart ()
{
	echo "Checking files..."
	if is_yml_absent ; then return 2; fi
	if ! is_vm_exist ; then return 2; fi
	if is_vagrant ; then
		echo "Restarting vagrant vm..."
		vagrant reload
		started=$?
		if [ $started -eq 0 ] && is_docker_compose ; then
			echo "Starting containers..."
			cd `yml_get_path`
			docker-compose up -d
		fi
	elif ( is_boot2docker || is_linux ) && is_docker_compose ; then
		echo "Restarting containers..."
		cd `yml_get_path`
		docker-compose up -d
	fi	
}

# output status of boot2docker if stopped or containers if started
status ()
{
	if ! is_vm_exist ; then return 2; fi
	if is_yml_absent ; then return 2; fi
	is_vm_stopped
	stopped=$?
	case $stopped in
		2)
			return
			;;
		1)
			if is_docker_compose ; then
				cd `yml_get_path`
				docker-compose ps
			fi
			;;
		0)
			echo "boot2docker is not running"
			if ! is_vm_exist ; then
				return
			else
				echo "Run \"dsh up\" to start boot2docker"
			fi
			;;
	esac
}

# start interactive bash in container
_bash ()
{
	if is_yml_absent ; then return 2; fi
	cd `yml_get_path`
	if is_docker && is_docker_compose ; then
		local container_id
		clean_string $(docker-compose ps -q cli) container_id
		docker exec -it $container_id bash -i
		RES=$?
	fi
}

# Run a command in container in project root
# param $* command with it's params to run
run ()
{
	if is_docker && is_docker_compose ; then
		cd `yml_get_path`
		clean_string $(docker-compose ps -q cli) container_id
		docker exec -it $container_id bash -ic "$*"
	fi
}

# Run a command in container changing dir to the same folder
# param $* command with it's params to run
_run ()
{
	if is_yml_absent ; then return 2; fi
	if is_docker && is_docker_compose ; then
		local cd_path=''
		cmdpath cd_path
		run "cd $cd_path && $*" 
	fi
}

# start interactive mysql shell
mysql ()
{
	if is_yml_absent ; then return 2; fi
	if ! get_drush_path; then return; fi
	local sql_connect
	get_mysql_connect sql_connect
	_run $sql_connect" -A" # -A option to speed up mysql load
}

# Truncate db and import from sql dump
# @param $1 filename of backup file. Should be inside project root
mysql_import ()
{
	if is_yml_absent ; then return 2; fi
	if ! get_drush_path; then return; fi
	project_root=$(get_project_root_path)
	local filename=`basename $1`
	local filepath=`get_abs_path $1`
	#substract project root path from filepath
	local pathdiff=${filepath#$project_root}

	if [[ $pathdiff == $filepath ]] ; then
		# substraction did not succeed because file is outside project root
		echo "\"$filename\" should be inside your project root folder"
		return
	fi

	_confirm "[!] This will delete all current data in database 'drupal'."

	echo $(_drush sql-drop -y)
	local sql_connect
	get_mysql_connect sql_connect
	echo "Importing $filename into database 'drupal'..."
	run "pv ./$pathdiff/$filename | "$sql_connect
	echo "mysql-import finished"
}

# Shortcut to run drush cc ... on site
# @param $1 type of cache to clean (all, css-js, ...)
clear_cache ()
{
	if is_yml_absent ; then return 2; fi
	if ! get_drush_path; then return; fi
	local type='all'
	if [[ ! "$1" == "" ]]; then 
		type=$1
	fi
	_run 'drush cc '$type
}

# shorthand for executing drush commands
_drush ()
{
	if is_yml_absent ; then return 2; fi
	if ! get_drush_path; then return; fi
	_run 'drush '$*
}

# Run Behat tests (also install dependencies through Composer)
# @param $* arguments and params passed to Behat
behat ()
{
	if is_yml_absent ; then return 2; fi
	local project_root_path=$(get_project_root_path)
	if [[ ! -f "$project_root_path/tests/behat/behat.yml" ]]; then
		echo "Missing behat.yml in tests/behat. Aborting..."
		exit
	fi
	run 'cd tests/behat && composer install --prefer-source --no-interaction'
	run 'cd tests/behat && bin/behat -p docker '$*
}

# Set up the project locally
# Calls .docker/scripts/drude-init.sh script, so it must exist.
init ()
{
	local project_root_path=$(get_project_root_path)
	local init_script="$project_root_path/.docker/scripts/drude-init.sh"
	if [[ -f $init_script ]]; then
	  exec $init_script
	else
		echo "Project init script is missing: $init_script"
		echo "See $project_root_path/.docker/scripts/example.drude-init.sh for a starting point."
		exit -1
	fi
}

# Yes/no confirmation dialog with an optional message
# @param $1 confirmation message
_confirm ()
{
	while true; do
		read -p "$1 Continue? [y/n]: " answer
		case $answer in
			[Yy]|[Yy][Ee][Ss] )
				echo "Working..."
				break
				;;
			[Nn]|[Nn][Oo] )
				echo 'Ok, whatever.'
				exit
				;;
			* )
				echo 'Please answer yes or no.'
		esac
	done
}

# Reset containers (stop, remove, up)
reset ()
{
	_confirm "[!] This will delete all project containers including the DB one.";

	echo "Checking files..."
	if is_yml_absent ; then return 2; fi
	if is_vagrant ; then
		echo "Starting vagrant vm..."
		vagrant up
		started=$?
		if [ $started -eq 0 ] && is_docker_compose ; then
			echo "Resetting containers..."
			cd `yml_get_path`
			docker-compose stop && docker-compose rm --force && docker-compose up -d
		fi
	elif ( is_boot2docker || is_linux ) && is_docker_compose ; then
		echo "Resetting containers..."
		cd `yml_get_path`
		docker-compose stop && docker-compose rm --force && docker-compose up -d
	fi
}

# command bindings
argv="$@"
case $1 in
	up)
		up
		;;
	start)
		up
		;;
	stop)
		down
		;;
	down)
		down
		;;
	halt)
		down
		;;
	restart)
		restart
		;;
	reload)
		restart
		;;
	status)
		status
		;;
	st)
		status
		;;
	ps)
		status
		;;
	bash)
		_bash
		;;
	exec)
		shift
		_run $*
		;;
	run)
		shift
		_run $*
		;;
	mysql)
		mysql
		;;
	mysql-import)
		mysql_import $2
		;;
	cc)
		clear_cache $2
		;;
	drush)
		shift
		_drush $*
		;;
	behat)
		shift
		behat $*
		;;
	init)
		shift
		init
		;;
	reset)
		shift
		reset
		;;
	*)
		help
		exit 0
esac
