ahoyapi: v1
version: 0.0.0
commands:
  drupal-rebuild:
    usage: 'Builds a drupal site in ./docroot. Requires database url.'
    cmd: |
      if [ "$AHOY_CMD_PROXY" = "DOCKER" ]; then
        ARGS=`ahoy docker mysql-url`
      fi

      # If no mysql URL from docker, use passed in args.
      if [ "$ARGS" = "" ];then
        ARGS="{{args}}"
      fi
      if [[ "$ARGS" != mysql* ]]; then
          echo "You need to specify the drupal db url to use in the form mysql://root:root@localhost/db as an argument."
          exit 1
      fi
      # Ask the user if they're sure they want to delete an existing docroot.
      if [ -d docroot ]
        then
          ahoy confirm "./docroot folder alredy exists. Delete it and reinstall drupal?" && chmod -R 777 docroot/sites/default && rm -rf docroot ||
          {
            echo ".. skipping installation";
            ahoy cmd-proxy bash dkan/.ahoy/.scripts/mysql-reconnect.sh $ARGS
            exit 1;
          }
      fi
      ahoy cmd-proxy bash dkan/.ahoy/.scripts/drupal-rebuild.sh $ARGS

  remake:
    usage: Rebuild all the dkan projects from the drupal-org.make file using drush make.
    # Note that we tried using --overwrite, but that seems to delete the entire modules/dkan folder which includes both checked-in modules and modules from make.
    # So, we delete the specific folders.
    cmd: |
      ARGS="{{args}}"
      if [ -z "$ARGS" ]; then
        rm -rf docroot/profiles/dkan/modules/contrib ;
        ARGS=''
        echo "removed dkan/modules folders created by make and running a fresh drush make."
      else
        ARGS="--projects=$ARGS"
        echo "Running drush make for the following modules: $ARGS."
      fi
      ahoy cmd-proxy bash dkan/.ahoy/.scripts/dkan-make.sh "$ARGS"

  reinstall:
    usage: Reinstall the dkan install profile (db only).
    cmd: |
      if [ ! -d backups ]; then
        mkdir backups
      fi
      if [ -f backups/last_install.sql ] && ahoy confirm "{{args}} An existing installation backup exists at backups/last_install.sql, do you want to use that instead of reinstalling from scratch?"; then

        ahoy drush sql-drop -y && \
        echo "... Removed tables, restoring DB"
        ahoy dkan sqlc < backups/last_install.sql

        echo "Installed dkan from backup"
      else
        if [ "$AHOY_CMD_PROXY" == "DOCKER" ]; then
          MYSQL=`ahoy docker mysql-url`
          MYSQL="--db-url=$MYSQL"
        else
          MYSQL=''
        fi
        ahoy cmd-proxy bash dkan/.ahoy/.scripts/dkan-si.sh $MYSQL
      fi

  module-fetch:
    usage: Checkout a dkan module from the NuCivic github repo.
    cmd: |
      if [[ "{{args}}" != * ]]; then
          echo "Please specify the name of the module you want to fetch."
          exit 1
      fi
      if [ -d {{args}} ]; then
        echo "The {{args}} folder already exists at ./{{args}}. Consider using that folder or removing it first."
        exit 1
      fi
      git clone git@github.com:NuCivic/{{args}}.git

  module-link:
    usage: Link a module folder into dkan/modules/dkan/.
    cmd: |
      MODULE="{{args}}"
      if [[ "$MODULE" != * ]]; then
          echo "Please specify the name of the module you want to link."
          exit 1
      fi
      if [ ! -d "$MODULE" ]; then
          echo "No module exists at ./$1. Make sure you fetch or create it first."
          exit 1
      fi
      if [ ! -d docroot/profiles/dkan/modules/dkan ]; then
        echo "No dkan folder found at ./docroot/profiles/dkan/modules/dkan. Consider running 'ahoy dkan drupal-rebuild'."
        exit 1
      fi
      if [ ! -d docroot/profiles/dkan/modules/contrib ]; then
        echo "No contrib folder found at ./docroot/profiles/dkan/modules/contrib. Consider running 'ahoy dkan drupal-rebuild'."
        exit 1
      fi
      MODULE_PATH=`find dkan -type d -name "$MODULE" | grep -e 'modules'`
      if [ -d "$MODULE_PATH" ]; then
        echo "Module already exists at '$MODULE_PATH', removing it to make room..."
        rm -rf $MODULE_PATH
      else
        MODULE_PATH="dkan/modules/contrib/$MODULE"
        echo "Module is not part of DKAN core. Placing it at $MODULE_PATH"
        ALREADY_SYMLINKED=`find -L docroot -type l -name $MODULE`
        if [ ! -z "$ALREADY_SYMLINKED" ]; then
          rm $MODULE_PATH
        fi
      fi
      ln -s ../../../$MODULE docroot/profiles/$MODULE_PATH && echo "Symlink created for $MODULE.. "

  module-make:
    usage: Run drush make for a module in dkan/modules/dkan/.
    cmd: |
      MODULE="{{args}}"
      if [ -z "$MODULE" ]; then
          echo "Please specify the name of the module you want to link."
          exit 1
      fi
      if [ ! -d dkan/modules/dkan ]; then
        echo "No dkan folder found at dkan/modules/dkan. Consider running 'ahoy dkan drupal-rebuild'."
        exit 1
      fi
      if [ ! -d docroot/profiles/dkan/modules/contrib ]; then
        echo "No contrib folder found at ./docroot/profiles/dkan/modules/contrib. Consider running 'ahoy dkan drupal-rebuild'."
        exit 1
      fi
      MODULE_PATH=`find dkan -type l -name "$MODULE" | grep -e 'modules'`
      if [ ! -f "$MODULE_PATH/$MODULE.make" ]; then
        echo "No make file found at $MODULE_PATH/$MODULE.make. Consider running 'ahoy dkan link-module'."
        exit 1
      fi
      ahoy drush -y make --no-core --contrib-destination=dkan $MODULE_PATH/$MODULE.make --no-recursion --no-cache --verbose --working-copy

  test:
    usage: Run the tests for dkan.
    cmd: |
      # Store the arguments as a bash array.
      input="{{args}}"

      # CicleCI and docker base64 take different params
      if [ "$(uname -s)" != "Darwin" ]; then
        wrap="-w"
      else
        wrap="-b"
      fi

      b64=`echo "payload: $input" | base64 $wrap 0`
      ahoy cmd-proxy ruby dkan/.ahoy/.scripts/dkan-test.rb "$b64"

  unittests:
    usage: Run phpunit tests
    cmd: ahoy cmd-proxy bash dkan/.ahoy/.scripts/dkan-unittests.sh "{{args}}"

  lint:
    usage: Run linter on code
    hidden: true
    cmd: ahoy cmd-proxy bash dkan/.ahoy/.scripts/dkan-lint.sh "{{args}}"

  create-qa-users:
    usage: Create users for each core role for QA purposes
    cmd: |
      ahoy drush "user-create sitemanager --mail=sitemanager@example.com --password=sitemanager"
      ahoy drush "user-add-role 'site manager' --name=sitemanager"
      ahoy drush "user-create editor --mail=editor@example.com --password=editor"
      ahoy drush "user-add-role editor --name=editor"
      ahoy drush "user-create creator --mail=creator@example.com --password=creator"
      ahoy drush "user-add-role 'content creator' --name=creator"

  dkanextension-update:
    usage: Update the nucivic/dkanextension composer package.
    cmd: ahoy cmd-proxy bash dkan/.ahoy/.scripts/dkanextension-update.sh

  sqlc:
    usage: Abstracted way to connect to the mysql database.
    cmd: |
      # Grab the sql string and ignore stdin so it can be used later.
      ahoy cmd-proxy "$(ahoy drush sql-connect < /dev/null)"

  self-update:
    usage: Update dkan-ahoy
    cmd: |
      set -e
      rm -fR dkan-ahoy
      rm -fR dkan/.ahoy
      rm dkan/dkan-init.sh
      git clone 'git@github.com:getdkan/dkan' --depth=1 dkan-ahoy
      cp -r dkan-ahoy/.ahoy dkan/
      cp dkan-ahoy/dkan-init.sh  dkan/
      cp dkan-ahoy/test/behat.docker.yml dkan/test/
      cp dkan-ahoy/test/behat.circleci.yml dkan/test/
      rm -fR dkan-ahoy
    hide: true

  theme:
    usage: A series of commands for dkan theme development
    import: dkan/.ahoy/theme.ahoy.yml
    hide: true

  # Moved to .ahoy.yml
  uli:
    usage: Log in via drush
    cmd: |
      ruby dkan/.ahoy/.scripts/dkan-uli.rb {{args}}

  server:
    usage: Provided as an easy way to setup the php server during testing.
    cmd:
      ahoy cmd-proxy bash dkan/.ahoy/.scripts/server.sh
