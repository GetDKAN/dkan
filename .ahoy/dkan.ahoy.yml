ahoyapi: v1
version: 0.0.0
commands:
  drupal-rebuild:
    usage: 'Builds a drupal site in ./docroot. Requires database url.'
    cmd: |
      if [[ "{{args}}" != mysql* ]]; then
          echo "You need to specify the drupal db url to use in the form mysql://root:root@localhost/db as an argument."
          exit 1
      fi
      # Ask the user if they're sure they want to delete an existing docroot.
      if [ -d docroot ]
        then
          ahoy confirm "./docroot folder alredy exists. Delete it and reinstall drupal?" && chmod -R 777 docroot/sites/default && rm -rf docroot ||
          { echo ".. skipping installation"; exit 1;}
      fi
      ahoy drush make --prepare-install dkan/drupal-org-core.make docroot --yes
      ln -s ../../dkan docroot/profiles/dkan &&
      ahoy drush "-y --verbose si minimal --sites-subdir=default --account-pass='admin' --db-url={{args}} install_configure_form.update_status_module='''''array\(FALSE,FALSE\)'''''"

  remake:
    usage: Rebuild all the dkan projects from the drupal-org.make file using drush make.
    # Note that we tried using --overwrite, but that seems to delete the entire modules/dkan folder which includes both checked-in modules and modules from make.
    # So, we delete the specific folders.
    cmd: |
      rm -rf docroot/profiles/dkan/modules/dkan/dkan_dataset ;
      rm -rf docroot/profiles/dkan/modules/dkan/dkan_datastore ;
      rm -rf docroot/profiles/dkan/modules/contrib ;
      echo "removed dkan/modules folders created by make and running a fresh drush make."
      ahoy drush -y make --no-core --contrib-destination=./ dkan/drupal-org.make --no-recursion --no-cache --verbose --working-copy docroot/profiles/dkan

  reinstall:
    usage: Reinstall the dkan install profile (db only).
    cmd: |
      if [ ! -d backups ]; then
        mkdir backups
      fi
      if [ -f backups/last_install.sql ] && ahoy confirm "An existing installation backup exists at backups/last_install.sql, do you want to use that instead of reinstalling from scratch?"; then
        ahoy drush sql-drop -y &&
        ahoy dkan sqlc <  backups/last_install.sql && \
        echo "Installed dkan from backup"
      else
        ahoy drush "si dkan --verbose --account-pass='admin' --site-name='DKAN' install_configure_form.update_status_module='''''array\(FALSE,FALSE\)''''' --yes" && \
        ahoy drush sql-dump > backups/last_install.sql.tmp && \
        mv backups/last_install.sql.tmp backups/last_install.sql && \
        echo "Installed DKAN and created a new backup at backups/last_install.sql"
      fi
  module-fetch:
    usage: Checkout a dkan module from the NuCivic github repo.
    cmd: |
      if [[ "{{args}}" != * ]]; then
          echo "Please specify the name of the module you want to fetch."
          exit 1
      fi
      if [ -d {{args}} ]; then
        echo "The {{args}} folder already exists at ./{{args}}. Consider using that folder or removing it first."
        exit 1
      fi
      git clone git@github.com:NuCivic/{{args}}.git

  module-link:
    usage: Link a module folder into dkan/modules/dkan/.
    cmd: |
      MODULE="{{args}}"
      if [[ "$MODULE" != * ]]; then
          echo "Please specify the name of the module you want to link."
          exit 1
      fi
      if [ ! -d "$MODULE" ]; then
          echo "No module exists at ./$1. Make sure you fetch or create it first."
          exit 1
      fi
      if [ ! -d docroot/profiles/dkan/modules/dkan ]; then
        echo "No dkan folder found at ./docroot/profiles/dkan/modules/dkan. Consider running 'ahoy dkan drupal-rebuild'."
        exit 1
      fi
      if [ ! -d docroot/profiles/dkan/modules/contrib ]; then
        echo "No contrib folder found at ./docroot/profiles/dkan/modules/contrib. Consider running 'ahoy dkan drupal-rebuild'."
        exit 1
      fi
      MODULE_PATH=`find dkan -type d -name "$MODULE" | grep -e 'modules'`
      if [ -d "$MODULE_PATH" ]; then
        echo "Module already exists at '$MODULE_PATH', removing it to make room..."
        rm -rf $MODULE_PATH
      else
        MODULE_PATH="dkan/modules/contrib/$MODULE"
        echo "Module is not part of DKAN core. Placing it at $MODULE_PATH"
        ALREADY_SYMLINKED=`find -L docroot -type l -name $MODULE`
        if [ ! -z "$ALREADY_SYMLINKED" ]; then
          rm $MODULE_PATH
        fi
      fi
      ln -s ../../../$MODULE docroot/profiles/$MODULE_PATH && echo "Symlink created for $MODULE.. "

  module-make:
    usage: Run drush make for a module in dkan/modules/dkan/.
    cmd: |
      MODULE="{{args}}"
      if [ -z "$MODULE" ]; then
          echo "Please specify the name of the module you want to link."
          exit 1
      fi
      if [ ! -d dkan/modules/dkan ]; then
        echo "No dkan folder found at dkan/modules/dkan. Consider running 'ahoy dkan drupal-rebuild'."
        exit 1
      fi
      if [ ! -d docroot/profiles/dkan/modules/contrib ]; then
        echo "No contrib folder found at ./docroot/profiles/dkan/modules/contrib. Consider running 'ahoy dkan drupal-rebuild'."
        exit 1
      fi
      MODULE_PATH=`find dkan -type l -name "$MODULE" | grep -e 'modules'`
      if [ ! -f "$MODULE_PATH/$MODULE.make" ]; then
        echo "No make file found at $MODULE_PATH/$MODULE.make. Consider running 'ahoy dkan link-module'."
        exit 1
      fi
      ahoy drush -y make --no-core --contrib-destination=dkan $MODULE_PATH/$MODULE.make --no-recursion --no-cache --verbose --working-copy

  test:
    usage: Run the tests for dkan.
    cmd: |
      # Store the arguments as a bash array.
      ARGS=( "{{args}}" )
      BEHAT_FOLDER=docroot/profiles/dkan/test
      ALT_CONFIG_FILE="behat.local.yml"
      # Crazy bash to get rid of the carriage return. (docker issue)
      BEHAT_ENV=$(echo $(ahoy cmd-proxy printenv HOSTNAME) | tr -d "\r" )
      SKIP_COMPOSER_FLAG="--skip-composer"
      if [[ ! "${ARGS[@]}" == *"$SKIP_COMPOSER_FLAG"* ]]; then
        echo "Installing behat dependencies.."
        ahoy cmd-proxy "cd $BEHAT_FOLDER && composer install --prefer-source --no-interaction"
      else
        echo "Skipping composer install.."
        ARGS=( "${ARGS[@]/$SKIP_COMPOSER_FLAG}" )
      fi
      if [ -f "$BEHAT_FOLDER/$ALT_CONFIG_FILE" ]; then
        echo "Using $BEHAT_FOLDER/$ALT_CONFIG_FILE .."
        CONFIG=" -c $ALT_CONFIG_FILE"
      elif [ "$BEHAT_ENV" == "cli" ]; then
        echo "Using behat.docker.yml config .."
        CONFIG=" -c behat.docker.yml"
      elif [ "$CI" == "true" ]; then
        echo "Using behat.circleci.yml config .."
        CONFIG=" -c behat.circleci.yml"
      else
        echo "$BEHAT_ENV"
        echo "Using behat.yml .."
      fi
      ahoy cmd-proxy "cd $BEHAT_FOLDER && bin/behat $CONFIG ${ARGS[@]}"

  dkanextension-update:
    usage: Update the nucivic/dkanextension composer package.
    cmd: ahoy cmd-proxy 'cd dkan/test && composer update nucivic/dkanextension'

  sqlc:
    usage: Abstracted way to connect to the mysql database.
    cmd: |
      # Grab the sql string and ignore stdin so it can be used later.
      ahoy cmd-proxy "$(ahoy drush sql-connect < /dev/null)"

  self-update:
    usage: Update dkan-ahoy
    cmd: |
      set -e
      rm -fR dkan-ahoy
      rm -fR dkan/.ahoy
      rm dkan/dkan-init.sh
      git clone 'git@github.com:nucivic/dkan' --depth=1 dkan-ahoy
      cp -r dkan-ahoy/.ahoy dkan/
      cp dkan-ahoy/dkan-init.sh  dkan/
      cp dkan-ahoy/test/behat.docker.yml dkan/test/
      cp dkan-ahoy/test/behat.circleci.yml dkan/test/
      rm -fR dkan-ahoy
    hide: true

  theme:
    usage: A series of commands for dkan theme development
    import: dkan/.ahoy/theme.ahoy.yml
    hide: true
