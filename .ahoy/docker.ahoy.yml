ahoyapi: v1
version: 0.0.0
commands:
  env:
    cmd: |
      cat << EOF
        # To initialize your environment to use docker.
        # Run: eval "\$(ahoy docker env)"
        #   OR
        # Add the following to your ~/.bashrc
        #
        # To use docker-sync for improved performance on Mac OS, run:
        #   export AHOY_DOCKER_SYNC=true
        # which will use Docker For Mac instead of docker-machine using native OS file syncing.
        #
        # To use Traefik proxy, set:
        #   export AHOY_USE_PROXY=true
        #
        # To override the default proxy domain (localtest.me), set:
        #   export AHOY_WEB_DOMAIN=mydomain.com
        #
        #
        which docker || (echo "you don't seem to have docker installed. Exiting."; exit 1)
        which docker-compose || (echo "you don't seem to have docker-compose installed. Exiting."; exit 1)
        echo "Setting up docker environment"
        export AHOY_CMD_PROXY=DOCKER
        if [ ! -z "$AHOY_DOCKER_SYNC" ]; then
          which docker-sync || (echo "you don't seem to have docker-sync installed. Run 'sudo gem install docker-sync' to install. Exiting."; exit 1)
        fi
        which docker-machine || (echo "you don't seem to have docker-machine installed. Exiting."; exit 1)
        if [ ! -z "$DOCKER_MACHINE_NAME"  ]; then
          docker-machine start default
          $(docker-machine env default)
        fi
        ahoy docker up
      EOF
    usage: Outputs the commands needed to setup a docker environment.
  hostfile:
    cmd: |
      ip_address="127.0.0.1"
      host_name="dkan.docker"
      # find existing instances in the host file and save the line numbers
      matches_in_hosts="$(grep -n $host_name /etc/hosts | cut -f1 -d:)"
      host_entry="${ip_address}    ${host_name}"

      if [ -z "$matches_in_hosts" ];then
        echo "Adding new hosts entry."
        echo "$host_entry" | sudo tee -a /etc/hosts > /dev/null
      fi
  up:
    cmd: |
      if [ -z $AHOY_CMD_PROXY ]; then
        echo "AHOY_CMD_PROXY is not set. Run 'ahoy docker env' and follow instructions."
        exit 0
      fi
      if [ ! -z "$AHOY_DOCKER_SYNC" ]; then
        ahoy docker docker-sync-init
        export HOST_UID=$(id -u)
        docker-sync start -c dkan/.ahoy/docker-sync.yml
      fi
      # Create dkan network
      DKAN_NETWORK=$(docker network ls -q -f name=dkan_default)
      if [ -z "$DKAN_NETWORK" ]; then
        docker network create dkan_default
      fi

      if [ ! -z "$AHOY_USE_PROXY" ]; then
        ahoy docker proxy-up
      fi;
      ahoy docker compose up -d {{args}}
      ahoy docker hostfile
    usage: Start the docker-compose containers.

  docker-sync-init:
    cmd: |
      SLUG=$(ahoy docker get-slug)
      SYNCDIR=$(pwd)
      sed "s/%%syncname%%/${SLUG}_filesync/g; s~%%syncdir%%~${SYNCDIR}~" dkan/.ahoy/docker-sync.template.yml > dkan/.ahoy/docker-sync.yml
  get-slug:
    cmd: |
      #Use current dir name as basis for slug. Ahoy uses the root folder regardless of being deeper when executed.
      SLUG=${PWD##*/}
      SLUG=${SLUG//-/}
      SLUG=${SLUG//_/}
      SLUG=$(echo ${SLUG} | tr "[A-Z]" "[a-z]") # Mixed case dirs cause issue with docker image names
      echo ${SLUG}
  get-proxy-domain:
    cmd: |
      [ "$AHOY_WEB_DOMAIN" ] && WEB_DOMAIN=$AHOY_WEB_DOMAIN || WEB_DOMAIN="localtest.me"
      echo $WEB_DOMAIN
  get-hostname:
    cmd: |
      if [ ! -z "$AHOY_USE_PROXY" ]; then
        echo "$(ahoy docker get-slug).$(ahoy docker get-proxy-domain)"
      else
        if [ -z "$DOCKER_MACHINE_NAME"  ]; then
          echo "`ahoy docker web-host`"
        else
          echo "`docker-machine ip default`:`ahoy docker compose port web 80|cut -d ':' -f2`"
        fi
      fi

  proxy-up:
    cmd: |
      PROXY_IMAGE=traefik
      PROXY_NAME=proxy
      PROXY_DOMAIN=$(ahoy docker get-proxy-domain)
      DKAN_PATH=$(pwd)/dkan
      # Check if the proxy container is running.
      if [ ! "$(docker ps -f name=${PROXY_NAME} -f ancestor=${PROXY_IMAGE} -q)" ];then
        # Check if the proxy container stopped.
        if [ "$(docker ps -f name=${PROXY_NAME} -f ancestor=${PROXY_IMAGE} -qa)" ];then
          echo "Restarting ${PROXY_NAME} container"
          docker start ${PROXY_NAME}
        else
          echo "Starting proxy container"
          docker run -d --privileged \
            -p 80:80 -p 443:443 -p 8080:8080 --network dkan_default \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$DKAN_PATH/.ahoy/traefik.toml:/etc/traefik/traefik.toml" \
            --name=${PROXY_NAME} traefik --web --docker --docker.domain=${PROXY_DOMAIN} --logLevel=DEBUG
        fi
      fi

      SLUG=$(ahoy docker get-slug)

      # Configure host for proxy.
      PROXYCONF_FILE="dkan/.ahoy/docker-compose.proxyconf.yml"
      echo -e "version: \"2\"" > ${PROXYCONF_FILE}
      echo -e "services:" >> ${PROXYCONF_FILE}
      echo -e "  web:\n    labels:" >> ${PROXYCONF_FILE}
      echo -e "      - traefik.backend=${SLUG}" >> ${PROXYCONF_FILE}
      echo -e "      - traefik.frontend.rule=Host:$(ahoy docker get-hostname)" >> ${PROXYCONF_FILE}
      echo -e "      - traefik.frontend.passHostHeader=true" >> ${PROXYCONF_FILE}
      echo -e "  browser:\n    labels:" >> ${PROXYCONF_FILE}
      echo -e "      - traefik.backend=${SLUG}_browser" >> ${PROXYCONF_FILE}
      echo -e "      - traefik.frontend.rule=Host:browser.$(ahoy docker get-hostname)" >> ${PROXYCONF_FILE}

    usage: Run the nginx-proxy container
  stop:
    cmd: |
      ahoy docker compose stop
      if [ ! -z "$AHOY_DOCKER_SYNC" ]; then
        export HOST_UID=$(id -u)
        docker-sync stop -c dkan/.ahoy/docker-sync.yml
      fi

    usage: Stop the docker-compose containers (non-destructive).

  ps:
    cmd: "ahoy docker compose ps"
    usage: List the running docker-compose containers.

  # Alias for web-ip.
  ip:
    cmd: |
      if [ -z "$DOCKER_MACHINE_NAME"  ]; then
        ahoy docker web-ip
      else
        docker-machine ip default
      fi

    usage: Show the ip address of the web container
  reset:
    cmd: |
      ahoy docker destroy
      ahoy docker up
    usage: Destroy and then restart the docker compose containers.
  destroy:
    cmd: |
      ahoy docker stop
      ahoy docker compose rm
      if [ ! -z "$AHOY_DOCKER_SYNC" ]; then
        export HOST_UID=$(id -u)
        docker-sync stop -c dkan/.ahoy/docker-sync.yml
        docker-sync clean -c dkan/.ahoy/docker-sync.yml
      fi

    usage: Destroy all the docker compose containers. (use before deleting folder)
  exec:
    cmd: |
      all_args=$(echo "{{args}}")
      first_arg=$(echo "{{args}}" | sed  's/\([[:alnum:]]*\ \).*/\1/')
      rest_args=$(echo "{{args}}" | sed  's/\([[:alnum:]]*\ \)//')
      case $first_arg in
        *web*|*db*|*memcached*|*cli*|*browser*|*solr*)
          container=$first_arg
          args=" $rest_args"
          ;;
        *)
          container=cli
          args=" $all_args"
          ;;
      esac

      id=$(ahoy docker compose ps -q $container)
      if [ -t 0 ]; then
        # if the input is empty, then use a tty session
        docker exec -it $id bash -c "$command $args"
      else
        # if the input is not empty, then don't use tty
        docker exec -i $id bash -c "$command $args"
      fi
    usage: run a command in the docker-compose cli service container.
  mysql-url:
    cmd: |
      MYSQL=`docker exec -it $(ahoy docker compose ps -q cli) bash -c 'echo "mysql://$DB_1_ENV_MYSQL_USER:$DB_1_ENV_MYSQL_PASSWORD@$DB_1_PORT_3306_TCP_ADDR/$DB_1_ENV_MYSQL_DATABASE"'`
      MYSQL="$(echo -e "${MYSQL}" | tr -d '[[:space:]]')"
      echo "$MYSQL"
    usage: Outputs a mysql-url
  mysql:
    cmd: "docker exec -it $(ahoy docker compose ps -q cli) bash -c 'mysql -uroot -p$DB_ENV_MYSQL_ROOT_PASSWORD -h$DB_PORT_3306_TCP_ADDR $DB_ENV_MYSQL_DATABASE'"
    usage: Connect to the default mysql database as the root user.
  mysql-import:
    cmd: "docker exec -i $(ahoy docker compose ps -q cli) bash -c 'mysql -u$DB_ENV_MYSQL_USER -p$DB_ENV_MYSQL_PASSWORD -h$DB_PORT_3306_TCP_ADDR $DB_ENV_MYSQL_DATABASE'"
    usage: Pipe in a sql file.  `ahoy docker mysql-import < backups/live.sql`
  mysql-dump:
    cmd: "docker exec -it $(ahoy docker compose ps -q cli) bash -c 'mysqldump -u$DB_ENV_MYSQL_USER -p$DB_ENV_MYSQL_PASSWORD -h$DB_PORT_3306_TCP_ADDR $DB_ENV_MYSQL_DATABASE'"
    usage: Dump data out into a file. `ahoy docker mysql-dump > backups/local.sql`
  compose:
    cmd: |
      DOCKER_COMPOSE_COMMON_CONF="dkan/.ahoy/docker-compose.common.yml"
      if [ ! -z "$AHOY_USE_PROXY" ]; then
        PROXY_CONF="dkan/.ahoy/docker-compose.proxyconf.yml"
      else
        PROXY_CONF="dkan/.ahoy/docker-compose.noproxy.yml"
      fi;
      if [ ! -z "$AHOY_DOCKER_SYNC" ]; then
        export SLUG=$(ahoy docker get-slug)
        VOLUME_CONF="dkan/.ahoy/docker-compose.docker-sync.yml"
      else
        VOLUME_CONF="dkan/.ahoy/docker-compose.nosync.yml"
      fi;
      docker-compose -f $DOCKER_COMPOSE_COMMON_CONF -f $VOLUME_CONF -f $PROXY_CONF -p "${PWD##*/}" {{args}}
    usage: Abstraction for docker-compose
  web-host:
    cmd: |
      echo `ahoy docker exec web printenv VIRTUAL_HOST | tr -d '\r'`
  web-ip:
    usage: Prints the web container IP address
    cmd: |
      echo `docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(ahoy docker compose ps -q web)`
  url:
    usage: Prints the project URL
    cmd: |
      echo -n "http://`ahoy docker get-hostname`"
      if [ -z "$AHOY_USE_PROXY" ]; then
        echo -n ":`ahoy docker compose port web 80|cut -d ':' -f2`"
      fi;
      echo ""
  surl:
    usage: Prints a secure project URL
    cmd: |
      echo -n "https://`ahoy docker get-hostname`"
      if [ -z "$AHOY_USE_PROXY" ]; then
        echo -n ":`ahoy docker compose port web 443|cut -d ':' -f2`"
      fi;
      echo ""
  vnc:
    usage: Prints the project VNC URL
    cmd: |
      if [ "$AHOY_CMD_PROXY" = "DOCKER" ]; then
        echo "https://browser.$(ahoy docker get-hostname):5900"
      else
        if [ -z "$DOCKER_MACHINE_NAME"  ]; then
          echo "https://`ahoy docker web-host`:`ahoy docker compose port browser 5900|cut -d ':' -f2`"
        else
          echo "`docker-machine ip default`:`ahoy docker compose port browser 5900|cut -d ':' -f2`"
        fi
      fi
  cleanup:
    usage: Clean ups docker unused images and volumes. See http://blog.yohanliyanage.com/2015/05/docker-clean-up-after-yourself/.
    cmd: |
      EXITED=`docker ps -a -q -f status=exited`
      DANGLING=`docker images -f "dangling=true" -q`
      if [ ! -z "$EXITED" ]
      then
        docker rm -v $EXITED
      fi
      if [ ! -z "$DANGLING" ]
      then
        docker rmi $DANGLING
      fi
      docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --rm martin/docker-cleanup-volumes
  sync:
    usage: Wrapper for docker-sync using config
    cmd: |
      export HOST_UID=$(id -u)
      docker-sync {{args}} -c dkan/.ahoy/docker-sync.yml

  log:
    usage: Target spcific logs using tail -f.  targets the error log by default.
    cmd: |
      args=$(echo {{args}})
      case $args in
        access)
          ahoy docker exec web tail -f /var/log/apache2/access.log
          ;;
        error)
          ahoy docker exec web tail -f /var/log/apache2/error.log
          ;;
        *)
          ahoy docker exec web tail -f /var/log/apache2/error.log
          ;;
      esac

  apache:
    usage: Interact with the docker apache service Accepts start, stop, restart.
    cmd: ahoy docker exec web apache2ctl {{args}}

  xdebug:
    usage: Enable or disable xdebug configuration. Accepts stop or start
    cmd: |
      os=$(uname)
      if [ "$os" = "Darwin" ]; then
        XDEBUG_FILE=/etc/php5/xdebug-macos.ini
      else
        XDEBUG_FILE=/etc/php5/xdebug-linux.ini
      fi
      args=$(echo {{args}})
      case $args in
        start)
        ahoy docker exec web cp -f ${XDEBUG_FILE} /etc/php5/mods-available/xdebug.ini
        ahoy docker exec cli cp -f ${XDEBUG_FILE} /etc/php5/mods-available/xdebug.ini
        ahoy docker compose restart web
        ahoy docker compose restart cli
          ;;
        stop)
        ahoy docker exec web rm -f /etc/php5/mods-available/xdebug.ini
        ahoy docker exec cli rm -f /etc/php5/mods-available/xdebug.ini
        ahoy docker compose restart web
        ahoy docker compose restart cli
          ;;
        *)
          echo "Accepted arguments are 'sart' or 'stop'".
          exit 1
          ;;
      esac
