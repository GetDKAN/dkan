ahoyapi: v1
version: 0.0.0
commands:
  env:
    cmd: |
      cat << EOF
        # To initialize your environment to use docker.
        # Run: eval \$(ahoy docker env)
        #   OR
        # Add the following to your ~/.bashrc
        which docker || (echo "you don't seem to have docker installed. Exiting."; exit 1)
        which docker-machine || (echo "you don't seem to have docker-machine installed. Exiting."; exit 1)
        which docker-compose || (echo "you don't seem to have docker-compose installed. Exiting."; exit 1)
        echo "Setting up docker environment"
        export AHOY_CMD_PROXY=DOCKER
        docker-machine start default
        $(docker-machine env default)
        ahoy docker up
      EOF
    usage: Outputs the commands needed to setup a docker environment.
  up:
    cmd: "ahoy docker compose up -d {{args}}"
    usage: Start the docker-compose containers.
  proxy-up:
    cmd: "docker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy"
    usage: Run the nginx-proxy container
  stop:
    cmd: "ahoy docker compose stop"
    usage: Stop the docker-compose containers (non-destructive).
  ps:
    cmd: "ahoy docker compose ps"
    usage: List the running docker-compose containers.
  ip:
    cmd: "docker-machine ip default"
    usage: Show the ip address f the default docker machine VM
  reset:
    cmd: "ahoy docker compose stop && ahoy docker compose rm && ahoy docker compose up -d"
    usage: Destroy and then restart the docker compose containers.
  destroy:
    cmd: "ahoy docker compose stop && ahoy docker compose rm"
    usage: Destroy all the docker compose containers. (use before deleting folder)
  exec:
    cmd: |
      all_args=$(echo "{{args}}")
      first_arg=$(echo "{{args}}" | sed  's/\([[:alnum:]]*\ \).*/\1/')
      rest_args=$(echo "{{args}}" | sed  's/\([[:alnum:]]*\ \)//')
      case $first_arg in
        *web*|*db*|*memcached*|*cli*|*browser*|*solr*)
          container=$first_arg
          args=" $rest_args"
          ;;
        *)
          container=cli
          args=" $all_args"
          ;;
      esac

      id=$(ahoy docker compose ps -q $container)
      if [ -t 0 ]; then
        # if the input is empty, then use a tty session
        docker exec -it $id bash -c "$command $args"
      else
        # if the input is not empty, then don't use tty
        docker exec -i $id bash -c "$command $args"
      fi
    usage: run a command in the docker-compose cli or in any other docker service container.

  mysql:
    cmd: "docker exec -it $(ahoy docker compose ps -q cli) bash -c 'mysql -uroot -p$DB_ENV_MYSQL_ROOT_PASSWORD -h$DB_PORT_3306_TCP_ADDR $DB_ENV_MYSQL_DATABASE'"
    usage: Connect to the default mysql database as the root user.
  mysql-import:
    cmd: "docker exec -i $(ahoy docker compose ps -q cli) bash -c 'mysql -u$DB_ENV_MYSQL_USER -p$DB_ENV_MYSQL_PASSWORD -h$DB_PORT_3306_TCP_ADDR $DB_ENV_MYSQL_DATABASE'"
    usage: Pipe in a sql file.  `ahoy docker mysql-import < backups/live.sql`
  mysql-dump:
    cmd: "docker exec -it $(ahoy docker compose ps -q cli) bash -c 'mysqldump -u$DB_ENV_MYSQL_USER -p$DB_ENV_MYSQL_PASSWORD -h$DB_PORT_3306_TCP_ADDR $DB_ENV_MYSQL_DATABASE'"
    usage: Dump data out into a file. `ahoy docker mysql-dump > backups/local.sql`
  compose:
    cmd: docker-compose -f dkan/.ahoy/docker-compose.yml -p "${PWD##*/}" {{args}}
    usage: Abstraction for docker-compose
  url:
    usage: Prints the project URL
    cmd: |
      echo "http://`docker-machine ip default`:`ahoy docker compose port web 80|cut -d ':' -f2`"
  surl:
    usage: Prints a secure project URL
    cmd: |
      echo "https://`docker-machine ip default`:`ahoy docker compose port web 443|cut -d ':' -f2`"
  vnc:
    usage: Prints the project VNC URL
    cmd: |
      echo "`docker-machine ip default`:`ahoy docker compose port browser 5900|cut -d ':' -f2`"

  cleanup:
    usage: Clean ups docker unused images and volumes. See http://blog.yohanliyanage.com/2015/05/docker-clean-up-after-yourself/.
    cmd: |
      EXITED=`docker ps -a -q -f status=exited`
      DANGLING=`docker images -f "dangling=true" -q`
      if [ ! -z "$EXITED" ]
      then
        docker rm -v $EXITED
      fi
      if [ ! -z "$DANGLING" ]
      then
        docker rmi $DANGLING
      fi
      docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --rm martin/docker-cleanup-volumes

  log:
    usage: Target spcific logs using tail -f.  targets the error log by default.
    cmd: |
      args=$(echo {{args}})
      case $args in
        access)
          ahoy docker exec web tail -f /var/log/apache2/access.log
          ;;
        error)
          ahoy docker exec web tail -f /var/log/apache2/error.log
          ;;
        *)
          ahoy docker exec web tail -f /var/log/apache2/error.log
          ;;
      esac

  apache:
    usage: Interact with the docker apache service Accepts start, stop, restart.
    cmd: ahoy docker exec web service apache2 {{args}}

  xdebug:
    usage: Enable or disable xdebug configuration. Accepts stop or start
    cmd: |
      args=$(echo {{args}})
      case $args in
        start)
        ahoy docker exec web cp -f /etc/php5/xdebug.ini /etc/php5/mods-available
        ahoy docker apache restart
          ;;
        stop)
        ahoy docker exec web rm -f /etc/php5/mods-available/xdebug.ini
        ahoy docker apache restart
          ;;
        *)
          echo "Accepted arguments are 'sart' or 'stop'".
          exit 1
          ;;
      esac
