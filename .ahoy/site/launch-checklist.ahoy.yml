ahoyapi: v1
version: 0.0.0
commands:
  run:
    usage: Runs the entire checklist to an alias.
    cmd: |
      set -e
      alias={{args}}
      alias=${alias#@}
      echo "Item, Result, Fix"
      ahoy remote launch-checklist file-permissions $alias
      ahoy remote launch-checklist security-review $alias
      ahoy remote launch-checklist modules-disabled $alias
      ahoy remote launch-checklist registration-required $alias
      ahoy remote launch-checklist db-updates-pending $alias
      ahoy remote launch-checklist modules-up-to-date $alias
      ahoy remote launch-checklist pathauto-patterns $alias
      ahoy remote launch-checklist cron-running $alias
      ahoy remote launch-checklist role-permissions $alias
      ahoy remote launch-checklist dummy-content $alias
      ahoy remote launch-checklist performance-settings $alias
      ahoy remote launch-checklist housekeeping $alias

  file-permissions:
    usage: Checks that file permissions are set properly.
    cmd: |
      alias={{args}}
      alias=${alias#@}
      ahoy cmd-proxy drush @$alias -q cc drush
      # Checks file directory permissions
      PERMISSIONS=`ahoy cmd-proxy drush @$alias ssh \"ls -la ../assets/sites\" | grep default`
      PERMISSIONS=`echo $PERMISSIONS | awk '{ print $1 }'`
      OUTPUT="Files directory permissions"
      if [[ "$PERMISSIONS" == "drwxrwx---" ]]; then
        echo "$OUTPUT, PASSES,"
      else
        echo "$OUTPUT, FAILS, Permissions on files directory should be drwxrwx--- not $PERMISSIONS"
      fi

  security-review:
    usage: Runs the whole security-review checks.
    cmd: |
      alias={{args}}
      alias=${alias#@}
      # Detects if the module is present in the codebase
      MODULES_AVAILABLE=`ahoy cmd-proxy drush @$alias pml --format=json`
      MODULES_AVAILABLE=`echo "$MODULES_AVAILABLE" | grep security_review`
      OUTPUT="Security Review module available"
      if [[ "$MODULES_AVAILABLE" == "" ]];then
        echo "$OUTPUT, FAILS, Please add security_review to the codebase"
        exit 0;
      else
        echo "$OUTPUT, PASSES,"
      fi
      # Runs security_review checks
      ahoy cmd-proxy drush @$alias -y -q en security_review
      ahoy cmd-proxy drush @$alias -q cc drush
      SECURITY_REVIEW_NO_RESULTS=`ahoy cmd-proxy drush @$alias security-review`
      SECURITY_REVIEW_WITH_RESULTS=`ahoy cmd-proxy drush @$alias security-review --results`
      ahoy cmd-proxy drush @$alias -y -q dis security_review
      # Output passes
      NOERRORS=`echo "$SECURITY_REVIEW_NO_RESULTS" | grep -v error`
      printf '%s\n' "$NOERRORS" | while IFS= read -r line
      do
        line=`echo $line | sed 's/\[success\]//g'`
        line=`echo $line | sed 's/\.//g'`
        line=`echo $line | xargs`
        echo "$line, PASSES,"
      done
      # Output fails
      ERRORS=`echo "$SECURITY_REVIEW_WITH_RESULTS" | grep -v success`
      ERRORS=`echo "$ERRORS" | tr '\t' '*' | sed -e 's/\*/\* /g' | sed -e 's/\: /\:/g' | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n\*//g'`
      printf '%s\n' "$ERRORS" | while IFS= read -r line
      do
        if [ ! -z "$line" ]; then
          D="\[error\]"
          echo $line | sed -e 's/'"$D"'/, FAILS, /g' | sed -e 's/\. //g' | tr -s ' '
        fi
      done

  modules-disabled:
    usage: Checks that certain modules are modules-disabled
    cmd: |
      alias={{args}}
      alias=${alias#@}
      MODULES_AVAILABLE=`ahoy cmd-proxy drush @$alias pml`
      MODULES_THAT_NEED_TO_BE_DISABLED="(php),(devel),(views_ui),(field_ui),(maillog),(dblog)"
      IFS=, read -a MODULES_THAT_NEED_TO_BE_DISABLED <<<"$MODULES_THAT_NEED_TO_BE_DISABLED"
      for module in "${MODULES_THAT_NEED_TO_BE_DISABLED[@]}"
      do
        OUTPUT="$module needs to be disabled"
        MODULE_ENABLED=`echo "$MODULES_AVAILABLE" | grep -e "$module" | grep -e "Enabled"`
        if [ -z "$MODULE_ENABLED" ]; then
          echo "$OUTPUT, PASSES,"
        else
          echo "$OUTPUT, FAILS, Set this module to be temporary enabled only on development environments using \$conf['features_master_temp_enabled_modules']"
        fi
      done

  registration-required:
    usage: Checks that registration is required
    cmd: |
      alias={{args}}
      alias=${alias#@}
      export VARIABLES=`ahoy cmd-proxy drush @$alias vget`
      # Check user_register
      export VARIABLE_NAME="user_register"; export VARIABLE_DEFAULT="2"; export VARIABLE_EXPECTED="2"
      ahoy remote launch-checklist check-variable
      # Check user email verification
      export VARIABLE_NAME="user_email_verification"; export VARIABLE_DEFAULT="1"; export VARIABLE_EXPECTED="1"
      ahoy remote launch-checklist check-variable

  db-updates-pending:
    usage: Checks that there are not pending drupal db db-updates-pending
    cmd: |
      alias={{args}}
      alias=${alias#@}
      UPDATE_DB_PENDING=`drush @$alias updb -n`
      OUTPUT="No Database updates are needed"
      if [[ "$UPDATE_DB_PENDING" == "No database updates required" ]];then
        echo "$OUTPUT, PASSES,"
      else
        echo "$OUTPUT, FAILS, please run drush updb. You can include the action as part of your deployment process as well."
      fi

  modules-up-to-date:
    usage: Checks that modules are up to date
    cmd: |
      alias={{args}}
      alias=${alias#@}
      UPDATES=`drush @$alias ups --format=csv | grep -v "Checking available update" | grep -v "Proposed version" | grep -v "Unknown" | grep -v "No release history"`
      SECURITY_UPDATES=`echo "$UPDATES" | grep -w "SECURITY UPDATE available"`
      UPDATES=`echo "$UPDATES" | grep -v "SECURITY UPDATE available"`
      printf '%s\n' "$SECURITY_UPDATES" | while IFS= read -r line
      do
        if [ ! -z "$line" ]; then
        IFS=, read -a line <<<"$line"
        echo "${line[0]} is up to date, FAILS, Your site is using ${line[1]}. ${line[2]} update has SECURITY fixes. Please upgrade."
        fi
      done
      printf '%s\n' "$UPDATES" | while IFS= read -r line
      do
        if [ ! -z "$line" ]; then
        IFS=, read -a line <<<"$line"
        echo "${line[0]} is up to date, FAILS, Your site is using ${line[1]}. ${line[2]} is available"
        fi
      done

  pathauto-patterns:
    usage: Checks that patterns are set for DKAN node bundles
    cmd: |
      alias={{args}}
      alias=${alias#@}
      export VARIABLES=`ahoy cmd-proxy drush @$alias vget`
      # Check pathauto update action
      export VARIABLE_NAME="pathauto_update_action"; export VARIABLE_DEFAULT="2"; export VARIABLE_EXPECTED="1"
      ahoy remote launch-checklist check-variable
      # Check patterns
      BASE_PATTERN="pathauto_TYPE_pattern"
      PATTERN_CHECKS="node_dataset,node_resource,node_dkan_data_story,node_group,node_page,node"
      IFS=, read -a PATTERN_CHECKS <<<"$PATTERN_CHECKS"
      for pattern in "${PATTERN_CHECKS[@]}"
      do
        check=${BASE_PATTERN/"TYPE"/"$pattern"}
        check=`echo "$VARIABLES" | grep "$check"`
        if [ ! -z "$check" ];then
          echo "Pathauto $pattern set correctly, PASSES, $check"
        else
          echo "Pathauto $pattern set correctly, FAILS, Please set a pattern for $pattern"
        fi
      done

  cron-running:
    usage: Checks that cron has been running properly
    cmd: |
      alias={{args}}
      alias=${alias#@}
      NOW=$(date +%s)
      export VARIABLES=`ahoy cmd-proxy drush @$alias vget`
      # Check cron method 
      export VARIABLE_NAME="cron_safe_threshold"; export VARIABLE_DEFAULT="0"; export VARIABLE_EXPECTED="0"
      ahoy remote launch-checklist check-variable
      # Check time since last cron run
      LAST_CRON_RUN=`echo "$VARIABLES" | grep "cron_last"`
      LAST_CRON_RUN=${LAST_CRON_RUN/"cron_last: "/""}
      TIME_SINCE_LAST_CRON_RUN=`expr $NOW - $LAST_CRON_RUN`
      TOLLERABLE_TIME_SPREAD_BETWEEN_CRONS=10000
      if [ "$TIME_SINCE_LAST_CRON_RUN" -gt "$TOLLERABLE_TIME_SPREAD_BETWEEN_CRONS" ];then
        echo "Cron has been running, FAILS, more than $TOLLERABLE_TIME_SPREAD_BETWEEN_CRONS seconds have passed since last cron run"
      else
        echo "Cron has been running, PASSES, Cron last run was $TIME_SINCE_LAST_CRON_RUN seconds ago"
      fi

  role-permissions:
    usage: Checks that permissions are properly set
    cmd: |
      alias={{args}}
      alias=${alias#@}
      ROLES=`ahoy cmd-proxy drush @$alias rls`
      # Grasp IDS and query permissions for roles
      AUTH_ID=`echo "$ROLES" | grep "anonymous user" | awk '{ print $1}'`
      ANON_ID=`echo "$ROLES" | grep "authenticated user" | awk '{ print $1}'`
      AUTH_PERMISSIONS=`ahoy cmd-proxy drush @$alias rls $AUTH_ID | grep -v "Permission"`
      ANON_PERMISSIONS=`ahoy cmd-proxy drush @$alias rls $ANON_ID | grep -v "Permission"`
      # Check that anon users can access content
      ANON_CAN_ACCESS_CONTENT=`echo "$ANON_PERMISSIONS" | grep "access content"`
      if [ -z "$ANON_CAN_ACCESS_CONTENT" ];then
        echo "Anon users can access content, FAILS, Please give the anon role the \"access content\" permission"
      else
        echo "Anon users can access content, PASSES,"
      fi
      # Check that the auth role is not missing permissions granted to the anon role
      echo "$AUTH_PERMISSIONS" | sed 's/[[:space:]]*$//' > auth_permissions.txt
      echo "$ANON_PERMISSIONS" | sed 's/[[:space:]]*$//' > anon_permissions.txt
      AUTH_ANON_DIFF=`diff auth_permissions.txt anon_permissions.txt | grep "<"`
      rm auth_permissions.txt anon_permissions.txt
      if [ ! -z "$AUTH_ANON_DIFF" ]; then
        AUTH_ANON_DIFF=`echo $AUTH_ANON_DIFF | xargs`
        echo "Auth users are not missing anon users permissions, FAILS, $AUTH_ANON_DIFF"
      else
        echo "Auth users are not missing anon users permissions, PASSES,"
      fi

  dummy-content:
    usage: Checks that there is no dummy content set
    cmd: |
      alias={{args}}
      alias=${alias#@}
      # Check nodes create by the admin user
      ADMIN_SQL_ID=`ahoy cmd-proxy drush @$alias sql-query "'select * from users'" | grep admin | awk '{print $1}'`
      ADMIN_NODES=`ahoy cmd-proxy drush @$alias sql-query "'select * from node where node.uid=$ADMIN_SQL_ID'" | awk '{ print $1}'`
      OUTPUT="No content created by admin user"
      if [ ! -z "$ADMIN_NODES" ];then
        ADMIN_NODES=`echo "$ADMIN_NODES" | sed 's/^/node\//' | xargs`
        echo "$OUTPUT, FAILS, All these nodes were created by the admin user: $ADMIN_NODES"
      else
        echo "$OUTPUT, PASSES,"
      fi
      # Check nodes that have dummy or test in the title
      DUMMY_MATCHES="test\|dummy"
      DUMMY_NODES=`ahoy cmd-proxy drush @$alias sql-query "'select nid,title from node'"`
      DUMMY_NODES=`echo "$DUMMY_NODES" | grep -i "$DUMMY_MATCHES"`
      OUTPUT="No nodes with dummy or test in the title"
      if [ ! -z "$DUMMY_NODES" ];then
        DUMMY_NODES=`echo $DUMMY_NODES | awk '{print $1}' | sed 's/^/node\//' | xargs`
        echo "$OUTPUT, FAILS, All these nodes appear to by dummy content: $DUMMY_NODES"
      else
        echo "$OUTPUT, PASSES,"
      fi

  performance-settings:
    usage: Check that certain performance tweaks are in place
    cmd: |
      alias={{args}}
      alias=${alias#@}
      export VARIABLES=`ahoy cmd-proxy drush @$alias vget`
      export VARIABLE_NAME="error_level"; export VARIABLE_DEFAULT="0"; export VARIABLE_EXPECTED="0"
      ahoy remote launch-checklist check-variable
      export VARIABLE_NAME="cache"; export VARIABLE_DEFAULT="0"; export VARIABLE_EXPECTED="1"
      ahoy remote launch-checklist check-variable
      export VARIABLE_NAME="preprocess_css"; export VARIABLE_DEFAULT="0"; export VARIABLE_EXPECTED="1"
      ahoy remote launch-checklist check-variable
      export VARIABLE_NAME="preprocess_js"; export VARIABLE_DEFAULT="0"; export VARIABLE_EXPECTED="1"
      ahoy remote launch-checklist check-variable
      export VARIABLE_NAME="cache_lifetime"; export VARIABLE_DEFAULT="0"; export VARIABLE_EXPECTED="0"
      ahoy remote launch-checklist check-variable
      export VARIABLE_NAME="page_cache_maximum_age"; export VARIABLE_DEFAULT="0"; export VARIABLE_EXPECTED="900"
      ahoy remote launch-checklist check-variable

  housekeeping:
    cmd: |
      alias={{args}}
      alias=${alias#@}
      # Check that CHANGELOG files are being swapped
      CHANGELOG_FILES=`ahoy cmd-proxy drush @$alias ssh \"find . -type f -name CHANGELOG.txt\"`
      OUTPUT="CHANGELOG.txt files have been swapped"
      if [[ ! -z "$CHANGELOG_FILES" ]];then
        CHANGELOG_FILES=`echo $CHANGELOG_FILES | xargs`
        echo "$OUTPUT, FAILS, The following files have been found $CHANGELOG_FILES"
      else
        echo "$OUTPUT, PASSES,"
      fi

  check-variable:
    hidden: true
    usage: Check a specific VARIABLE
    cmd: |
      # Check variable value
      VARIABLE_CHECK=`echo "$VARIABLES" | grep -w "$VARIABLE_NAME"`
      VARIABLE_CHECK=${VARIABLE_CHECK/"$VARIABLE_NAME: "/""}
      VARIABLE_CHECK=${VARIABLE_CHECK:-$VARIABLE_DEFAULT}
      if [[ "$VARIABLE_CHECK" != "$VARIABLE_EXPECTED" ]]; then
        echo "$VARIABLE_NAME set correctly, FAILS, Value is $VARIABLE_CHECK. Please set \$conf['$VARIABLE_NAME'] to $VARIABLE_EXPECTED (or matching constant) in settings.php"
      else
        echo "$VARIABLE_NAME set correctly, PASSES, Value is $VARIABLE_CHECK"
      fi
